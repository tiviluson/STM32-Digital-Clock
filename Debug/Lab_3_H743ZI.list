
Lab_3_H743ZI.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007604  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080078a4  080078a4  000178a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007938  08007938  0002013c  2**0
                  CONTENTS
  4 .ARM          00000008  08007938  08007938  00017938  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007940  08007940  0002013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007940  08007940  00017940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007944  08007944  00017944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  24000000  08007948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  2400007c  080079c4  0002007c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000dc  08007a24  000200dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000066c  2400013c  08007a84  0002013c  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  240007a8  08007a84  000207a8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002407c  00000000  00000000  0002016a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00003376  00000000  00000000  000441e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_aranges 00001530  00000000  00000000  00047560  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000013f8  00000000  00000000  00048a90  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_macro  00038535  00000000  00000000  00049e88  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_line   0001136e  00000000  00000000  000823bd  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_str    00169888  00000000  00000000  0009372b  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .comment      0000007b  00000000  00000000  001fcfb3  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005e28  00000000  00000000  001fd030  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400013c 	.word	0x2400013c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800788c 	.word	0x0800788c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000140 	.word	0x24000140
 80002dc:	0800788c 	.word	0x0800788c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b972 	b.w	800067c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9e08      	ldr	r6, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	4688      	mov	r8, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14b      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4615      	mov	r5, r2
 80003c2:	d967      	bls.n	8000494 <__udivmoddi4+0xe4>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0720 	rsb	r7, r2, #32
 80003ce:	fa01 f302 	lsl.w	r3, r1, r2
 80003d2:	fa20 f707 	lsr.w	r7, r0, r7
 80003d6:	4095      	lsls	r5, r2
 80003d8:	ea47 0803 	orr.w	r8, r7, r3
 80003dc:	4094      	lsls	r4, r2
 80003de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003e8:	fa1f fc85 	uxth.w	ip, r5
 80003ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80003f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f4:	fb07 f10c 	mul.w	r1, r7, ip
 80003f8:	4299      	cmp	r1, r3
 80003fa:	d909      	bls.n	8000410 <__udivmoddi4+0x60>
 80003fc:	18eb      	adds	r3, r5, r3
 80003fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000402:	f080 811b 	bcs.w	800063c <__udivmoddi4+0x28c>
 8000406:	4299      	cmp	r1, r3
 8000408:	f240 8118 	bls.w	800063c <__udivmoddi4+0x28c>
 800040c:	3f02      	subs	r7, #2
 800040e:	442b      	add	r3, r5
 8000410:	1a5b      	subs	r3, r3, r1
 8000412:	b2a4      	uxth	r4, r4
 8000414:	fbb3 f0fe 	udiv	r0, r3, lr
 8000418:	fb0e 3310 	mls	r3, lr, r0, r3
 800041c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000420:	fb00 fc0c 	mul.w	ip, r0, ip
 8000424:	45a4      	cmp	ip, r4
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x8c>
 8000428:	192c      	adds	r4, r5, r4
 800042a:	f100 33ff 	add.w	r3, r0, #4294967295
 800042e:	f080 8107 	bcs.w	8000640 <__udivmoddi4+0x290>
 8000432:	45a4      	cmp	ip, r4
 8000434:	f240 8104 	bls.w	8000640 <__udivmoddi4+0x290>
 8000438:	3802      	subs	r0, #2
 800043a:	442c      	add	r4, r5
 800043c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000440:	eba4 040c 	sub.w	r4, r4, ip
 8000444:	2700      	movs	r7, #0
 8000446:	b11e      	cbz	r6, 8000450 <__udivmoddi4+0xa0>
 8000448:	40d4      	lsrs	r4, r2
 800044a:	2300      	movs	r3, #0
 800044c:	e9c6 4300 	strd	r4, r3, [r6]
 8000450:	4639      	mov	r1, r7
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d909      	bls.n	800046e <__udivmoddi4+0xbe>
 800045a:	2e00      	cmp	r6, #0
 800045c:	f000 80eb 	beq.w	8000636 <__udivmoddi4+0x286>
 8000460:	2700      	movs	r7, #0
 8000462:	e9c6 0100 	strd	r0, r1, [r6]
 8000466:	4638      	mov	r0, r7
 8000468:	4639      	mov	r1, r7
 800046a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046e:	fab3 f783 	clz	r7, r3
 8000472:	2f00      	cmp	r7, #0
 8000474:	d147      	bne.n	8000506 <__udivmoddi4+0x156>
 8000476:	428b      	cmp	r3, r1
 8000478:	d302      	bcc.n	8000480 <__udivmoddi4+0xd0>
 800047a:	4282      	cmp	r2, r0
 800047c:	f200 80fa 	bhi.w	8000674 <__udivmoddi4+0x2c4>
 8000480:	1a84      	subs	r4, r0, r2
 8000482:	eb61 0303 	sbc.w	r3, r1, r3
 8000486:	2001      	movs	r0, #1
 8000488:	4698      	mov	r8, r3
 800048a:	2e00      	cmp	r6, #0
 800048c:	d0e0      	beq.n	8000450 <__udivmoddi4+0xa0>
 800048e:	e9c6 4800 	strd	r4, r8, [r6]
 8000492:	e7dd      	b.n	8000450 <__udivmoddi4+0xa0>
 8000494:	b902      	cbnz	r2, 8000498 <__udivmoddi4+0xe8>
 8000496:	deff      	udf	#255	; 0xff
 8000498:	fab2 f282 	clz	r2, r2
 800049c:	2a00      	cmp	r2, #0
 800049e:	f040 808f 	bne.w	80005c0 <__udivmoddi4+0x210>
 80004a2:	1b49      	subs	r1, r1, r5
 80004a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004a8:	fa1f f885 	uxth.w	r8, r5
 80004ac:	2701      	movs	r7, #1
 80004ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80004b2:	0c23      	lsrs	r3, r4, #16
 80004b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004bc:	fb08 f10c 	mul.w	r1, r8, ip
 80004c0:	4299      	cmp	r1, r3
 80004c2:	d907      	bls.n	80004d4 <__udivmoddi4+0x124>
 80004c4:	18eb      	adds	r3, r5, r3
 80004c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004ca:	d202      	bcs.n	80004d2 <__udivmoddi4+0x122>
 80004cc:	4299      	cmp	r1, r3
 80004ce:	f200 80cd 	bhi.w	800066c <__udivmoddi4+0x2bc>
 80004d2:	4684      	mov	ip, r0
 80004d4:	1a59      	subs	r1, r3, r1
 80004d6:	b2a3      	uxth	r3, r4
 80004d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80004e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004e4:	fb08 f800 	mul.w	r8, r8, r0
 80004e8:	45a0      	cmp	r8, r4
 80004ea:	d907      	bls.n	80004fc <__udivmoddi4+0x14c>
 80004ec:	192c      	adds	r4, r5, r4
 80004ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x14a>
 80004f4:	45a0      	cmp	r8, r4
 80004f6:	f200 80b6 	bhi.w	8000666 <__udivmoddi4+0x2b6>
 80004fa:	4618      	mov	r0, r3
 80004fc:	eba4 0408 	sub.w	r4, r4, r8
 8000500:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000504:	e79f      	b.n	8000446 <__udivmoddi4+0x96>
 8000506:	f1c7 0c20 	rsb	ip, r7, #32
 800050a:	40bb      	lsls	r3, r7
 800050c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000510:	ea4e 0e03 	orr.w	lr, lr, r3
 8000514:	fa01 f407 	lsl.w	r4, r1, r7
 8000518:	fa20 f50c 	lsr.w	r5, r0, ip
 800051c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000520:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000524:	4325      	orrs	r5, r4
 8000526:	fbb3 f9f8 	udiv	r9, r3, r8
 800052a:	0c2c      	lsrs	r4, r5, #16
 800052c:	fb08 3319 	mls	r3, r8, r9, r3
 8000530:	fa1f fa8e 	uxth.w	sl, lr
 8000534:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000538:	fb09 f40a 	mul.w	r4, r9, sl
 800053c:	429c      	cmp	r4, r3
 800053e:	fa02 f207 	lsl.w	r2, r2, r7
 8000542:	fa00 f107 	lsl.w	r1, r0, r7
 8000546:	d90b      	bls.n	8000560 <__udivmoddi4+0x1b0>
 8000548:	eb1e 0303 	adds.w	r3, lr, r3
 800054c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000550:	f080 8087 	bcs.w	8000662 <__udivmoddi4+0x2b2>
 8000554:	429c      	cmp	r4, r3
 8000556:	f240 8084 	bls.w	8000662 <__udivmoddi4+0x2b2>
 800055a:	f1a9 0902 	sub.w	r9, r9, #2
 800055e:	4473      	add	r3, lr
 8000560:	1b1b      	subs	r3, r3, r4
 8000562:	b2ad      	uxth	r5, r5
 8000564:	fbb3 f0f8 	udiv	r0, r3, r8
 8000568:	fb08 3310 	mls	r3, r8, r0, r3
 800056c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000570:	fb00 fa0a 	mul.w	sl, r0, sl
 8000574:	45a2      	cmp	sl, r4
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x1da>
 8000578:	eb1e 0404 	adds.w	r4, lr, r4
 800057c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000580:	d26b      	bcs.n	800065a <__udivmoddi4+0x2aa>
 8000582:	45a2      	cmp	sl, r4
 8000584:	d969      	bls.n	800065a <__udivmoddi4+0x2aa>
 8000586:	3802      	subs	r0, #2
 8000588:	4474      	add	r4, lr
 800058a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800058e:	fba0 8902 	umull	r8, r9, r0, r2
 8000592:	eba4 040a 	sub.w	r4, r4, sl
 8000596:	454c      	cmp	r4, r9
 8000598:	46c2      	mov	sl, r8
 800059a:	464b      	mov	r3, r9
 800059c:	d354      	bcc.n	8000648 <__udivmoddi4+0x298>
 800059e:	d051      	beq.n	8000644 <__udivmoddi4+0x294>
 80005a0:	2e00      	cmp	r6, #0
 80005a2:	d069      	beq.n	8000678 <__udivmoddi4+0x2c8>
 80005a4:	ebb1 050a 	subs.w	r5, r1, sl
 80005a8:	eb64 0403 	sbc.w	r4, r4, r3
 80005ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005b0:	40fd      	lsrs	r5, r7
 80005b2:	40fc      	lsrs	r4, r7
 80005b4:	ea4c 0505 	orr.w	r5, ip, r5
 80005b8:	e9c6 5400 	strd	r5, r4, [r6]
 80005bc:	2700      	movs	r7, #0
 80005be:	e747      	b.n	8000450 <__udivmoddi4+0xa0>
 80005c0:	f1c2 0320 	rsb	r3, r2, #32
 80005c4:	fa20 f703 	lsr.w	r7, r0, r3
 80005c8:	4095      	lsls	r5, r2
 80005ca:	fa01 f002 	lsl.w	r0, r1, r2
 80005ce:	fa21 f303 	lsr.w	r3, r1, r3
 80005d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005d6:	4338      	orrs	r0, r7
 80005d8:	0c01      	lsrs	r1, r0, #16
 80005da:	fbb3 f7fe 	udiv	r7, r3, lr
 80005de:	fa1f f885 	uxth.w	r8, r5
 80005e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005ea:	fb07 f308 	mul.w	r3, r7, r8
 80005ee:	428b      	cmp	r3, r1
 80005f0:	fa04 f402 	lsl.w	r4, r4, r2
 80005f4:	d907      	bls.n	8000606 <__udivmoddi4+0x256>
 80005f6:	1869      	adds	r1, r5, r1
 80005f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80005fc:	d22f      	bcs.n	800065e <__udivmoddi4+0x2ae>
 80005fe:	428b      	cmp	r3, r1
 8000600:	d92d      	bls.n	800065e <__udivmoddi4+0x2ae>
 8000602:	3f02      	subs	r7, #2
 8000604:	4429      	add	r1, r5
 8000606:	1acb      	subs	r3, r1, r3
 8000608:	b281      	uxth	r1, r0
 800060a:	fbb3 f0fe 	udiv	r0, r3, lr
 800060e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000612:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000616:	fb00 f308 	mul.w	r3, r0, r8
 800061a:	428b      	cmp	r3, r1
 800061c:	d907      	bls.n	800062e <__udivmoddi4+0x27e>
 800061e:	1869      	adds	r1, r5, r1
 8000620:	f100 3cff 	add.w	ip, r0, #4294967295
 8000624:	d217      	bcs.n	8000656 <__udivmoddi4+0x2a6>
 8000626:	428b      	cmp	r3, r1
 8000628:	d915      	bls.n	8000656 <__udivmoddi4+0x2a6>
 800062a:	3802      	subs	r0, #2
 800062c:	4429      	add	r1, r5
 800062e:	1ac9      	subs	r1, r1, r3
 8000630:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000634:	e73b      	b.n	80004ae <__udivmoddi4+0xfe>
 8000636:	4637      	mov	r7, r6
 8000638:	4630      	mov	r0, r6
 800063a:	e709      	b.n	8000450 <__udivmoddi4+0xa0>
 800063c:	4607      	mov	r7, r0
 800063e:	e6e7      	b.n	8000410 <__udivmoddi4+0x60>
 8000640:	4618      	mov	r0, r3
 8000642:	e6fb      	b.n	800043c <__udivmoddi4+0x8c>
 8000644:	4541      	cmp	r1, r8
 8000646:	d2ab      	bcs.n	80005a0 <__udivmoddi4+0x1f0>
 8000648:	ebb8 0a02 	subs.w	sl, r8, r2
 800064c:	eb69 020e 	sbc.w	r2, r9, lr
 8000650:	3801      	subs	r0, #1
 8000652:	4613      	mov	r3, r2
 8000654:	e7a4      	b.n	80005a0 <__udivmoddi4+0x1f0>
 8000656:	4660      	mov	r0, ip
 8000658:	e7e9      	b.n	800062e <__udivmoddi4+0x27e>
 800065a:	4618      	mov	r0, r3
 800065c:	e795      	b.n	800058a <__udivmoddi4+0x1da>
 800065e:	4667      	mov	r7, ip
 8000660:	e7d1      	b.n	8000606 <__udivmoddi4+0x256>
 8000662:	4681      	mov	r9, r0
 8000664:	e77c      	b.n	8000560 <__udivmoddi4+0x1b0>
 8000666:	3802      	subs	r0, #2
 8000668:	442c      	add	r4, r5
 800066a:	e747      	b.n	80004fc <__udivmoddi4+0x14c>
 800066c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000670:	442b      	add	r3, r5
 8000672:	e72f      	b.n	80004d4 <__udivmoddi4+0x124>
 8000674:	4638      	mov	r0, r7
 8000676:	e708      	b.n	800048a <__udivmoddi4+0xda>
 8000678:	4637      	mov	r7, r6
 800067a:	e6e9      	b.n	8000450 <__udivmoddi4+0xa0>

0800067c <__aeabi_idiv0>:
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop

08000680 <TurnOnLedBlue>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void TurnOnLedBlue(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
	if (globalCount % 40 > 20)
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <TurnOnLedBlue+0x38>)
 8000686:	6819      	ldr	r1, [r3, #0]
 8000688:	4b0c      	ldr	r3, [pc, #48]	; (80006bc <TurnOnLedBlue+0x3c>)
 800068a:	fba3 2301 	umull	r2, r3, r3, r1
 800068e:	095a      	lsrs	r2, r3, #5
 8000690:	4613      	mov	r3, r2
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	4413      	add	r3, r2
 8000696:	00db      	lsls	r3, r3, #3
 8000698:	1aca      	subs	r2, r1, r3
 800069a:	2a14      	cmp	r2, #20
 800069c:	d905      	bls.n	80006aa <TurnOnLedBlue+0x2a>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800069e:	2201      	movs	r2, #1
 80006a0:	2180      	movs	r1, #128	; 0x80
 80006a2:	4807      	ldr	r0, [pc, #28]	; (80006c0 <TurnOnLedBlue+0x40>)
 80006a4:	f002 fa24 	bl	8002af0 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
}
 80006a8:	e004      	b.n	80006b4 <TurnOnLedBlue+0x34>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2180      	movs	r1, #128	; 0x80
 80006ae:	4804      	ldr	r0, [pc, #16]	; (80006c0 <TurnOnLedBlue+0x40>)
 80006b0:	f002 fa1e 	bl	8002af0 <HAL_GPIO_WritePin>
}
 80006b4:	bf00      	nop
 80006b6:	bd80      	pop	{r7, pc}
 80006b8:	2400015c 	.word	0x2400015c
 80006bc:	cccccccd 	.word	0xcccccccd
 80006c0:	58020400 	.word	0x58020400

080006c4 <TurnOffLedBlue>:

void TurnOffLedBlue(void) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	2180      	movs	r1, #128	; 0x80
 80006cc:	4802      	ldr	r0, [pc, #8]	; (80006d8 <TurnOffLedBlue+0x14>)
 80006ce:	f002 fa0f 	bl	8002af0 <HAL_GPIO_WritePin>
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	58020400 	.word	0x58020400

080006dc <TurnOnLedRed>:

void TurnOnLedRed(void) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
	if (globalCount % 40 > 20)
 80006e0:	4b0d      	ldr	r3, [pc, #52]	; (8000718 <TurnOnLedRed+0x3c>)
 80006e2:	6819      	ldr	r1, [r3, #0]
 80006e4:	4b0d      	ldr	r3, [pc, #52]	; (800071c <TurnOnLedRed+0x40>)
 80006e6:	fba3 2301 	umull	r2, r3, r3, r1
 80006ea:	095a      	lsrs	r2, r3, #5
 80006ec:	4613      	mov	r3, r2
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	4413      	add	r3, r2
 80006f2:	00db      	lsls	r3, r3, #3
 80006f4:	1aca      	subs	r2, r1, r3
 80006f6:	2a14      	cmp	r2, #20
 80006f8:	d906      	bls.n	8000708 <TurnOnLedRed+0x2c>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80006fa:	2201      	movs	r2, #1
 80006fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000700:	4807      	ldr	r0, [pc, #28]	; (8000720 <TurnOnLedRed+0x44>)
 8000702:	f002 f9f5 	bl	8002af0 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
}
 8000706:	e005      	b.n	8000714 <TurnOnLedRed+0x38>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000708:	2200      	movs	r2, #0
 800070a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800070e:	4804      	ldr	r0, [pc, #16]	; (8000720 <TurnOnLedRed+0x44>)
 8000710:	f002 f9ee 	bl	8002af0 <HAL_GPIO_WritePin>
}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	2400015c 	.word	0x2400015c
 800071c:	cccccccd 	.word	0xcccccccd
 8000720:	58020400 	.word	0x58020400

08000724 <TurnOffLedRed>:

void TurnOffLedRed(void) {
 8000724:	b580      	push	{r7, lr}
 8000726:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800072e:	4802      	ldr	r0, [pc, #8]	; (8000738 <TurnOffLedRed+0x14>)
 8000730:	f002 f9de 	bl	8002af0 <HAL_GPIO_WritePin>
}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}
 8000738:	58020400 	.word	0x58020400

0800073c <TurnOnLedYellow>:

void TurnOnLedYellow(void) {
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
	if (globalCount % 40 > 20)
 8000740:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <TurnOnLedYellow+0x38>)
 8000742:	6819      	ldr	r1, [r3, #0]
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <TurnOnLedYellow+0x3c>)
 8000746:	fba3 2301 	umull	r2, r3, r3, r1
 800074a:	095a      	lsrs	r2, r3, #5
 800074c:	4613      	mov	r3, r2
 800074e:	009b      	lsls	r3, r3, #2
 8000750:	4413      	add	r3, r2
 8000752:	00db      	lsls	r3, r3, #3
 8000754:	1aca      	subs	r2, r1, r3
 8000756:	2a14      	cmp	r2, #20
 8000758:	d905      	bls.n	8000766 <TurnOnLedYellow+0x2a>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800075a:	2201      	movs	r2, #1
 800075c:	2101      	movs	r1, #1
 800075e:	4807      	ldr	r0, [pc, #28]	; (800077c <TurnOnLedYellow+0x40>)
 8000760:	f002 f9c6 	bl	8002af0 <HAL_GPIO_WritePin>
		else
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
}
 8000764:	e004      	b.n	8000770 <TurnOnLedYellow+0x34>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	2101      	movs	r1, #1
 800076a:	4804      	ldr	r0, [pc, #16]	; (800077c <TurnOnLedYellow+0x40>)
 800076c:	f002 f9c0 	bl	8002af0 <HAL_GPIO_WritePin>
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	2400015c 	.word	0x2400015c
 8000778:	cccccccd 	.word	0xcccccccd
 800077c:	58020400 	.word	0x58020400

08000780 <TurnOffLedYellow>:

void TurnOffLedYellow(void) {
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	2101      	movs	r1, #1
 8000788:	4802      	ldr	r0, [pc, #8]	; (8000794 <TurnOffLedYellow+0x14>)
 800078a:	f002 f9b1 	bl	8002af0 <HAL_GPIO_WritePin>
}
 800078e:	bf00      	nop
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	58020400 	.word	0x58020400

08000798 <updateTime>:

void updateTime(void) {
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
	if(isSetHour) {
 800079c:	4b29      	ldr	r3, [pc, #164]	; (8000844 <updateTime+0xac>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d015      	beq.n	80007d0 <updateTime+0x38>
			hour = (countHour + hourModified) % 24;
 80007a4:	4b28      	ldr	r3, [pc, #160]	; (8000848 <updateTime+0xb0>)
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	4b28      	ldr	r3, [pc, #160]	; (800084c <updateTime+0xb4>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	18d1      	adds	r1, r2, r3
 80007ae:	4b28      	ldr	r3, [pc, #160]	; (8000850 <updateTime+0xb8>)
 80007b0:	fba3 2301 	umull	r2, r3, r3, r1
 80007b4:	091a      	lsrs	r2, r3, #4
 80007b6:	4613      	mov	r3, r2
 80007b8:	005b      	lsls	r3, r3, #1
 80007ba:	4413      	add	r3, r2
 80007bc:	00db      	lsls	r3, r3, #3
 80007be:	1aca      	subs	r2, r1, r3
 80007c0:	4b24      	ldr	r3, [pc, #144]	; (8000854 <updateTime+0xbc>)
 80007c2:	601a      	str	r2, [r3, #0]
			isSetHour = 0;
 80007c4:	4b1f      	ldr	r3, [pc, #124]	; (8000844 <updateTime+0xac>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	701a      	strb	r2, [r3, #0]
			countHour = 0;
 80007ca:	4b1f      	ldr	r3, [pc, #124]	; (8000848 <updateTime+0xb0>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
			}
	if(isSetMinute) {
 80007d0:	4b21      	ldr	r3, [pc, #132]	; (8000858 <updateTime+0xc0>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d015      	beq.n	8000804 <updateTime+0x6c>
			minute = (countMinute + minuteModified) % 60;
 80007d8:	4b20      	ldr	r3, [pc, #128]	; (800085c <updateTime+0xc4>)
 80007da:	681a      	ldr	r2, [r3, #0]
 80007dc:	4b20      	ldr	r3, [pc, #128]	; (8000860 <updateTime+0xc8>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	18d1      	adds	r1, r2, r3
 80007e2:	4b20      	ldr	r3, [pc, #128]	; (8000864 <updateTime+0xcc>)
 80007e4:	fba3 2301 	umull	r2, r3, r3, r1
 80007e8:	095a      	lsrs	r2, r3, #5
 80007ea:	4613      	mov	r3, r2
 80007ec:	011b      	lsls	r3, r3, #4
 80007ee:	1a9b      	subs	r3, r3, r2
 80007f0:	009b      	lsls	r3, r3, #2
 80007f2:	1aca      	subs	r2, r1, r3
 80007f4:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <updateTime+0xd0>)
 80007f6:	601a      	str	r2, [r3, #0]
			isSetMinute = 0;
 80007f8:	4b17      	ldr	r3, [pc, #92]	; (8000858 <updateTime+0xc0>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	701a      	strb	r2, [r3, #0]
			countMinute = 0;
 80007fe:	4b17      	ldr	r3, [pc, #92]	; (800085c <updateTime+0xc4>)
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
			}
	if(isSetSecond) {
 8000804:	4b19      	ldr	r3, [pc, #100]	; (800086c <updateTime+0xd4>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d015      	beq.n	8000838 <updateTime+0xa0>
			second = (countSecond + secondModified) % 60;
 800080c:	4b18      	ldr	r3, [pc, #96]	; (8000870 <updateTime+0xd8>)
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	4b18      	ldr	r3, [pc, #96]	; (8000874 <updateTime+0xdc>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	18d1      	adds	r1, r2, r3
 8000816:	4b13      	ldr	r3, [pc, #76]	; (8000864 <updateTime+0xcc>)
 8000818:	fba3 2301 	umull	r2, r3, r3, r1
 800081c:	095a      	lsrs	r2, r3, #5
 800081e:	4613      	mov	r3, r2
 8000820:	011b      	lsls	r3, r3, #4
 8000822:	1a9b      	subs	r3, r3, r2
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	1aca      	subs	r2, r1, r3
 8000828:	4b13      	ldr	r3, [pc, #76]	; (8000878 <updateTime+0xe0>)
 800082a:	601a      	str	r2, [r3, #0]
			isSetSecond = 0;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <updateTime+0xd4>)
 800082e:	2200      	movs	r2, #0
 8000830:	701a      	strb	r2, [r3, #0]
			countSecond = 0;
 8000832:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <updateTime+0xd8>)
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
			}
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	2400016c 	.word	0x2400016c
 8000848:	24000170 	.word	0x24000170
 800084c:	2400017c 	.word	0x2400017c
 8000850:	aaaaaaab 	.word	0xaaaaaaab
 8000854:	24000160 	.word	0x24000160
 8000858:	2400016d 	.word	0x2400016d
 800085c:	24000174 	.word	0x24000174
 8000860:	24000000 	.word	0x24000000
 8000864:	88888889 	.word	0x88888889
 8000868:	24000164 	.word	0x24000164
 800086c:	2400016e 	.word	0x2400016e
 8000870:	24000178 	.word	0x24000178
 8000874:	24000004 	.word	0x24000004
 8000878:	24000168 	.word	0x24000168

0800087c <printTimeAdjust>:

void printTimeAdjust(void){
 800087c:	b590      	push	{r4, r7, lr}
 800087e:	b083      	sub	sp, #12
 8000880:	af02      	add	r7, sp, #8
	uart_buf_len = sprintf(uart_buf, "%lu:%lu:%lu\r\n",
							(countHour+hourModified)%24,
 8000882:	4b20      	ldr	r3, [pc, #128]	; (8000904 <printTimeAdjust+0x88>)
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	4b20      	ldr	r3, [pc, #128]	; (8000908 <printTimeAdjust+0x8c>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	441a      	add	r2, r3
	uart_buf_len = sprintf(uart_buf, "%lu:%lu:%lu\r\n",
 800088c:	4b1f      	ldr	r3, [pc, #124]	; (800090c <printTimeAdjust+0x90>)
 800088e:	fba3 1302 	umull	r1, r3, r3, r2
 8000892:	0919      	lsrs	r1, r3, #4
 8000894:	460b      	mov	r3, r1
 8000896:	005b      	lsls	r3, r3, #1
 8000898:	440b      	add	r3, r1
 800089a:	00db      	lsls	r3, r3, #3
 800089c:	1ad1      	subs	r1, r2, r3
							(countMinute+minuteModified)%60,
 800089e:	4b1c      	ldr	r3, [pc, #112]	; (8000910 <printTimeAdjust+0x94>)
 80008a0:	681a      	ldr	r2, [r3, #0]
 80008a2:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <printTimeAdjust+0x98>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	441a      	add	r2, r3
	uart_buf_len = sprintf(uart_buf, "%lu:%lu:%lu\r\n",
 80008a8:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <printTimeAdjust+0x9c>)
 80008aa:	fba3 0302 	umull	r0, r3, r3, r2
 80008ae:	0958      	lsrs	r0, r3, #5
 80008b0:	4603      	mov	r3, r0
 80008b2:	011b      	lsls	r3, r3, #4
 80008b4:	1a1b      	subs	r3, r3, r0
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	1ad0      	subs	r0, r2, r3
							(countSecond+secondModified)%60);
 80008ba:	4b18      	ldr	r3, [pc, #96]	; (800091c <printTimeAdjust+0xa0>)
 80008bc:	681a      	ldr	r2, [r3, #0]
 80008be:	4b18      	ldr	r3, [pc, #96]	; (8000920 <printTimeAdjust+0xa4>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	18d4      	adds	r4, r2, r3
	uart_buf_len = sprintf(uart_buf, "%lu:%lu:%lu\r\n",
 80008c4:	4b14      	ldr	r3, [pc, #80]	; (8000918 <printTimeAdjust+0x9c>)
 80008c6:	fba3 2304 	umull	r2, r3, r3, r4
 80008ca:	095a      	lsrs	r2, r3, #5
 80008cc:	4613      	mov	r3, r2
 80008ce:	011b      	lsls	r3, r3, #4
 80008d0:	1a9b      	subs	r3, r3, r2
 80008d2:	009b      	lsls	r3, r3, #2
 80008d4:	1ae2      	subs	r2, r4, r3
 80008d6:	9200      	str	r2, [sp, #0]
 80008d8:	4603      	mov	r3, r0
 80008da:	460a      	mov	r2, r1
 80008dc:	4911      	ldr	r1, [pc, #68]	; (8000924 <printTimeAdjust+0xa8>)
 80008de:	4812      	ldr	r0, [pc, #72]	; (8000928 <printTimeAdjust+0xac>)
 80008e0:	f006 fbce 	bl	8007080 <siprintf>
 80008e4:	4602      	mov	r2, r0
 80008e6:	4b11      	ldr	r3, [pc, #68]	; (800092c <printTimeAdjust+0xb0>)
 80008e8:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) uart_buf, uart_buf_len, 100);
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <printTimeAdjust+0xb0>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	b29a      	uxth	r2, r3
 80008f0:	2364      	movs	r3, #100	; 0x64
 80008f2:	490d      	ldr	r1, [pc, #52]	; (8000928 <printTimeAdjust+0xac>)
 80008f4:	480e      	ldr	r0, [pc, #56]	; (8000930 <printTimeAdjust+0xb4>)
 80008f6:	f005 f819 	bl	800592c <HAL_UART_Transmit>
}
 80008fa:	bf00      	nop
 80008fc:	3704      	adds	r7, #4
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd90      	pop	{r4, r7, pc}
 8000902:	bf00      	nop
 8000904:	24000170 	.word	0x24000170
 8000908:	2400017c 	.word	0x2400017c
 800090c:	aaaaaaab 	.word	0xaaaaaaab
 8000910:	24000174 	.word	0x24000174
 8000914:	24000000 	.word	0x24000000
 8000918:	88888889 	.word	0x88888889
 800091c:	24000178 	.word	0x24000178
 8000920:	24000004 	.word	0x24000004
 8000924:	080078a4 	.word	0x080078a4
 8000928:	24000648 	.word	0x24000648
 800092c:	2400023c 	.word	0x2400023c
 8000930:	240001b0 	.word	0x240001b0

08000934 <setHour>:

void setHour(void){
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
	if (!isSetHour){
 8000938:	4b1f      	ldr	r3, [pc, #124]	; (80009b8 <setHour+0x84>)
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d123      	bne.n	8000988 <setHour+0x54>
		hourModified = hour;
 8000940:	4b1e      	ldr	r3, [pc, #120]	; (80009bc <setHour+0x88>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a1e      	ldr	r2, [pc, #120]	; (80009c0 <setHour+0x8c>)
 8000946:	6013      	str	r3, [r2, #0]
		minuteModified = (minuteModified == MODIFIED)?minute:minuteModified;
 8000948:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <setHour+0x90>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b3d      	cmp	r3, #61	; 0x3d
 800094e:	d102      	bne.n	8000956 <setHour+0x22>
 8000950:	4b1d      	ldr	r3, [pc, #116]	; (80009c8 <setHour+0x94>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	e001      	b.n	800095a <setHour+0x26>
 8000956:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <setHour+0x90>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a1a      	ldr	r2, [pc, #104]	; (80009c4 <setHour+0x90>)
 800095c:	6013      	str	r3, [r2, #0]
		secondModified = (secondModified == MODIFIED)?second:secondModified;
 800095e:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <setHour+0x98>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	2b3d      	cmp	r3, #61	; 0x3d
 8000964:	d102      	bne.n	800096c <setHour+0x38>
 8000966:	4b1a      	ldr	r3, [pc, #104]	; (80009d0 <setHour+0x9c>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	e001      	b.n	8000970 <setHour+0x3c>
 800096c:	4b17      	ldr	r3, [pc, #92]	; (80009cc <setHour+0x98>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a16      	ldr	r2, [pc, #88]	; (80009cc <setHour+0x98>)
 8000972:	6013      	str	r3, [r2, #0]
		isSetHour = (countHour!=0);
 8000974:	4b17      	ldr	r3, [pc, #92]	; (80009d4 <setHour+0xa0>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	2b00      	cmp	r3, #0
 800097a:	bf14      	ite	ne
 800097c:	2301      	movne	r3, #1
 800097e:	2300      	moveq	r3, #0
 8000980:	b2db      	uxtb	r3, r3
 8000982:	461a      	mov	r2, r3
 8000984:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <setHour+0x84>)
 8000986:	701a      	strb	r2, [r3, #0]
	}

	if (isPressedOneTime) {
 8000988:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <setHour+0xa4>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b00      	cmp	r3, #0
 800098e:	d006      	beq.n	800099e <setHour+0x6a>
		countHour++; printTimeAdjust();
 8000990:	4b10      	ldr	r3, [pc, #64]	; (80009d4 <setHour+0xa0>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	3301      	adds	r3, #1
 8000996:	4a0f      	ldr	r2, [pc, #60]	; (80009d4 <setHour+0xa0>)
 8000998:	6013      	str	r3, [r2, #0]
 800099a:	f7ff ff6f 	bl	800087c <printTimeAdjust>
	}

	if (isPressedMoreThan1s) {
 800099e:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <setHour+0xa8>)
 80009a0:	781b      	ldrb	r3, [r3, #0]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d006      	beq.n	80009b4 <setHour+0x80>
		countHour++;
 80009a6:	4b0b      	ldr	r3, [pc, #44]	; (80009d4 <setHour+0xa0>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	3301      	adds	r3, #1
 80009ac:	4a09      	ldr	r2, [pc, #36]	; (80009d4 <setHour+0xa0>)
 80009ae:	6013      	str	r3, [r2, #0]
		printTimeAdjust();
 80009b0:	f7ff ff64 	bl	800087c <printTimeAdjust>
	}
}
 80009b4:	bf00      	nop
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	2400016c 	.word	0x2400016c
 80009bc:	24000160 	.word	0x24000160
 80009c0:	2400017c 	.word	0x2400017c
 80009c4:	24000000 	.word	0x24000000
 80009c8:	24000164 	.word	0x24000164
 80009cc:	24000004 	.word	0x24000004
 80009d0:	24000168 	.word	0x24000168
 80009d4:	24000170 	.word	0x24000170
 80009d8:	24000185 	.word	0x24000185
 80009dc:	24000186 	.word	0x24000186

080009e0 <setMinute>:

void setMinute(void){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
	if(!isSetMinute){
 80009e4:	4b12      	ldr	r3, [pc, #72]	; (8000a30 <setMinute+0x50>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d109      	bne.n	8000a00 <setMinute+0x20>
		isSetMinute = (countMinute!=0);
 80009ec:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <setMinute+0x54>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	bf14      	ite	ne
 80009f4:	2301      	movne	r3, #1
 80009f6:	2300      	moveq	r3, #0
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	461a      	mov	r2, r3
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <setMinute+0x50>)
 80009fe:	701a      	strb	r2, [r3, #0]
	}

	if(isPressedOneTime) {countMinute++; printTimeAdjust();}
 8000a00:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <setMinute+0x58>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d006      	beq.n	8000a16 <setMinute+0x36>
 8000a08:	4b0a      	ldr	r3, [pc, #40]	; (8000a34 <setMinute+0x54>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	4a09      	ldr	r2, [pc, #36]	; (8000a34 <setMinute+0x54>)
 8000a10:	6013      	str	r3, [r2, #0]
 8000a12:	f7ff ff33 	bl	800087c <printTimeAdjust>

	if(isPressedMoreThan1s) {
 8000a16:	4b09      	ldr	r3, [pc, #36]	; (8000a3c <setMinute+0x5c>)
 8000a18:	781b      	ldrb	r3, [r3, #0]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d006      	beq.n	8000a2c <setMinute+0x4c>
			countMinute++;
 8000a1e:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <setMinute+0x54>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	3301      	adds	r3, #1
 8000a24:	4a03      	ldr	r2, [pc, #12]	; (8000a34 <setMinute+0x54>)
 8000a26:	6013      	str	r3, [r2, #0]
			printTimeAdjust();
 8000a28:	f7ff ff28 	bl	800087c <printTimeAdjust>
	}
}
 8000a2c:	bf00      	nop
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	2400016d 	.word	0x2400016d
 8000a34:	24000174 	.word	0x24000174
 8000a38:	24000185 	.word	0x24000185
 8000a3c:	24000186 	.word	0x24000186

08000a40 <setSecond>:

void setSecond(void){
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
	if(!isSetSecond){
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <setSecond+0x50>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d109      	bne.n	8000a60 <setSecond+0x20>
		isSetSecond = (countSecond!=0);
 8000a4c:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <setSecond+0x54>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	bf14      	ite	ne
 8000a54:	2301      	movne	r3, #1
 8000a56:	2300      	moveq	r3, #0
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <setSecond+0x50>)
 8000a5e:	701a      	strb	r2, [r3, #0]
	}

	if(isPressedOneTime) {countSecond++; printTimeAdjust();}
 8000a60:	4b0d      	ldr	r3, [pc, #52]	; (8000a98 <setSecond+0x58>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d006      	beq.n	8000a76 <setSecond+0x36>
 8000a68:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <setSecond+0x54>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	4a09      	ldr	r2, [pc, #36]	; (8000a94 <setSecond+0x54>)
 8000a70:	6013      	str	r3, [r2, #0]
 8000a72:	f7ff ff03 	bl	800087c <printTimeAdjust>

	if(isPressedMoreThan1s) {
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <setSecond+0x5c>)
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d006      	beq.n	8000a8c <setSecond+0x4c>
			countSecond++;
 8000a7e:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <setSecond+0x54>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	3301      	adds	r3, #1
 8000a84:	4a03      	ldr	r2, [pc, #12]	; (8000a94 <setSecond+0x54>)
 8000a86:	6013      	str	r3, [r2, #0]
			printTimeAdjust();
 8000a88:	f7ff fef8 	bl	800087c <printTimeAdjust>
	}
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	2400016e 	.word	0x2400016e
 8000a94:	24000178 	.word	0x24000178
 8000a98:	24000185 	.word	0x24000185
 8000a9c:	24000186 	.word	0x24000186

08000aa0 <displayClock>:

void displayClock(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	static uint8_t period = 0;
	if (++period==100)
 8000aa4:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <displayClock+0x40>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	b2da      	uxtb	r2, r3
 8000aac:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <displayClock+0x40>)
 8000aae:	701a      	strb	r2, [r3, #0]
 8000ab0:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <displayClock+0x40>)
 8000ab2:	781b      	ldrb	r3, [r3, #0]
 8000ab4:	2b64      	cmp	r3, #100	; 0x64
 8000ab6:	d111      	bne.n	8000adc <displayClock+0x3c>
	{
		period = 0;
 8000ab8:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <displayClock+0x40>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	701a      	strb	r2, [r3, #0]
		normalClock();
 8000abe:	f000 f819 	bl	8000af4 <normalClock>
		if (mode == Mode0) printClock(hour, minute, second);
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <displayClock+0x44>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b01      	cmp	r3, #1
 8000ac8:	d108      	bne.n	8000adc <displayClock+0x3c>
 8000aca:	4b07      	ldr	r3, [pc, #28]	; (8000ae8 <displayClock+0x48>)
 8000acc:	6818      	ldr	r0, [r3, #0]
 8000ace:	4b07      	ldr	r3, [pc, #28]	; (8000aec <displayClock+0x4c>)
 8000ad0:	6819      	ldr	r1, [r3, #0]
 8000ad2:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <displayClock+0x50>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	f000 f870 	bl	8000bbc <printClock>
	}
}
 8000adc:	bf00      	nop
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	240001a1 	.word	0x240001a1
 8000ae4:	2400015a 	.word	0x2400015a
 8000ae8:	24000160 	.word	0x24000160
 8000aec:	24000164 	.word	0x24000164
 8000af0:	24000168 	.word	0x24000168

08000af4 <normalClock>:

void normalClock(void) {
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
	switch(normalClockState) {
 8000af8:	4b2c      	ldr	r3, [pc, #176]	; (8000bac <normalClock+0xb8>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b03      	cmp	r3, #3
 8000afe:	d850      	bhi.n	8000ba2 <normalClock+0xae>
 8000b00:	a201      	add	r2, pc, #4	; (adr r2, 8000b08 <normalClock+0x14>)
 8000b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b06:	bf00      	nop
 8000b08:	08000b19 	.word	0x08000b19
 8000b0c:	08000b33 	.word	0x08000b33
 8000b10:	08000b5b 	.word	0x08000b5b
 8000b14:	08000b83 	.word	0x08000b83
	case startNormalClock:
		hour = 21;
 8000b18:	4b25      	ldr	r3, [pc, #148]	; (8000bb0 <normalClock+0xbc>)
 8000b1a:	2215      	movs	r2, #21
 8000b1c:	601a      	str	r2, [r3, #0]
		minute = 30;
 8000b1e:	4b25      	ldr	r3, [pc, #148]	; (8000bb4 <normalClock+0xc0>)
 8000b20:	221e      	movs	r2, #30
 8000b22:	601a      	str	r2, [r3, #0]
		second = 0;
 8000b24:	4b24      	ldr	r3, [pc, #144]	; (8000bb8 <normalClock+0xc4>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
		normalClockState = runNormalClock;
 8000b2a:	4b20      	ldr	r3, [pc, #128]	; (8000bac <normalClock+0xb8>)
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	701a      	strb	r2, [r3, #0]
		break;
 8000b30:	e037      	b.n	8000ba2 <normalClock+0xae>
	case runNormalClock:
		second++;
 8000b32:	4b21      	ldr	r3, [pc, #132]	; (8000bb8 <normalClock+0xc4>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	3301      	adds	r3, #1
 8000b38:	4a1f      	ldr	r2, [pc, #124]	; (8000bb8 <normalClock+0xc4>)
 8000b3a:	6013      	str	r3, [r2, #0]
		if (second == 60) {
 8000b3c:	4b1e      	ldr	r3, [pc, #120]	; (8000bb8 <normalClock+0xc4>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	2b3c      	cmp	r3, #60	; 0x3c
 8000b42:	d106      	bne.n	8000b52 <normalClock+0x5e>
			second = 0;
 8000b44:	4b1c      	ldr	r3, [pc, #112]	; (8000bb8 <normalClock+0xc4>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
			normalClockState = secondRestart;
 8000b4a:	4b18      	ldr	r3, [pc, #96]	; (8000bac <normalClock+0xb8>)
 8000b4c:	2202      	movs	r2, #2
 8000b4e:	701a      	strb	r2, [r3, #0]
 8000b50:	e003      	b.n	8000b5a <normalClock+0x66>
		} else {
			normalClockState = runNormalClock;
 8000b52:	4b16      	ldr	r3, [pc, #88]	; (8000bac <normalClock+0xb8>)
 8000b54:	2201      	movs	r2, #1
 8000b56:	701a      	strb	r2, [r3, #0]
			break;
 8000b58:	e023      	b.n	8000ba2 <normalClock+0xae>
		}
	case secondRestart:
		minute++;
 8000b5a:	4b16      	ldr	r3, [pc, #88]	; (8000bb4 <normalClock+0xc0>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	4a14      	ldr	r2, [pc, #80]	; (8000bb4 <normalClock+0xc0>)
 8000b62:	6013      	str	r3, [r2, #0]
		if (minute == 60) {
 8000b64:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <normalClock+0xc0>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	2b3c      	cmp	r3, #60	; 0x3c
 8000b6a:	d106      	bne.n	8000b7a <normalClock+0x86>
			minute = 0;
 8000b6c:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <normalClock+0xc0>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
			normalClockState = minuteRestart;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <normalClock+0xb8>)
 8000b74:	2203      	movs	r2, #3
 8000b76:	701a      	strb	r2, [r3, #0]
 8000b78:	e003      	b.n	8000b82 <normalClock+0x8e>
		} else {
			normalClockState = runNormalClock;
 8000b7a:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <normalClock+0xb8>)
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	701a      	strb	r2, [r3, #0]
			break;
 8000b80:	e00f      	b.n	8000ba2 <normalClock+0xae>
		}
	case minuteRestart:
		hour++;
 8000b82:	4b0b      	ldr	r3, [pc, #44]	; (8000bb0 <normalClock+0xbc>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	3301      	adds	r3, #1
 8000b88:	4a09      	ldr	r2, [pc, #36]	; (8000bb0 <normalClock+0xbc>)
 8000b8a:	6013      	str	r3, [r2, #0]
		normalClockState = runNormalClock;
 8000b8c:	4b07      	ldr	r3, [pc, #28]	; (8000bac <normalClock+0xb8>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	701a      	strb	r2, [r3, #0]
		if (hour == 24) hour = 0;
 8000b92:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <normalClock+0xbc>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2b18      	cmp	r3, #24
 8000b98:	d102      	bne.n	8000ba0 <normalClock+0xac>
 8000b9a:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <normalClock+0xbc>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
		break;
 8000ba0:	bf00      	nop
	}
}
 8000ba2:	bf00      	nop
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	24000180 	.word	0x24000180
 8000bb0:	24000160 	.word	0x24000160
 8000bb4:	24000164 	.word	0x24000164
 8000bb8:	24000168 	.word	0x24000168

08000bbc <printClock>:

void printClock(uint32_t hour, uint32_t minute, uint32_t second) {
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b086      	sub	sp, #24
 8000bc0:	af02      	add	r7, sp, #8
 8000bc2:	60f8      	str	r0, [r7, #12]
 8000bc4:	60b9      	str	r1, [r7, #8]
 8000bc6:	607a      	str	r2, [r7, #4]
	uart_buf_len = sprintf(uart_buf, "%lu:%lu:%lu\r\n", hour,minute,second);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	9300      	str	r3, [sp, #0]
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	68fa      	ldr	r2, [r7, #12]
 8000bd0:	4909      	ldr	r1, [pc, #36]	; (8000bf8 <printClock+0x3c>)
 8000bd2:	480a      	ldr	r0, [pc, #40]	; (8000bfc <printClock+0x40>)
 8000bd4:	f006 fa54 	bl	8007080 <siprintf>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <printClock+0x44>)
 8000bdc:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) uart_buf, uart_buf_len, 100);
 8000bde:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <printClock+0x44>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	b29a      	uxth	r2, r3
 8000be4:	2364      	movs	r3, #100	; 0x64
 8000be6:	4905      	ldr	r1, [pc, #20]	; (8000bfc <printClock+0x40>)
 8000be8:	4806      	ldr	r0, [pc, #24]	; (8000c04 <printClock+0x48>)
 8000bea:	f004 fe9f 	bl	800592c <HAL_UART_Transmit>
}
 8000bee:	bf00      	nop
 8000bf0:	3710      	adds	r7, #16
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	080078a4 	.word	0x080078a4
 8000bfc:	24000648 	.word	0x24000648
 8000c00:	2400023c 	.word	0x2400023c
 8000c04:	240001b0 	.word	0x240001b0

08000c08 <printStopWatchTime>:

void printStopWatchTime(void) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af02      	add	r7, sp, #8
	uart_buf_len = sprintf(uart_buf, "Min: %lu\tSec: %lu.%lu\r\n", stopMin, stopSec, stopHun);
 8000c0e:	4b0d      	ldr	r3, [pc, #52]	; (8000c44 <printStopWatchTime+0x3c>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	4b0d      	ldr	r3, [pc, #52]	; (8000c48 <printStopWatchTime+0x40>)
 8000c14:	6819      	ldr	r1, [r3, #0]
 8000c16:	4b0d      	ldr	r3, [pc, #52]	; (8000c4c <printStopWatchTime+0x44>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	9300      	str	r3, [sp, #0]
 8000c1c:	460b      	mov	r3, r1
 8000c1e:	490c      	ldr	r1, [pc, #48]	; (8000c50 <printStopWatchTime+0x48>)
 8000c20:	480c      	ldr	r0, [pc, #48]	; (8000c54 <printStopWatchTime+0x4c>)
 8000c22:	f006 fa2d 	bl	8007080 <siprintf>
 8000c26:	4602      	mov	r2, r0
 8000c28:	4b0b      	ldr	r3, [pc, #44]	; (8000c58 <printStopWatchTime+0x50>)
 8000c2a:	601a      	str	r2, [r3, #0]
	HAL_UART_Transmit(&huart3, (uint8_t *) uart_buf, uart_buf_len, 100);
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <printStopWatchTime+0x50>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	b29a      	uxth	r2, r3
 8000c32:	2364      	movs	r3, #100	; 0x64
 8000c34:	4907      	ldr	r1, [pc, #28]	; (8000c54 <printStopWatchTime+0x4c>)
 8000c36:	4809      	ldr	r0, [pc, #36]	; (8000c5c <printStopWatchTime+0x54>)
 8000c38:	f004 fe78 	bl	800592c <HAL_UART_Transmit>
}
 8000c3c:	bf00      	nop
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	24000194 	.word	0x24000194
 8000c48:	24000198 	.word	0x24000198
 8000c4c:	2400019c 	.word	0x2400019c
 8000c50:	080078b4 	.word	0x080078b4
 8000c54:	24000648 	.word	0x24000648
 8000c58:	2400023c 	.word	0x2400023c
 8000c5c:	240001b0 	.word	0x240001b0

08000c60 <stopWatch>:

void stopWatch(void) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
	if (isPressedOneTime) {
 8000c64:	4b3e      	ldr	r3, [pc, #248]	; (8000d60 <stopWatch+0x100>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d009      	beq.n	8000c80 <stopWatch+0x20>
		stopWatchPause = !stopWatchPause;
 8000c6c:	4b3d      	ldr	r3, [pc, #244]	; (8000d64 <stopWatch+0x104>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	bf0c      	ite	eq
 8000c74:	2301      	moveq	r3, #1
 8000c76:	2300      	movne	r3, #0
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	4b39      	ldr	r3, [pc, #228]	; (8000d64 <stopWatch+0x104>)
 8000c7e:	701a      	strb	r2, [r3, #0]
	}
	if (!stopWatchPause) {
 8000c80:	4b38      	ldr	r3, [pc, #224]	; (8000d64 <stopWatch+0x104>)
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d168      	bne.n	8000d5a <stopWatch+0xfa>
		switch (stopWatchState) {
 8000c88:	4b37      	ldr	r3, [pc, #220]	; (8000d68 <stopWatch+0x108>)
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	2b03      	cmp	r3, #3
 8000c8e:	d864      	bhi.n	8000d5a <stopWatch+0xfa>
 8000c90:	a201      	add	r2, pc, #4	; (adr r2, 8000c98 <stopWatch+0x38>)
 8000c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c96:	bf00      	nop
 8000c98:	08000ca9 	.word	0x08000ca9
 8000c9c:	08000cc3 	.word	0x08000cc3
 8000ca0:	08000cfd 	.word	0x08000cfd
 8000ca4:	08000d33 	.word	0x08000d33
		case initStopWatch: // Initialize values of stopWatch when change to mode 4
			stopMin = 0;
 8000ca8:	4b30      	ldr	r3, [pc, #192]	; (8000d6c <stopWatch+0x10c>)
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
			stopSec = 0;
 8000cae:	4b30      	ldr	r3, [pc, #192]	; (8000d70 <stopWatch+0x110>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
			stopHun = 0;
 8000cb4:	4b2f      	ldr	r3, [pc, #188]	; (8000d74 <stopWatch+0x114>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
			stopWatchState = increaseHund;
 8000cba:	4b2b      	ldr	r3, [pc, #172]	; (8000d68 <stopWatch+0x108>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	701a      	strb	r2, [r3, #0]
			break;
 8000cc0:	e04b      	b.n	8000d5a <stopWatch+0xfa>
		case increaseHund: // Increase the hundredth second value from 0 to 99
			stopHun++;
 8000cc2:	4b2c      	ldr	r3, [pc, #176]	; (8000d74 <stopWatch+0x114>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	4a2a      	ldr	r2, [pc, #168]	; (8000d74 <stopWatch+0x114>)
 8000cca:	6013      	str	r3, [r2, #0]
			if (stopHun == 100) {
 8000ccc:	4b29      	ldr	r3, [pc, #164]	; (8000d74 <stopWatch+0x114>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	2b64      	cmp	r3, #100	; 0x64
 8000cd2:	d10d      	bne.n	8000cf0 <stopWatch+0x90>
				stopHun = 0;
 8000cd4:	4b27      	ldr	r3, [pc, #156]	; (8000d74 <stopWatch+0x114>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
				stopSec++;
 8000cda:	4b25      	ldr	r3, [pc, #148]	; (8000d70 <stopWatch+0x110>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	4a23      	ldr	r2, [pc, #140]	; (8000d70 <stopWatch+0x110>)
 8000ce2:	6013      	str	r3, [r2, #0]
				stopWatchState = increaseSec;
 8000ce4:	4b20      	ldr	r3, [pc, #128]	; (8000d68 <stopWatch+0x108>)
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	701a      	strb	r2, [r3, #0]
				printStopWatchTime();
 8000cea:	f7ff ff8d 	bl	8000c08 <printStopWatchTime>
 8000cee:	e005      	b.n	8000cfc <stopWatch+0x9c>
			} else {
				stopWatchState = increaseHund;
 8000cf0:	4b1d      	ldr	r3, [pc, #116]	; (8000d68 <stopWatch+0x108>)
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	701a      	strb	r2, [r3, #0]
				printStopWatchTime();
 8000cf6:	f7ff ff87 	bl	8000c08 <printStopWatchTime>
				break;
 8000cfa:	e02e      	b.n	8000d5a <stopWatch+0xfa>
			}
		case increaseSec: // Increase the second value from 0 to 59
			if (stopSec == 60) {
 8000cfc:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <stopWatch+0x110>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	2b3c      	cmp	r3, #60	; 0x3c
 8000d02:	d110      	bne.n	8000d26 <stopWatch+0xc6>
				stopHun = 0;
 8000d04:	4b1b      	ldr	r3, [pc, #108]	; (8000d74 <stopWatch+0x114>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
				stopSec = 0;
 8000d0a:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <stopWatch+0x110>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
				stopMin++;
 8000d10:	4b16      	ldr	r3, [pc, #88]	; (8000d6c <stopWatch+0x10c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	3301      	adds	r3, #1
 8000d16:	4a15      	ldr	r2, [pc, #84]	; (8000d6c <stopWatch+0x10c>)
 8000d18:	6013      	str	r3, [r2, #0]
				stopWatchState = increaseMin;
 8000d1a:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <stopWatch+0x108>)
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	701a      	strb	r2, [r3, #0]
				printStopWatchTime();
 8000d20:	f7ff ff72 	bl	8000c08 <printStopWatchTime>
 8000d24:	e005      	b.n	8000d32 <stopWatch+0xd2>
			} else {
				stopWatchState = increaseHund;
 8000d26:	4b10      	ldr	r3, [pc, #64]	; (8000d68 <stopWatch+0x108>)
 8000d28:	2201      	movs	r2, #1
 8000d2a:	701a      	strb	r2, [r3, #0]
				printStopWatchTime();
 8000d2c:	f7ff ff6c 	bl	8000c08 <printStopWatchTime>
				break;
 8000d30:	e013      	b.n	8000d5a <stopWatch+0xfa>
			}
		case increaseMin: // Increase the min value from 0 to 59
			if (stopMin == 60) {
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <stopWatch+0x10c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b3c      	cmp	r3, #60	; 0x3c
 8000d38:	d109      	bne.n	8000d4e <stopWatch+0xee>
				stopHun = 1;
 8000d3a:	4b0e      	ldr	r3, [pc, #56]	; (8000d74 <stopWatch+0x114>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	601a      	str	r2, [r3, #0]
				stopSec = 0;
 8000d40:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <stopWatch+0x110>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
				stopMin = 0;
 8000d46:	4b09      	ldr	r3, [pc, #36]	; (8000d6c <stopWatch+0x10c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	601a      	str	r2, [r3, #0]
 8000d4c:	e002      	b.n	8000d54 <stopWatch+0xf4>
			} else {
				stopWatchState = increaseHund;
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <stopWatch+0x108>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	701a      	strb	r2, [r3, #0]
			}
			printStopWatchTime();
 8000d54:	f7ff ff58 	bl	8000c08 <printStopWatchTime>
			break;
 8000d58:	bf00      	nop
		}
	}
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	24000185 	.word	0x24000185
 8000d64:	240001a0 	.word	0x240001a0
 8000d68:	24000190 	.word	0x24000190
 8000d6c:	24000194 	.word	0x24000194
 8000d70:	24000198 	.word	0x24000198
 8000d74:	2400019c 	.word	0x2400019c

08000d78 <readButtonMode>:

void readButtonMode(void) {
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
	firstReadMode = secondReadMode;
 8000d7c:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <readButtonMode+0x50>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <readButtonMode+0x54>)
 8000d84:	701a      	strb	r2, [r3, #0]
	secondReadMode = !(HAL_GPIO_ReadPin(USER_Btn_GPIO_Port, USER_Btn_Pin));
 8000d86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d8a:	4811      	ldr	r0, [pc, #68]	; (8000dd0 <readButtonMode+0x58>)
 8000d8c:	f001 fe98 	bl	8002ac0 <HAL_GPIO_ReadPin>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	bf0c      	ite	eq
 8000d96:	2301      	moveq	r3, #1
 8000d98:	2300      	movne	r3, #0
 8000d9a:	b2db      	uxtb	r3, r3
 8000d9c:	461a      	mov	r2, r3
 8000d9e:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <readButtonMode+0x50>)
 8000da0:	701a      	strb	r2, [r3, #0]
	if (!firstReadMode && secondReadMode) {
 8000da2:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <readButtonMode+0x54>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d108      	bne.n	8000dbe <readButtonMode+0x46>
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <readButtonMode+0x50>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	b2db      	uxtb	r3, r3
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d003      	beq.n	8000dbe <readButtonMode+0x46>
		buttonMode = pressed;
 8000db6:	4b07      	ldr	r3, [pc, #28]	; (8000dd4 <readButtonMode+0x5c>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	701a      	strb	r2, [r3, #0]
 8000dbc:	e002      	b.n	8000dc4 <readButtonMode+0x4c>
	} else {
		buttonMode = notPressed;
 8000dbe:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <readButtonMode+0x5c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	701a      	strb	r2, [r3, #0]
	}
}
 8000dc4:	bf00      	nop
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	24000192 	.word	0x24000192
 8000dcc:	24000191 	.word	0x24000191
 8000dd0:	58020800 	.word	0x58020800
 8000dd4:	24000158 	.word	0x24000158

08000dd8 <readButtonAdjust>:

void readButtonAdjust(void) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
	firstRead = secondRead;
 8000ddc:	4b47      	ldr	r3, [pc, #284]	; (8000efc <readButtonAdjust+0x124>)
 8000dde:	781b      	ldrb	r3, [r3, #0]
 8000de0:	b2da      	uxtb	r2, r3
 8000de2:	4b47      	ldr	r3, [pc, #284]	; (8000f00 <readButtonAdjust+0x128>)
 8000de4:	701a      	strb	r2, [r3, #0]
	secondRead = !(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5));
 8000de6:	2120      	movs	r1, #32
 8000de8:	4846      	ldr	r0, [pc, #280]	; (8000f04 <readButtonAdjust+0x12c>)
 8000dea:	f001 fe69 	bl	8002ac0 <HAL_GPIO_ReadPin>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	bf0c      	ite	eq
 8000df4:	2301      	moveq	r3, #1
 8000df6:	2300      	movne	r3, #0
 8000df8:	b2db      	uxtb	r3, r3
 8000dfa:	461a      	mov	r2, r3
 8000dfc:	4b3f      	ldr	r3, [pc, #252]	; (8000efc <readButtonAdjust+0x124>)
 8000dfe:	701a      	strb	r2, [r3, #0]

	unchange = (secondRead == firstRead);
 8000e00:	4b3e      	ldr	r3, [pc, #248]	; (8000efc <readButtonAdjust+0x124>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4b3e      	ldr	r3, [pc, #248]	; (8000f00 <readButtonAdjust+0x128>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	bf0c      	ite	eq
 8000e10:	2301      	moveq	r3, #1
 8000e12:	2300      	movne	r3, #0
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	461a      	mov	r2, r3
 8000e18:	4b3b      	ldr	r3, [pc, #236]	; (8000f08 <readButtonAdjust+0x130>)
 8000e1a:	701a      	strb	r2, [r3, #0]
	isPressedOneTime = !unchange && !pressing;
 8000e1c:	4b3a      	ldr	r3, [pc, #232]	; (8000f08 <readButtonAdjust+0x130>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d105      	bne.n	8000e30 <readButtonAdjust+0x58>
 8000e24:	4b39      	ldr	r3, [pc, #228]	; (8000f0c <readButtonAdjust+0x134>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d101      	bne.n	8000e30 <readButtonAdjust+0x58>
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e000      	b.n	8000e32 <readButtonAdjust+0x5a>
 8000e30:	2300      	movs	r3, #0
 8000e32:	b2da      	uxtb	r2, r3
 8000e34:	4b36      	ldr	r3, [pc, #216]	; (8000f10 <readButtonAdjust+0x138>)
 8000e36:	701a      	strb	r2, [r3, #0]
	pressing = unchange && firstRead;
 8000e38:	4b33      	ldr	r3, [pc, #204]	; (8000f08 <readButtonAdjust+0x130>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d006      	beq.n	8000e4e <readButtonAdjust+0x76>
 8000e40:	4b2f      	ldr	r3, [pc, #188]	; (8000f00 <readButtonAdjust+0x128>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	b2db      	uxtb	r3, r3
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <readButtonAdjust+0x76>
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e000      	b.n	8000e50 <readButtonAdjust+0x78>
 8000e4e:	2300      	movs	r3, #0
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	4b2e      	ldr	r3, [pc, #184]	; (8000f0c <readButtonAdjust+0x134>)
 8000e54:	701a      	strb	r2, [r3, #0]

	switch(buttonState) {
 8000e56:	4b2f      	ldr	r3, [pc, #188]	; (8000f14 <readButtonAdjust+0x13c>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	d016      	beq.n	8000e8c <readButtonAdjust+0xb4>
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d02d      	beq.n	8000ebe <readButtonAdjust+0xe6>
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d000      	beq.n	8000e68 <readButtonAdjust+0x90>
				isPressedMoreThan1s = 0;
			}
		}
		break;
	}
}
 8000e66:	e046      	b.n	8000ef6 <readButtonAdjust+0x11e>
		count1 = 0;
 8000e68:	4b2b      	ldr	r3, [pc, #172]	; (8000f18 <readButtonAdjust+0x140>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
		count2 = 0;
 8000e6e:	4b2b      	ldr	r3, [pc, #172]	; (8000f1c <readButtonAdjust+0x144>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
		if (pressing) buttonState = pressLessThan1s;
 8000e74:	4b25      	ldr	r3, [pc, #148]	; (8000f0c <readButtonAdjust+0x134>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d003      	beq.n	8000e84 <readButtonAdjust+0xac>
 8000e7c:	4b25      	ldr	r3, [pc, #148]	; (8000f14 <readButtonAdjust+0x13c>)
 8000e7e:	2201      	movs	r2, #1
 8000e80:	701a      	strb	r2, [r3, #0]
		break;
 8000e82:	e038      	b.n	8000ef6 <readButtonAdjust+0x11e>
		else buttonState = reset;
 8000e84:	4b23      	ldr	r3, [pc, #140]	; (8000f14 <readButtonAdjust+0x13c>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	701a      	strb	r2, [r3, #0]
		break;
 8000e8a:	e034      	b.n	8000ef6 <readButtonAdjust+0x11e>
		count1++; //first pseudo-counter for the first time interval (first 1s)
 8000e8c:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <readButtonAdjust+0x140>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	3301      	adds	r3, #1
 8000e92:	4a21      	ldr	r2, [pc, #132]	; (8000f18 <readButtonAdjust+0x140>)
 8000e94:	6013      	str	r3, [r2, #0]
		if (!pressing) buttonState = reset;
 8000e96:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <readButtonAdjust+0x134>)
 8000e98:	781b      	ldrb	r3, [r3, #0]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d103      	bne.n	8000ea6 <readButtonAdjust+0xce>
 8000e9e:	4b1d      	ldr	r3, [pc, #116]	; (8000f14 <readButtonAdjust+0x13c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]
		break;
 8000ea4:	e027      	b.n	8000ef6 <readButtonAdjust+0x11e>
		else if (count1 == threshold1) buttonState = pressAtLeast1s;
 8000ea6:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <readButtonAdjust+0x140>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2b64      	cmp	r3, #100	; 0x64
 8000eac:	d103      	bne.n	8000eb6 <readButtonAdjust+0xde>
 8000eae:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <readButtonAdjust+0x13c>)
 8000eb0:	2202      	movs	r2, #2
 8000eb2:	701a      	strb	r2, [r3, #0]
		break;
 8000eb4:	e01f      	b.n	8000ef6 <readButtonAdjust+0x11e>
		else buttonState = pressLessThan1s;
 8000eb6:	4b17      	ldr	r3, [pc, #92]	; (8000f14 <readButtonAdjust+0x13c>)
 8000eb8:	2201      	movs	r2, #1
 8000eba:	701a      	strb	r2, [r3, #0]
		break;
 8000ebc:	e01b      	b.n	8000ef6 <readButtonAdjust+0x11e>
		count2++;
 8000ebe:	4b17      	ldr	r3, [pc, #92]	; (8000f1c <readButtonAdjust+0x144>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	3301      	adds	r3, #1
 8000ec4:	4a15      	ldr	r2, [pc, #84]	; (8000f1c <readButtonAdjust+0x144>)
 8000ec6:	6013      	str	r3, [r2, #0]
		if (!pressing) buttonState = reset;
 8000ec8:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <readButtonAdjust+0x134>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d103      	bne.n	8000ed8 <readButtonAdjust+0x100>
 8000ed0:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <readButtonAdjust+0x13c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	701a      	strb	r2, [r3, #0]
		break;
 8000ed6:	e00d      	b.n	8000ef4 <readButtonAdjust+0x11c>
			if (count2==(threshold2-threshold1)) {
 8000ed8:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <readButtonAdjust+0x144>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2b14      	cmp	r3, #20
 8000ede:	d106      	bne.n	8000eee <readButtonAdjust+0x116>
				isPressedMoreThan1s = 1;
 8000ee0:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <readButtonAdjust+0x148>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	701a      	strb	r2, [r3, #0]
				count2 = 0;
 8000ee6:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <readButtonAdjust+0x144>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
		break;
 8000eec:	e002      	b.n	8000ef4 <readButtonAdjust+0x11c>
				isPressedMoreThan1s = 0;
 8000eee:	4b0c      	ldr	r3, [pc, #48]	; (8000f20 <readButtonAdjust+0x148>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	701a      	strb	r2, [r3, #0]
		break;
 8000ef4:	bf00      	nop
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	24000182 	.word	0x24000182
 8000f00:	24000181 	.word	0x24000181
 8000f04:	58020000 	.word	0x58020000
 8000f08:	24000183 	.word	0x24000183
 8000f0c:	24000184 	.word	0x24000184
 8000f10:	24000185 	.word	0x24000185
 8000f14:	24000159 	.word	0x24000159
 8000f18:	24000188 	.word	0x24000188
 8000f1c:	2400018c 	.word	0x2400018c
 8000f20:	24000186 	.word	0x24000186

08000f24 <SetGlobalMode>:
		}
		break;
	}
}*/

void SetGlobalMode(void) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	globalCount++;
 8000f28:	4b3e      	ldr	r3, [pc, #248]	; (8001024 <SetGlobalMode+0x100>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	4a3d      	ldr	r2, [pc, #244]	; (8001024 <SetGlobalMode+0x100>)
 8000f30:	6013      	str	r3, [r2, #0]
	readButtonMode();
 8000f32:	f7ff ff21 	bl	8000d78 <readButtonMode>
	readButtonAdjust();
 8000f36:	f7ff ff4f 	bl	8000dd8 <readButtonAdjust>
	switch(mode) {
 8000f3a:	4b3b      	ldr	r3, [pc, #236]	; (8001028 <SetGlobalMode+0x104>)
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b05      	cmp	r3, #5
 8000f40:	d86d      	bhi.n	800101e <SetGlobalMode+0xfa>
 8000f42:	a201      	add	r2, pc, #4	; (adr r2, 8000f48 <SetGlobalMode+0x24>)
 8000f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f48:	08000f61 	.word	0x08000f61
 8000f4c:	08000f75 	.word	0x08000f75
 8000f50:	08000f8d 	.word	0x08000f8d
 8000f54:	08000fad 	.word	0x08000fad
 8000f58:	08000fd1 	.word	0x08000fd1
 8000f5c:	08000ff5 	.word	0x08000ff5
	case init:
		TurnOffLedYellow();
 8000f60:	f7ff fc0e 	bl	8000780 <TurnOffLedYellow>
		TurnOffLedRed();
 8000f64:	f7ff fbde 	bl	8000724 <TurnOffLedRed>
		TurnOffLedBlue();
 8000f68:	f7ff fbac 	bl	80006c4 <TurnOffLedBlue>
		//reset all other global variables
		mode = Mode0;
 8000f6c:	4b2e      	ldr	r3, [pc, #184]	; (8001028 <SetGlobalMode+0x104>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	701a      	strb	r2, [r3, #0]
		break;
 8000f72:	e054      	b.n	800101e <SetGlobalMode+0xfa>
	case Mode0:
		//displayClock();
		//printClock(hour, minute, second);
		if (buttonMode == pressed) mode = Mode1;
 8000f74:	4b2d      	ldr	r3, [pc, #180]	; (800102c <SetGlobalMode+0x108>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d103      	bne.n	8000f84 <SetGlobalMode+0x60>
 8000f7c:	4b2a      	ldr	r3, [pc, #168]	; (8001028 <SetGlobalMode+0x104>)
 8000f7e:	2202      	movs	r2, #2
 8000f80:	701a      	strb	r2, [r3, #0]
		else mode = Mode0;
		break;
 8000f82:	e04c      	b.n	800101e <SetGlobalMode+0xfa>
		else mode = Mode0;
 8000f84:	4b28      	ldr	r3, [pc, #160]	; (8001028 <SetGlobalMode+0x104>)
 8000f86:	2201      	movs	r2, #1
 8000f88:	701a      	strb	r2, [r3, #0]
		break;
 8000f8a:	e048      	b.n	800101e <SetGlobalMode+0xfa>
	case Mode1:
		setHour();
 8000f8c:	f7ff fcd2 	bl	8000934 <setHour>
		TurnOnLedYellow();
 8000f90:	f7ff fbd4 	bl	800073c <TurnOnLedYellow>
		if (buttonMode == pressed) mode = Mode2;
 8000f94:	4b25      	ldr	r3, [pc, #148]	; (800102c <SetGlobalMode+0x108>)
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d103      	bne.n	8000fa4 <SetGlobalMode+0x80>
 8000f9c:	4b22      	ldr	r3, [pc, #136]	; (8001028 <SetGlobalMode+0x104>)
 8000f9e:	2203      	movs	r2, #3
 8000fa0:	701a      	strb	r2, [r3, #0]
		else mode = Mode1;
		break;
 8000fa2:	e03c      	b.n	800101e <SetGlobalMode+0xfa>
		else mode = Mode1;
 8000fa4:	4b20      	ldr	r3, [pc, #128]	; (8001028 <SetGlobalMode+0x104>)
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	701a      	strb	r2, [r3, #0]
		break;
 8000faa:	e038      	b.n	800101e <SetGlobalMode+0xfa>
	case Mode2:
		setMinute();
 8000fac:	f7ff fd18 	bl	80009e0 <setMinute>
		TurnOffLedYellow();
 8000fb0:	f7ff fbe6 	bl	8000780 <TurnOffLedYellow>
		TurnOnLedBlue();
 8000fb4:	f7ff fb64 	bl	8000680 <TurnOnLedBlue>
		if (buttonMode == pressed) mode = Mode3;
 8000fb8:	4b1c      	ldr	r3, [pc, #112]	; (800102c <SetGlobalMode+0x108>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	2b01      	cmp	r3, #1
 8000fbe:	d103      	bne.n	8000fc8 <SetGlobalMode+0xa4>
 8000fc0:	4b19      	ldr	r3, [pc, #100]	; (8001028 <SetGlobalMode+0x104>)
 8000fc2:	2204      	movs	r2, #4
 8000fc4:	701a      	strb	r2, [r3, #0]
		else mode = Mode2;
		break;
 8000fc6:	e02a      	b.n	800101e <SetGlobalMode+0xfa>
		else mode = Mode2;
 8000fc8:	4b17      	ldr	r3, [pc, #92]	; (8001028 <SetGlobalMode+0x104>)
 8000fca:	2203      	movs	r2, #3
 8000fcc:	701a      	strb	r2, [r3, #0]
		break;
 8000fce:	e026      	b.n	800101e <SetGlobalMode+0xfa>
	case Mode3:
		setSecond();
 8000fd0:	f7ff fd36 	bl	8000a40 <setSecond>
		TurnOffLedBlue();
 8000fd4:	f7ff fb76 	bl	80006c4 <TurnOffLedBlue>
		TurnOnLedRed();
 8000fd8:	f7ff fb80 	bl	80006dc <TurnOnLedRed>
		if (buttonMode == pressed) mode = Mode4;
 8000fdc:	4b13      	ldr	r3, [pc, #76]	; (800102c <SetGlobalMode+0x108>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d103      	bne.n	8000fec <SetGlobalMode+0xc8>
 8000fe4:	4b10      	ldr	r3, [pc, #64]	; (8001028 <SetGlobalMode+0x104>)
 8000fe6:	2205      	movs	r2, #5
 8000fe8:	701a      	strb	r2, [r3, #0]
		else mode = Mode3;
		break;
 8000fea:	e018      	b.n	800101e <SetGlobalMode+0xfa>
		else mode = Mode3;
 8000fec:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <SetGlobalMode+0x104>)
 8000fee:	2204      	movs	r2, #4
 8000ff0:	701a      	strb	r2, [r3, #0]
		break;
 8000ff2:	e014      	b.n	800101e <SetGlobalMode+0xfa>
	case Mode4:
		stopWatch();
 8000ff4:	f7ff fe34 	bl	8000c60 <stopWatch>
		TurnOffLedRed();
 8000ff8:	f7ff fb94 	bl	8000724 <TurnOffLedRed>
		if (buttonMode == pressed) {
 8000ffc:	4b0b      	ldr	r3, [pc, #44]	; (800102c <SetGlobalMode+0x108>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d108      	bne.n	8001016 <SetGlobalMode+0xf2>
			stopWatchPause = 0;
 8001004:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <SetGlobalMode+0x10c>)
 8001006:	2200      	movs	r2, #0
 8001008:	701a      	strb	r2, [r3, #0]
			updateTime();
 800100a:	f7ff fbc5 	bl	8000798 <updateTime>
			mode = Mode0;
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <SetGlobalMode+0x104>)
 8001010:	2201      	movs	r2, #1
 8001012:	701a      	strb	r2, [r3, #0]
		}
		else mode = Mode4;
		break;
 8001014:	e002      	b.n	800101c <SetGlobalMode+0xf8>
		else mode = Mode4;
 8001016:	4b04      	ldr	r3, [pc, #16]	; (8001028 <SetGlobalMode+0x104>)
 8001018:	2205      	movs	r2, #5
 800101a:	701a      	strb	r2, [r3, #0]
		break;
 800101c:	bf00      	nop
	}
	//uart_buf_len = sprintf(uart_buf, "%d\r\n", mode);
	//HAL_UART_Transmit(&huart3, (uint8_t *) uart_buf, uart_buf_len, 100);

}
 800101e:	bf00      	nop
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	2400015c 	.word	0x2400015c
 8001028:	2400015a 	.word	0x2400015a
 800102c:	24000158 	.word	0x24000158
 8001030:	240001a0 	.word	0x240001a0

08001034 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001038:	f000 fd98 	bl	8001b6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800103c:	f000 f836 	bl	80010ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001040:	f000 f9e2 	bl	8001408 <MX_GPIO_Init>
  MX_ETH_Init();
 8001044:	f000 f8ea 	bl	800121c <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001048:	f000 f960 	bl	800130c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800104c:	f000 f9aa 	bl	80013a4 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM16_Init();
 8001050:	f000 f936 	bl	80012c0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	2180      	movs	r1, #128	; 0x80
 8001058:	4812      	ldr	r0, [pc, #72]	; (80010a4 <main+0x70>)
 800105a:	f001 fd49 	bl	8002af0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800105e:	2201      	movs	r2, #1
 8001060:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001064:	480f      	ldr	r0, [pc, #60]	; (80010a4 <main+0x70>)
 8001066:	f001 fd43 	bl	8002af0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 800106a:	2201      	movs	r2, #1
 800106c:	2101      	movs	r1, #1
 800106e:	480d      	ldr	r0, [pc, #52]	; (80010a4 <main+0x70>)
 8001070:	f001 fd3e 	bl	8002af0 <HAL_GPIO_WritePin>
  HAL_Delay(2000);
 8001074:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001078:	f000 fe0a 	bl	8001c90 <HAL_Delay>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800107c:	2200      	movs	r2, #0
 800107e:	2180      	movs	r1, #128	; 0x80
 8001080:	4808      	ldr	r0, [pc, #32]	; (80010a4 <main+0x70>)
 8001082:	f001 fd35 	bl	8002af0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001086:	2200      	movs	r2, #0
 8001088:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800108c:	4805      	ldr	r0, [pc, #20]	; (80010a4 <main+0x70>)
 800108e:	f001 fd2f 	bl	8002af0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001092:	2200      	movs	r2, #0
 8001094:	2101      	movs	r1, #1
 8001096:	4803      	ldr	r0, [pc, #12]	; (80010a4 <main+0x70>)
 8001098:	f001 fd2a 	bl	8002af0 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start_IT(&htim16);
 800109c:	4802      	ldr	r0, [pc, #8]	; (80010a8 <main+0x74>)
 800109e:	f004 f9bf 	bl	8005420 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80010a2:	e7fe      	b.n	80010a2 <main+0x6e>
 80010a4:	58020400 	.word	0x58020400
 80010a8:	24000754 	.word	0x24000754

080010ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b0cc      	sub	sp, #304	; 0x130
 80010b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80010b6:	224c      	movs	r2, #76	; 0x4c
 80010b8:	2100      	movs	r1, #0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f005 ffd8 	bl	8007070 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80010c4:	2220      	movs	r2, #32
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f005 ffd1 	bl	8007070 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010ce:	f107 0308 	add.w	r3, r7, #8
 80010d2:	4618      	mov	r0, r3
 80010d4:	23bc      	movs	r3, #188	; 0xbc
 80010d6:	461a      	mov	r2, r3
 80010d8:	2100      	movs	r1, #0
 80010da:	f005 ffc9 	bl	8007070 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80010de:	2002      	movs	r0, #2
 80010e0:	f001 fe68 	bl	8002db4 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e4:	1d3b      	adds	r3, r7, #4
 80010e6:	2200      	movs	r2, #0
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	4b49      	ldr	r3, [pc, #292]	; (8001210 <SystemClock_Config+0x164>)
 80010ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ee:	4a48      	ldr	r2, [pc, #288]	; (8001210 <SystemClock_Config+0x164>)
 80010f0:	f023 0301 	bic.w	r3, r3, #1
 80010f4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80010f6:	4b46      	ldr	r3, [pc, #280]	; (8001210 <SystemClock_Config+0x164>)
 80010f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010fa:	f003 0201 	and.w	r2, r3, #1
 80010fe:	1d3b      	adds	r3, r7, #4
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	4b44      	ldr	r3, [pc, #272]	; (8001214 <SystemClock_Config+0x168>)
 8001104:	699b      	ldr	r3, [r3, #24]
 8001106:	4a43      	ldr	r2, [pc, #268]	; (8001214 <SystemClock_Config+0x168>)
 8001108:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800110c:	6193      	str	r3, [r2, #24]
 800110e:	4b41      	ldr	r3, [pc, #260]	; (8001214 <SystemClock_Config+0x168>)
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800111e:	bf00      	nop
 8001120:	4b3c      	ldr	r3, [pc, #240]	; (8001214 <SystemClock_Config+0x168>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001128:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800112c:	d1f8      	bne.n	8001120 <SystemClock_Config+0x74>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800112e:	2301      	movs	r3, #1
 8001130:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001134:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001138:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800113c:	2302      	movs	r3, #2
 800113e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001142:	2302      	movs	r3, #2
 8001144:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001148:	2301      	movs	r3, #1
 800114a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 24;
 800114e:	2318      	movs	r3, #24
 8001150:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001154:	2302      	movs	r3, #2
 8001156:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800115a:	2304      	movs	r3, #4
 800115c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001160:	2302      	movs	r3, #2
 8001162:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001166:	230c      	movs	r3, #12
 8001168:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800116c:	2300      	movs	r3, #0
 800116e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001178:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800117c:	4618      	mov	r0, r3
 800117e:	f001 fe63 	bl	8002e48 <HAL_RCC_OscConfig>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <SystemClock_Config+0xe0>
  {
    Error_Handler();
 8001188:	f000 fa12 	bl	80015b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800118c:	233f      	movs	r3, #63	; 0x3f
 800118e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001192:	2303      	movs	r3, #3
 8001194:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001198:	2300      	movs	r3, #0
 800119a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800119e:	2300      	movs	r3, #0
 80011a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80011a4:	2300      	movs	r3, #0
 80011a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80011aa:	2300      	movs	r3, #0
 80011ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80011b0:	2300      	movs	r3, #0
 80011b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80011b6:	2300      	movs	r3, #0
 80011b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011bc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80011c0:	2101      	movs	r1, #1
 80011c2:	4618      	mov	r0, r3
 80011c4:	f002 fa50 	bl	8003668 <HAL_RCC_ClockConfig>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <SystemClock_Config+0x126>
  {
    Error_Handler();
 80011ce:	f000 f9ef 	bl	80015b0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_USB;
 80011d2:	f107 0308 	add.w	r3, r7, #8
 80011d6:	4a10      	ldr	r2, [pc, #64]	; (8001218 <SystemClock_Config+0x16c>)
 80011d8:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80011da:	f107 0308 	add.w	r3, r7, #8
 80011de:	2200      	movs	r2, #0
 80011e0:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80011e2:	f107 0308 	add.w	r3, r7, #8
 80011e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80011ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011ee:	f107 0308 	add.w	r3, r7, #8
 80011f2:	4618      	mov	r0, r3
 80011f4:	f002 fdbc 	bl	8003d70 <HAL_RCCEx_PeriphCLKConfig>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <SystemClock_Config+0x156>
  {
    Error_Handler();
 80011fe:	f000 f9d7 	bl	80015b0 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8001202:	f001 fe11 	bl	8002e28 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8001206:	bf00      	nop
 8001208:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	58000400 	.word	0x58000400
 8001214:	58024800 	.word	0x58024800
 8001218:	00040002 	.word	0x00040002

0800121c <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001220:	4b22      	ldr	r3, [pc, #136]	; (80012ac <MX_ETH_Init+0x90>)
 8001222:	4a23      	ldr	r2, [pc, #140]	; (80012b0 <MX_ETH_Init+0x94>)
 8001224:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 8001226:	4b21      	ldr	r3, [pc, #132]	; (80012ac <MX_ETH_Init+0x90>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	2200      	movs	r2, #0
 800122c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 800122e:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <MX_ETH_Init+0x90>)
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	3301      	adds	r3, #1
 8001234:	2280      	movs	r2, #128	; 0x80
 8001236:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8001238:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <MX_ETH_Init+0x90>)
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	3302      	adds	r3, #2
 800123e:	22e1      	movs	r2, #225	; 0xe1
 8001240:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8001242:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <MX_ETH_Init+0x90>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	3303      	adds	r3, #3
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 800124c:	4b17      	ldr	r3, [pc, #92]	; (80012ac <MX_ETH_Init+0x90>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	3304      	adds	r3, #4
 8001252:	2200      	movs	r2, #0
 8001254:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8001256:	4b15      	ldr	r3, [pc, #84]	; (80012ac <MX_ETH_Init+0x90>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	3305      	adds	r3, #5
 800125c:	2200      	movs	r2, #0
 800125e:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <MX_ETH_Init+0x90>)
 8001262:	2201      	movs	r2, #1
 8001264:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <MX_ETH_Init+0x90>)
 8001268:	4a12      	ldr	r2, [pc, #72]	; (80012b4 <MX_ETH_Init+0x98>)
 800126a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <MX_ETH_Init+0x90>)
 800126e:	4a12      	ldr	r2, [pc, #72]	; (80012b8 <MX_ETH_Init+0x9c>)
 8001270:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <MX_ETH_Init+0x90>)
 8001274:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001278:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800127a:	480c      	ldr	r0, [pc, #48]	; (80012ac <MX_ETH_Init+0x90>)
 800127c:	f000 fe5a 	bl	8001f34 <HAL_ETH_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8001286:	f000 f993 	bl	80015b0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800128a:	2234      	movs	r2, #52	; 0x34
 800128c:	2100      	movs	r1, #0
 800128e:	480b      	ldr	r0, [pc, #44]	; (80012bc <MX_ETH_Init+0xa0>)
 8001290:	f005 feee 	bl	8007070 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001294:	4b09      	ldr	r3, [pc, #36]	; (80012bc <MX_ETH_Init+0xa0>)
 8001296:	2221      	movs	r2, #33	; 0x21
 8001298:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800129a:	4b08      	ldr	r3, [pc, #32]	; (80012bc <MX_ETH_Init+0xa0>)
 800129c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80012a0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80012a2:	4b06      	ldr	r3, [pc, #24]	; (80012bc <MX_ETH_Init+0xa0>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	240006b0 	.word	0x240006b0
 80012b0:	40028000 	.word	0x40028000
 80012b4:	240000dc 	.word	0x240000dc
 80012b8:	2400007c 	.word	0x2400007c
 80012bc:	24000720 	.word	0x24000720

080012c0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80012c4:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <MX_TIM16_Init+0x44>)
 80012c6:	4a10      	ldr	r2, [pc, #64]	; (8001308 <MX_TIM16_Init+0x48>)
 80012c8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 9600-1;
 80012ca:	4b0e      	ldr	r3, [pc, #56]	; (8001304 <MX_TIM16_Init+0x44>)
 80012cc:	f242 527f 	movw	r2, #9599	; 0x257f
 80012d0:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d2:	4b0c      	ldr	r3, [pc, #48]	; (8001304 <MX_TIM16_Init+0x44>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 100-1;
 80012d8:	4b0a      	ldr	r3, [pc, #40]	; (8001304 <MX_TIM16_Init+0x44>)
 80012da:	2263      	movs	r2, #99	; 0x63
 80012dc:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <MX_TIM16_Init+0x44>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80012e4:	4b07      	ldr	r3, [pc, #28]	; (8001304 <MX_TIM16_Init+0x44>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ea:	4b06      	ldr	r3, [pc, #24]	; (8001304 <MX_TIM16_Init+0x44>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80012f0:	4804      	ldr	r0, [pc, #16]	; (8001304 <MX_TIM16_Init+0x44>)
 80012f2:	f004 f83d 	bl	8005370 <HAL_TIM_Base_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80012fc:	f000 f958 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001300:	bf00      	nop
 8001302:	bd80      	pop	{r7, pc}
 8001304:	24000754 	.word	0x24000754
 8001308:	40014400 	.word	0x40014400

0800130c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001310:	4b22      	ldr	r3, [pc, #136]	; (800139c <MX_USART3_UART_Init+0x90>)
 8001312:	4a23      	ldr	r2, [pc, #140]	; (80013a0 <MX_USART3_UART_Init+0x94>)
 8001314:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001316:	4b21      	ldr	r3, [pc, #132]	; (800139c <MX_USART3_UART_Init+0x90>)
 8001318:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800131c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800131e:	4b1f      	ldr	r3, [pc, #124]	; (800139c <MX_USART3_UART_Init+0x90>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001324:	4b1d      	ldr	r3, [pc, #116]	; (800139c <MX_USART3_UART_Init+0x90>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800132a:	4b1c      	ldr	r3, [pc, #112]	; (800139c <MX_USART3_UART_Init+0x90>)
 800132c:	2200      	movs	r2, #0
 800132e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001330:	4b1a      	ldr	r3, [pc, #104]	; (800139c <MX_USART3_UART_Init+0x90>)
 8001332:	220c      	movs	r2, #12
 8001334:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001336:	4b19      	ldr	r3, [pc, #100]	; (800139c <MX_USART3_UART_Init+0x90>)
 8001338:	2200      	movs	r2, #0
 800133a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800133c:	4b17      	ldr	r3, [pc, #92]	; (800139c <MX_USART3_UART_Init+0x90>)
 800133e:	2200      	movs	r2, #0
 8001340:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001342:	4b16      	ldr	r3, [pc, #88]	; (800139c <MX_USART3_UART_Init+0x90>)
 8001344:	2200      	movs	r2, #0
 8001346:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001348:	4b14      	ldr	r3, [pc, #80]	; (800139c <MX_USART3_UART_Init+0x90>)
 800134a:	2200      	movs	r2, #0
 800134c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800134e:	4b13      	ldr	r3, [pc, #76]	; (800139c <MX_USART3_UART_Init+0x90>)
 8001350:	2200      	movs	r2, #0
 8001352:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001354:	4811      	ldr	r0, [pc, #68]	; (800139c <MX_USART3_UART_Init+0x90>)
 8001356:	f004 fa99 	bl	800588c <HAL_UART_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001360:	f000 f926 	bl	80015b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001364:	2100      	movs	r1, #0
 8001366:	480d      	ldr	r0, [pc, #52]	; (800139c <MX_USART3_UART_Init+0x90>)
 8001368:	f005 fac9 	bl	80068fe <HAL_UARTEx_SetTxFifoThreshold>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001372:	f000 f91d 	bl	80015b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001376:	2100      	movs	r1, #0
 8001378:	4808      	ldr	r0, [pc, #32]	; (800139c <MX_USART3_UART_Init+0x90>)
 800137a:	f005 fafe 	bl	800697a <HAL_UARTEx_SetRxFifoThreshold>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001384:	f000 f914 	bl	80015b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001388:	4804      	ldr	r0, [pc, #16]	; (800139c <MX_USART3_UART_Init+0x90>)
 800138a:	f005 fa7f 	bl	800688c <HAL_UARTEx_DisableFifoMode>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001394:	f000 f90c 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}
 800139c:	240001b0 	.word	0x240001b0
 80013a0:	40004800 	.word	0x40004800

080013a4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80013a8:	4b15      	ldr	r3, [pc, #84]	; (8001400 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013aa:	4a16      	ldr	r2, [pc, #88]	; (8001404 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80013ac:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80013ae:	4b14      	ldr	r3, [pc, #80]	; (8001400 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013b0:	2209      	movs	r2, #9
 80013b2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013b6:	2202      	movs	r2, #2
 80013b8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80013c0:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013c2:	2202      	movs	r2, #2
 80013c4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80013c6:	4b0e      	ldr	r3, [pc, #56]	; (8001400 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80013cc:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80013d2:	4b0b      	ldr	r3, [pc, #44]	; (8001400 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 80013d8:	4b09      	ldr	r3, [pc, #36]	; (8001400 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013da:	2201      	movs	r2, #1
 80013dc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80013de:	4b08      	ldr	r3, [pc, #32]	; (8001400 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013e0:	2201      	movs	r2, #1
 80013e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80013ea:	4805      	ldr	r0, [pc, #20]	; (8001400 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80013ec:	f001 fb99 	bl	8002b22 <HAL_PCD_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80013f6:	f000 f8db 	bl	80015b0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80013fa:	bf00      	nop
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	24000240 	.word	0x24000240
 8001404:	40080000 	.word	0x40080000

08001408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08c      	sub	sp, #48	; 0x30
 800140c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140e:	f107 031c 	add.w	r3, r7, #28
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
 800141c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800141e:	4b55      	ldr	r3, [pc, #340]	; (8001574 <MX_GPIO_Init+0x16c>)
 8001420:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001424:	4a53      	ldr	r2, [pc, #332]	; (8001574 <MX_GPIO_Init+0x16c>)
 8001426:	f043 0304 	orr.w	r3, r3, #4
 800142a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800142e:	4b51      	ldr	r3, [pc, #324]	; (8001574 <MX_GPIO_Init+0x16c>)
 8001430:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001434:	f003 0304 	and.w	r3, r3, #4
 8001438:	61bb      	str	r3, [r7, #24]
 800143a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800143c:	4b4d      	ldr	r3, [pc, #308]	; (8001574 <MX_GPIO_Init+0x16c>)
 800143e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001442:	4a4c      	ldr	r2, [pc, #304]	; (8001574 <MX_GPIO_Init+0x16c>)
 8001444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001448:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800144c:	4b49      	ldr	r3, [pc, #292]	; (8001574 <MX_GPIO_Init+0x16c>)
 800144e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001456:	617b      	str	r3, [r7, #20]
 8001458:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800145a:	4b46      	ldr	r3, [pc, #280]	; (8001574 <MX_GPIO_Init+0x16c>)
 800145c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001460:	4a44      	ldr	r2, [pc, #272]	; (8001574 <MX_GPIO_Init+0x16c>)
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800146a:	4b42      	ldr	r3, [pc, #264]	; (8001574 <MX_GPIO_Init+0x16c>)
 800146c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001478:	4b3e      	ldr	r3, [pc, #248]	; (8001574 <MX_GPIO_Init+0x16c>)
 800147a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147e:	4a3d      	ldr	r2, [pc, #244]	; (8001574 <MX_GPIO_Init+0x16c>)
 8001480:	f043 0302 	orr.w	r3, r3, #2
 8001484:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001488:	4b3a      	ldr	r3, [pc, #232]	; (8001574 <MX_GPIO_Init+0x16c>)
 800148a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001496:	4b37      	ldr	r3, [pc, #220]	; (8001574 <MX_GPIO_Init+0x16c>)
 8001498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149c:	4a35      	ldr	r2, [pc, #212]	; (8001574 <MX_GPIO_Init+0x16c>)
 800149e:	f043 0308 	orr.w	r3, r3, #8
 80014a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014a6:	4b33      	ldr	r3, [pc, #204]	; (8001574 <MX_GPIO_Init+0x16c>)
 80014a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ac:	f003 0308 	and.w	r3, r3, #8
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014b4:	4b2f      	ldr	r3, [pc, #188]	; (8001574 <MX_GPIO_Init+0x16c>)
 80014b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ba:	4a2e      	ldr	r2, [pc, #184]	; (8001574 <MX_GPIO_Init+0x16c>)
 80014bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014c4:	4b2b      	ldr	r3, [pc, #172]	; (8001574 <MX_GPIO_Init+0x16c>)
 80014c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80014d2:	2200      	movs	r2, #0
 80014d4:	f244 0181 	movw	r1, #16513	; 0x4081
 80014d8:	4827      	ldr	r0, [pc, #156]	; (8001578 <MX_GPIO_Init+0x170>)
 80014da:	f001 fb09 	bl	8002af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80014de:	2200      	movs	r2, #0
 80014e0:	2140      	movs	r1, #64	; 0x40
 80014e2:	4826      	ldr	r0, [pc, #152]	; (800157c <MX_GPIO_Init+0x174>)
 80014e4:	f001 fb04 	bl	8002af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80014e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014ee:	4b24      	ldr	r3, [pc, #144]	; (8001580 <MX_GPIO_Init+0x178>)
 80014f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80014f6:	f107 031c 	add.w	r3, r7, #28
 80014fa:	4619      	mov	r1, r3
 80014fc:	4821      	ldr	r0, [pc, #132]	; (8001584 <MX_GPIO_Init+0x17c>)
 80014fe:	f001 f92f 	bl	8002760 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001502:	2320      	movs	r3, #32
 8001504:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001506:	2300      	movs	r3, #0
 8001508:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150e:	f107 031c 	add.w	r3, r7, #28
 8001512:	4619      	mov	r1, r3
 8001514:	481c      	ldr	r0, [pc, #112]	; (8001588 <MX_GPIO_Init+0x180>)
 8001516:	f001 f923 	bl	8002760 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|LD2_Pin;
 800151a:	f244 0381 	movw	r3, #16513	; 0x4081
 800151e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001520:	2301      	movs	r3, #1
 8001522:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001528:	2300      	movs	r3, #0
 800152a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152c:	f107 031c 	add.w	r3, r7, #28
 8001530:	4619      	mov	r1, r3
 8001532:	4811      	ldr	r0, [pc, #68]	; (8001578 <MX_GPIO_Init+0x170>)
 8001534:	f001 f914 	bl	8002760 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001538:	2340      	movs	r3, #64	; 0x40
 800153a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153c:	2301      	movs	r3, #1
 800153e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001544:	2300      	movs	r3, #0
 8001546:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001548:	f107 031c 	add.w	r3, r7, #28
 800154c:	4619      	mov	r1, r3
 800154e:	480b      	ldr	r0, [pc, #44]	; (800157c <MX_GPIO_Init+0x174>)
 8001550:	f001 f906 	bl	8002760 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001554:	2380      	movs	r3, #128	; 0x80
 8001556:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001558:	2300      	movs	r3, #0
 800155a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001560:	f107 031c 	add.w	r3, r7, #28
 8001564:	4619      	mov	r1, r3
 8001566:	4805      	ldr	r0, [pc, #20]	; (800157c <MX_GPIO_Init+0x174>)
 8001568:	f001 f8fa 	bl	8002760 <HAL_GPIO_Init>

}
 800156c:	bf00      	nop
 800156e:	3730      	adds	r7, #48	; 0x30
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	58024400 	.word	0x58024400
 8001578:	58020400 	.word	0x58020400
 800157c:	58021800 	.word	0x58021800
 8001580:	11110000 	.word	0x11110000
 8001584:	58020800 	.word	0x58020800
 8001588:	58020000 	.word	0x58020000

0800158c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
	if (htim == &htim16)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	4a05      	ldr	r2, [pc, #20]	; (80015ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001598:	4293      	cmp	r3, r2
 800159a:	d103      	bne.n	80015a4 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		displayClock();
 800159c:	f7ff fa80 	bl	8000aa0 <displayClock>
		SetGlobalMode();
 80015a0:	f7ff fcc0 	bl	8000f24 <SetGlobalMode>
	}
}
 80015a4:	bf00      	nop
 80015a6:	3708      	adds	r7, #8
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	24000754 	.word	0x24000754

080015b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80015b4:	bf00      	nop
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
	...

080015c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c6:	4b0a      	ldr	r3, [pc, #40]	; (80015f0 <HAL_MspInit+0x30>)
 80015c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015cc:	4a08      	ldr	r2, [pc, #32]	; (80015f0 <HAL_MspInit+0x30>)
 80015ce:	f043 0302 	orr.w	r3, r3, #2
 80015d2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80015d6:	4b06      	ldr	r3, [pc, #24]	; (80015f0 <HAL_MspInit+0x30>)
 80015d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015e4:	bf00      	nop
 80015e6:	370c      	adds	r7, #12
 80015e8:	46bd      	mov	sp, r7
 80015ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ee:	4770      	bx	lr
 80015f0:	58024400 	.word	0x58024400

080015f4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08e      	sub	sp, #56	; 0x38
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a59      	ldr	r2, [pc, #356]	; (8001778 <HAL_ETH_MspInit+0x184>)
 8001612:	4293      	cmp	r3, r2
 8001614:	f040 80ab 	bne.w	800176e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001618:	4b58      	ldr	r3, [pc, #352]	; (800177c <HAL_ETH_MspInit+0x188>)
 800161a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800161e:	4a57      	ldr	r2, [pc, #348]	; (800177c <HAL_ETH_MspInit+0x188>)
 8001620:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001624:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001628:	4b54      	ldr	r3, [pc, #336]	; (800177c <HAL_ETH_MspInit+0x188>)
 800162a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800162e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001632:	623b      	str	r3, [r7, #32]
 8001634:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001636:	4b51      	ldr	r3, [pc, #324]	; (800177c <HAL_ETH_MspInit+0x188>)
 8001638:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800163c:	4a4f      	ldr	r2, [pc, #316]	; (800177c <HAL_ETH_MspInit+0x188>)
 800163e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001642:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001646:	4b4d      	ldr	r3, [pc, #308]	; (800177c <HAL_ETH_MspInit+0x188>)
 8001648:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800164c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001650:	61fb      	str	r3, [r7, #28]
 8001652:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001654:	4b49      	ldr	r3, [pc, #292]	; (800177c <HAL_ETH_MspInit+0x188>)
 8001656:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800165a:	4a48      	ldr	r2, [pc, #288]	; (800177c <HAL_ETH_MspInit+0x188>)
 800165c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001660:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001664:	4b45      	ldr	r3, [pc, #276]	; (800177c <HAL_ETH_MspInit+0x188>)
 8001666:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800166a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800166e:	61bb      	str	r3, [r7, #24]
 8001670:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001672:	4b42      	ldr	r3, [pc, #264]	; (800177c <HAL_ETH_MspInit+0x188>)
 8001674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001678:	4a40      	ldr	r2, [pc, #256]	; (800177c <HAL_ETH_MspInit+0x188>)
 800167a:	f043 0304 	orr.w	r3, r3, #4
 800167e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001682:	4b3e      	ldr	r3, [pc, #248]	; (800177c <HAL_ETH_MspInit+0x188>)
 8001684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	617b      	str	r3, [r7, #20]
 800168e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001690:	4b3a      	ldr	r3, [pc, #232]	; (800177c <HAL_ETH_MspInit+0x188>)
 8001692:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001696:	4a39      	ldr	r2, [pc, #228]	; (800177c <HAL_ETH_MspInit+0x188>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016a0:	4b36      	ldr	r3, [pc, #216]	; (800177c <HAL_ETH_MspInit+0x188>)
 80016a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	613b      	str	r3, [r7, #16]
 80016ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ae:	4b33      	ldr	r3, [pc, #204]	; (800177c <HAL_ETH_MspInit+0x188>)
 80016b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b4:	4a31      	ldr	r2, [pc, #196]	; (800177c <HAL_ETH_MspInit+0x188>)
 80016b6:	f043 0302 	orr.w	r3, r3, #2
 80016ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016be:	4b2f      	ldr	r3, [pc, #188]	; (800177c <HAL_ETH_MspInit+0x188>)
 80016c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80016cc:	4b2b      	ldr	r3, [pc, #172]	; (800177c <HAL_ETH_MspInit+0x188>)
 80016ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016d2:	4a2a      	ldr	r2, [pc, #168]	; (800177c <HAL_ETH_MspInit+0x188>)
 80016d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80016dc:	4b27      	ldr	r3, [pc, #156]	; (800177c <HAL_ETH_MspInit+0x188>)
 80016de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016e6:	60bb      	str	r3, [r7, #8]
 80016e8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80016ea:	2332      	movs	r3, #50	; 0x32
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ee:	2302      	movs	r3, #2
 80016f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	2300      	movs	r3, #0
 80016f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f6:	2300      	movs	r3, #0
 80016f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016fa:	230b      	movs	r3, #11
 80016fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001702:	4619      	mov	r1, r3
 8001704:	481e      	ldr	r0, [pc, #120]	; (8001780 <HAL_ETH_MspInit+0x18c>)
 8001706:	f001 f82b 	bl	8002760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800170a:	2386      	movs	r3, #134	; 0x86
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170e:	2302      	movs	r3, #2
 8001710:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001716:	2300      	movs	r3, #0
 8001718:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800171a:	230b      	movs	r3, #11
 800171c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001722:	4619      	mov	r1, r3
 8001724:	4817      	ldr	r0, [pc, #92]	; (8001784 <HAL_ETH_MspInit+0x190>)
 8001726:	f001 f81b 	bl	8002760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800172a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800172e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001738:	2300      	movs	r3, #0
 800173a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800173c:	230b      	movs	r3, #11
 800173e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001744:	4619      	mov	r1, r3
 8001746:	4810      	ldr	r0, [pc, #64]	; (8001788 <HAL_ETH_MspInit+0x194>)
 8001748:	f001 f80a 	bl	8002760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800174c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001752:	2302      	movs	r3, #2
 8001754:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001756:	2300      	movs	r3, #0
 8001758:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175a:	2300      	movs	r3, #0
 800175c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800175e:	230b      	movs	r3, #11
 8001760:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001766:	4619      	mov	r1, r3
 8001768:	4808      	ldr	r0, [pc, #32]	; (800178c <HAL_ETH_MspInit+0x198>)
 800176a:	f000 fff9 	bl	8002760 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800176e:	bf00      	nop
 8001770:	3738      	adds	r7, #56	; 0x38
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40028000 	.word	0x40028000
 800177c:	58024400 	.word	0x58024400
 8001780:	58020800 	.word	0x58020800
 8001784:	58020000 	.word	0x58020000
 8001788:	58020400 	.word	0x58020400
 800178c:	58021800 	.word	0x58021800

08001790 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a0e      	ldr	r2, [pc, #56]	; (80017d8 <HAL_TIM_Base_MspInit+0x48>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d116      	bne.n	80017d0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 80017a2:	4b0e      	ldr	r3, [pc, #56]	; (80017dc <HAL_TIM_Base_MspInit+0x4c>)
 80017a4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017a8:	4a0c      	ldr	r2, [pc, #48]	; (80017dc <HAL_TIM_Base_MspInit+0x4c>)
 80017aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ae:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80017b2:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <HAL_TIM_Base_MspInit+0x4c>)
 80017b4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80017b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80017c0:	2200      	movs	r2, #0
 80017c2:	2100      	movs	r1, #0
 80017c4:	2075      	movs	r0, #117	; 0x75
 80017c6:	f000 fb80 	bl	8001eca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80017ca:	2075      	movs	r0, #117	; 0x75
 80017cc:	f000 fb97 	bl	8001efe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 80017d0:	bf00      	nop
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	40014400 	.word	0x40014400
 80017dc:	58024400 	.word	0x58024400

080017e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b08a      	sub	sp, #40	; 0x28
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e8:	f107 0314 	add.w	r3, r7, #20
 80017ec:	2200      	movs	r2, #0
 80017ee:	601a      	str	r2, [r3, #0]
 80017f0:	605a      	str	r2, [r3, #4]
 80017f2:	609a      	str	r2, [r3, #8]
 80017f4:	60da      	str	r2, [r3, #12]
 80017f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a1a      	ldr	r2, [pc, #104]	; (8001868 <HAL_UART_MspInit+0x88>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d12e      	bne.n	8001860 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001802:	4b1a      	ldr	r3, [pc, #104]	; (800186c <HAL_UART_MspInit+0x8c>)
 8001804:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001808:	4a18      	ldr	r2, [pc, #96]	; (800186c <HAL_UART_MspInit+0x8c>)
 800180a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800180e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001812:	4b16      	ldr	r3, [pc, #88]	; (800186c <HAL_UART_MspInit+0x8c>)
 8001814:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001818:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800181c:	613b      	str	r3, [r7, #16]
 800181e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <HAL_UART_MspInit+0x8c>)
 8001822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001826:	4a11      	ldr	r2, [pc, #68]	; (800186c <HAL_UART_MspInit+0x8c>)
 8001828:	f043 0308 	orr.w	r3, r3, #8
 800182c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001830:	4b0e      	ldr	r3, [pc, #56]	; (800186c <HAL_UART_MspInit+0x8c>)
 8001832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800183e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2300      	movs	r3, #0
 800184e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001850:	2307      	movs	r3, #7
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001854:	f107 0314 	add.w	r3, r7, #20
 8001858:	4619      	mov	r1, r3
 800185a:	4805      	ldr	r0, [pc, #20]	; (8001870 <HAL_UART_MspInit+0x90>)
 800185c:	f000 ff80 	bl	8002760 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001860:	bf00      	nop
 8001862:	3728      	adds	r7, #40	; 0x28
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	40004800 	.word	0x40004800
 800186c:	58024400 	.word	0x58024400
 8001870:	58020c00 	.word	0x58020c00

08001874 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08a      	sub	sp, #40	; 0x28
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	2200      	movs	r2, #0
 8001882:	601a      	str	r2, [r3, #0]
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	60da      	str	r2, [r3, #12]
 800188a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a21      	ldr	r2, [pc, #132]	; (8001918 <HAL_PCD_MspInit+0xa4>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d13b      	bne.n	800190e <HAL_PCD_MspInit+0x9a>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001896:	4b21      	ldr	r3, [pc, #132]	; (800191c <HAL_PCD_MspInit+0xa8>)
 8001898:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800189c:	4a1f      	ldr	r2, [pc, #124]	; (800191c <HAL_PCD_MspInit+0xa8>)
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018a6:	4b1d      	ldr	r3, [pc, #116]	; (800191c <HAL_PCD_MspInit+0xa8>)
 80018a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ac:	f003 0301 	and.w	r3, r3, #1
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80018b4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80018b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ba:	2302      	movs	r3, #2
 80018bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018c2:	2300      	movs	r3, #0
 80018c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80018c6:	230a      	movs	r3, #10
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	4619      	mov	r1, r3
 80018d0:	4813      	ldr	r0, [pc, #76]	; (8001920 <HAL_PCD_MspInit+0xac>)
 80018d2:	f000 ff45 	bl	8002760 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80018d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018dc:	2300      	movs	r3, #0
 80018de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80018e4:	f107 0314 	add.w	r3, r7, #20
 80018e8:	4619      	mov	r1, r3
 80018ea:	480d      	ldr	r0, [pc, #52]	; (8001920 <HAL_PCD_MspInit+0xac>)
 80018ec:	f000 ff38 	bl	8002760 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80018f0:	4b0a      	ldr	r3, [pc, #40]	; (800191c <HAL_PCD_MspInit+0xa8>)
 80018f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018f6:	4a09      	ldr	r2, [pc, #36]	; (800191c <HAL_PCD_MspInit+0xa8>)
 80018f8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80018fc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <HAL_PCD_MspInit+0xa8>)
 8001902:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001906:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800190e:	bf00      	nop
 8001910:	3728      	adds	r7, #40	; 0x28
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	40080000 	.word	0x40080000
 800191c:	58024400 	.word	0x58024400
 8001920:	58020000 	.word	0x58020000

08001924 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001928:	bf00      	nop
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001932:	b480      	push	{r7}
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001936:	e7fe      	b.n	8001936 <HardFault_Handler+0x4>

08001938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800193c:	e7fe      	b.n	800193c <MemManage_Handler+0x4>

0800193e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001942:	e7fe      	b.n	8001942 <BusFault_Handler+0x4>

08001944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001948:	e7fe      	b.n	8001948 <UsageFault_Handler+0x4>

0800194a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800194e:	bf00      	nop
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800195c:	bf00      	nop
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800196a:	bf00      	nop
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr

08001974 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001978:	f000 f96a 	bl	8001c50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}

08001980 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001984:	4802      	ldr	r0, [pc, #8]	; (8001990 <TIM16_IRQHandler+0x10>)
 8001986:	f003 fd81 	bl	800548c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	24000754 	.word	0x24000754

08001994 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b086      	sub	sp, #24
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800199c:	4a14      	ldr	r2, [pc, #80]	; (80019f0 <_sbrk+0x5c>)
 800199e:	4b15      	ldr	r3, [pc, #84]	; (80019f4 <_sbrk+0x60>)
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019a8:	4b13      	ldr	r3, [pc, #76]	; (80019f8 <_sbrk+0x64>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d102      	bne.n	80019b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019b0:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <_sbrk+0x64>)
 80019b2:	4a12      	ldr	r2, [pc, #72]	; (80019fc <_sbrk+0x68>)
 80019b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019b6:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <_sbrk+0x64>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d207      	bcs.n	80019d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019c4:	f005 fb2a 	bl	800701c <__errno>
 80019c8:	4602      	mov	r2, r0
 80019ca:	230c      	movs	r3, #12
 80019cc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80019ce:	f04f 33ff 	mov.w	r3, #4294967295
 80019d2:	e009      	b.n	80019e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019d4:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <_sbrk+0x64>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019da:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <_sbrk+0x64>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	4a05      	ldr	r2, [pc, #20]	; (80019f8 <_sbrk+0x64>)
 80019e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019e6:	68fb      	ldr	r3, [r7, #12]
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3718      	adds	r7, #24
 80019ec:	46bd      	mov	sp, r7
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	24080000 	.word	0x24080000
 80019f4:	00000400 	.word	0x00000400
 80019f8:	240001a4 	.word	0x240001a4
 80019fc:	240007a8 	.word	0x240007a8

08001a00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001a04:	4b39      	ldr	r3, [pc, #228]	; (8001aec <SystemInit+0xec>)
 8001a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a0a:	4a38      	ldr	r2, [pc, #224]	; (8001aec <SystemInit+0xec>)
 8001a0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a14:	4b36      	ldr	r3, [pc, #216]	; (8001af0 <SystemInit+0xf0>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 030f 	and.w	r3, r3, #15
 8001a1c:	2b06      	cmp	r3, #6
 8001a1e:	d807      	bhi.n	8001a30 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a20:	4b33      	ldr	r3, [pc, #204]	; (8001af0 <SystemInit+0xf0>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f023 030f 	bic.w	r3, r3, #15
 8001a28:	4a31      	ldr	r2, [pc, #196]	; (8001af0 <SystemInit+0xf0>)
 8001a2a:	f043 0307 	orr.w	r3, r3, #7
 8001a2e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001a30:	4b30      	ldr	r3, [pc, #192]	; (8001af4 <SystemInit+0xf4>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a2f      	ldr	r2, [pc, #188]	; (8001af4 <SystemInit+0xf4>)
 8001a36:	f043 0301 	orr.w	r3, r3, #1
 8001a3a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001a3c:	4b2d      	ldr	r3, [pc, #180]	; (8001af4 <SystemInit+0xf4>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001a42:	4b2c      	ldr	r3, [pc, #176]	; (8001af4 <SystemInit+0xf4>)
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	492b      	ldr	r1, [pc, #172]	; (8001af4 <SystemInit+0xf4>)
 8001a48:	4b2b      	ldr	r3, [pc, #172]	; (8001af8 <SystemInit+0xf8>)
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001a4e:	4b28      	ldr	r3, [pc, #160]	; (8001af0 <SystemInit+0xf0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 030f 	and.w	r3, r3, #15
 8001a56:	2b07      	cmp	r3, #7
 8001a58:	d907      	bls.n	8001a6a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001a5a:	4b25      	ldr	r3, [pc, #148]	; (8001af0 <SystemInit+0xf0>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f023 030f 	bic.w	r3, r3, #15
 8001a62:	4a23      	ldr	r2, [pc, #140]	; (8001af0 <SystemInit+0xf0>)
 8001a64:	f043 0307 	orr.w	r3, r3, #7
 8001a68:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001a6a:	4b22      	ldr	r3, [pc, #136]	; (8001af4 <SystemInit+0xf4>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001a70:	4b20      	ldr	r3, [pc, #128]	; (8001af4 <SystemInit+0xf4>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001a76:	4b1f      	ldr	r3, [pc, #124]	; (8001af4 <SystemInit+0xf4>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001a7c:	4b1d      	ldr	r3, [pc, #116]	; (8001af4 <SystemInit+0xf4>)
 8001a7e:	4a1f      	ldr	r2, [pc, #124]	; (8001afc <SystemInit+0xfc>)
 8001a80:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001a82:	4b1c      	ldr	r3, [pc, #112]	; (8001af4 <SystemInit+0xf4>)
 8001a84:	4a1e      	ldr	r2, [pc, #120]	; (8001b00 <SystemInit+0x100>)
 8001a86:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001a88:	4b1a      	ldr	r3, [pc, #104]	; (8001af4 <SystemInit+0xf4>)
 8001a8a:	4a1e      	ldr	r2, [pc, #120]	; (8001b04 <SystemInit+0x104>)
 8001a8c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001a8e:	4b19      	ldr	r3, [pc, #100]	; (8001af4 <SystemInit+0xf4>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001a94:	4b17      	ldr	r3, [pc, #92]	; (8001af4 <SystemInit+0xf4>)
 8001a96:	4a1b      	ldr	r2, [pc, #108]	; (8001b04 <SystemInit+0x104>)
 8001a98:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001a9a:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <SystemInit+0xf4>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001aa0:	4b14      	ldr	r3, [pc, #80]	; (8001af4 <SystemInit+0xf4>)
 8001aa2:	4a18      	ldr	r2, [pc, #96]	; (8001b04 <SystemInit+0x104>)
 8001aa4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001aa6:	4b13      	ldr	r3, [pc, #76]	; (8001af4 <SystemInit+0xf4>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001aac:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <SystemInit+0xf4>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a10      	ldr	r2, [pc, #64]	; (8001af4 <SystemInit+0xf4>)
 8001ab2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001ab8:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <SystemInit+0xf4>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001abe:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <SystemInit+0x108>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <SystemInit+0x10c>)
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001aca:	d202      	bcs.n	8001ad2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001acc:	4b10      	ldr	r3, [pc, #64]	; (8001b10 <SystemInit+0x110>)
 8001ace:	2201      	movs	r2, #1
 8001ad0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001ad2:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <SystemInit+0x114>)
 8001ad4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001ad8:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ada:	4b04      	ldr	r3, [pc, #16]	; (8001aec <SystemInit+0xec>)
 8001adc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ae0:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001ae2:	bf00      	nop
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr
 8001aec:	e000ed00 	.word	0xe000ed00
 8001af0:	52002000 	.word	0x52002000
 8001af4:	58024400 	.word	0x58024400
 8001af8:	eaf6ed7f 	.word	0xeaf6ed7f
 8001afc:	02020200 	.word	0x02020200
 8001b00:	01ff0000 	.word	0x01ff0000
 8001b04:	01010280 	.word	0x01010280
 8001b08:	5c001000 	.word	0x5c001000
 8001b0c:	ffff0000 	.word	0xffff0000
 8001b10:	51008108 	.word	0x51008108
 8001b14:	52004000 	.word	0x52004000

08001b18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b50 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001b1c:	f7ff ff70 	bl	8001a00 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001b20:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001b22:	e003      	b.n	8001b2c <LoopCopyDataInit>

08001b24 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001b24:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8001b26:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001b28:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001b2a:	3104      	adds	r1, #4

08001b2c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001b2c:	480a      	ldr	r0, [pc, #40]	; (8001b58 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001b2e:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001b30:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001b32:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001b34:	d3f6      	bcc.n	8001b24 <CopyDataInit>
  ldr  r2, =_sbss
 8001b36:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001b38:	e002      	b.n	8001b40 <LoopFillZerobss>

08001b3a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001b3a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001b3c:	f842 3b04 	str.w	r3, [r2], #4

08001b40 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001b40:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8001b42:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001b44:	d3f9      	bcc.n	8001b3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b46:	f005 fa6f 	bl	8007028 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b4a:	f7ff fa73 	bl	8001034 <main>
  bx  lr    
 8001b4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b50:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8001b54:	08007948 	.word	0x08007948
  ldr  r0, =_sdata
 8001b58:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8001b5c:	2400007c 	.word	0x2400007c
  ldr  r2, =_sbss
 8001b60:	2400013c 	.word	0x2400013c
  ldr  r3, = _ebss
 8001b64:	240007a8 	.word	0x240007a8

08001b68 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b68:	e7fe      	b.n	8001b68 <ADC3_IRQHandler>
	...

08001b6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b72:	2003      	movs	r0, #3
 8001b74:	f000 f99e 	bl	8001eb4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001b78:	f001 ff2c 	bl	80039d4 <HAL_RCC_GetSysClockFreq>
 8001b7c:	4601      	mov	r1, r0
 8001b7e:	4b15      	ldr	r3, [pc, #84]	; (8001bd4 <HAL_Init+0x68>)
 8001b80:	699b      	ldr	r3, [r3, #24]
 8001b82:	0a1b      	lsrs	r3, r3, #8
 8001b84:	f003 030f 	and.w	r3, r3, #15
 8001b88:	4a13      	ldr	r2, [pc, #76]	; (8001bd8 <HAL_Init+0x6c>)
 8001b8a:	5cd3      	ldrb	r3, [r2, r3]
 8001b8c:	f003 031f 	and.w	r3, r3, #31
 8001b90:	fa21 f303 	lsr.w	r3, r1, r3
 8001b94:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b96:	4b0f      	ldr	r3, [pc, #60]	; (8001bd4 <HAL_Init+0x68>)
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	4a0e      	ldr	r2, [pc, #56]	; (8001bd8 <HAL_Init+0x6c>)
 8001ba0:	5cd3      	ldrb	r3, [r2, r3]
 8001ba2:	f003 031f 	and.w	r3, r3, #31
 8001ba6:	687a      	ldr	r2, [r7, #4]
 8001ba8:	fa22 f303 	lsr.w	r3, r2, r3
 8001bac:	4a0b      	ldr	r2, [pc, #44]	; (8001bdc <HAL_Init+0x70>)
 8001bae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001bb0:	4a0b      	ldr	r2, [pc, #44]	; (8001be0 <HAL_Init+0x74>)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	f000 f814 	bl	8001be4 <HAL_InitTick>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e002      	b.n	8001bcc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001bc6:	f7ff fcfb 	bl	80015c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
}
 8001bcc:	4618      	mov	r0, r3
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	58024400 	.word	0x58024400
 8001bd8:	080078dc 	.word	0x080078dc
 8001bdc:	2400000c 	.word	0x2400000c
 8001be0:	24000008 	.word	0x24000008

08001be4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001bec:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <HAL_InitTick+0x60>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e021      	b.n	8001c3c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001bf8:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <HAL_InitTick+0x64>)
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <HAL_InitTick+0x60>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	4619      	mov	r1, r3
 8001c02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c06:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f000 f983 	bl	8001f1a <HAL_SYSTICK_Config>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e00e      	b.n	8001c3c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b0f      	cmp	r3, #15
 8001c22:	d80a      	bhi.n	8001c3a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c24:	2200      	movs	r2, #0
 8001c26:	6879      	ldr	r1, [r7, #4]
 8001c28:	f04f 30ff 	mov.w	r0, #4294967295
 8001c2c:	f000 f94d 	bl	8001eca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c30:	4a06      	ldr	r2, [pc, #24]	; (8001c4c <HAL_InitTick+0x68>)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c36:	2300      	movs	r3, #0
 8001c38:	e000      	b.n	8001c3c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	24000014 	.word	0x24000014
 8001c48:	24000008 	.word	0x24000008
 8001c4c:	24000010 	.word	0x24000010

08001c50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c54:	4b06      	ldr	r3, [pc, #24]	; (8001c70 <HAL_IncTick+0x20>)
 8001c56:	781b      	ldrb	r3, [r3, #0]
 8001c58:	461a      	mov	r2, r3
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <HAL_IncTick+0x24>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4413      	add	r3, r2
 8001c60:	4a04      	ldr	r2, [pc, #16]	; (8001c74 <HAL_IncTick+0x24>)
 8001c62:	6013      	str	r3, [r2, #0]
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	24000014 	.word	0x24000014
 8001c74:	240007a0 	.word	0x240007a0

08001c78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c7c:	4b03      	ldr	r3, [pc, #12]	; (8001c8c <HAL_GetTick+0x14>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	240007a0 	.word	0x240007a0

08001c90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c98:	f7ff ffee 	bl	8001c78 <HAL_GetTick>
 8001c9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca8:	d005      	beq.n	8001cb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001caa:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <HAL_Delay+0x40>)
 8001cac:	781b      	ldrb	r3, [r3, #0]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cb6:	bf00      	nop
 8001cb8:	f7ff ffde 	bl	8001c78 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d8f7      	bhi.n	8001cb8 <HAL_Delay+0x28>
  {
  }
}
 8001cc8:	bf00      	nop
 8001cca:	3710      	adds	r7, #16
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	24000014 	.word	0x24000014

08001cd4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001cd8:	4b03      	ldr	r3, [pc, #12]	; (8001ce8 <HAL_GetREVID+0x14>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	0c1b      	lsrs	r3, r3, #16
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	5c001000 	.word	0x5c001000

08001cec <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001cf6:	685b      	ldr	r3, [r3, #4]
 8001cf8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001cfc:	4904      	ldr	r1, [pc, #16]	; (8001d10 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	604b      	str	r3, [r1, #4]
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	58000400 	.word	0x58000400

08001d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	f003 0307 	and.w	r3, r3, #7
 8001d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d24:	4b0b      	ldr	r3, [pc, #44]	; (8001d54 <__NVIC_SetPriorityGrouping+0x40>)
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d2a:	68ba      	ldr	r2, [r7, #8]
 8001d2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d30:	4013      	ands	r3, r2
 8001d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d38:	68bb      	ldr	r3, [r7, #8]
 8001d3a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d3c:	4b06      	ldr	r3, [pc, #24]	; (8001d58 <__NVIC_SetPriorityGrouping+0x44>)
 8001d3e:	4313      	orrs	r3, r2
 8001d40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d42:	4a04      	ldr	r2, [pc, #16]	; (8001d54 <__NVIC_SetPriorityGrouping+0x40>)
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	60d3      	str	r3, [r2, #12]
}
 8001d48:	bf00      	nop
 8001d4a:	3714      	adds	r7, #20
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr
 8001d54:	e000ed00 	.word	0xe000ed00
 8001d58:	05fa0000 	.word	0x05fa0000

08001d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d60:	4b04      	ldr	r3, [pc, #16]	; (8001d74 <__NVIC_GetPriorityGrouping+0x18>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	0a1b      	lsrs	r3, r3, #8
 8001d66:	f003 0307 	and.w	r3, r3, #7
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	e000ed00 	.word	0xe000ed00

08001d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	db0b      	blt.n	8001da2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d8a:	88fb      	ldrh	r3, [r7, #6]
 8001d8c:	f003 021f 	and.w	r2, r3, #31
 8001d90:	4907      	ldr	r1, [pc, #28]	; (8001db0 <__NVIC_EnableIRQ+0x38>)
 8001d92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d96:	095b      	lsrs	r3, r3, #5
 8001d98:	2001      	movs	r0, #1
 8001d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	e000e100 	.word	0xe000e100

08001db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	6039      	str	r1, [r7, #0]
 8001dbe:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001dc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	db0a      	blt.n	8001dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	490c      	ldr	r1, [pc, #48]	; (8001e00 <__NVIC_SetPriority+0x4c>)
 8001dce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001dd2:	0112      	lsls	r2, r2, #4
 8001dd4:	b2d2      	uxtb	r2, r2
 8001dd6:	440b      	add	r3, r1
 8001dd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ddc:	e00a      	b.n	8001df4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	4908      	ldr	r1, [pc, #32]	; (8001e04 <__NVIC_SetPriority+0x50>)
 8001de4:	88fb      	ldrh	r3, [r7, #6]
 8001de6:	f003 030f 	and.w	r3, r3, #15
 8001dea:	3b04      	subs	r3, #4
 8001dec:	0112      	lsls	r2, r2, #4
 8001dee:	b2d2      	uxtb	r2, r2
 8001df0:	440b      	add	r3, r1
 8001df2:	761a      	strb	r2, [r3, #24]
}
 8001df4:	bf00      	nop
 8001df6:	370c      	adds	r7, #12
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	e000e100 	.word	0xe000e100
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b089      	sub	sp, #36	; 0x24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e1c:	69fb      	ldr	r3, [r7, #28]
 8001e1e:	f1c3 0307 	rsb	r3, r3, #7
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	bf28      	it	cs
 8001e26:	2304      	movcs	r3, #4
 8001e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3304      	adds	r3, #4
 8001e2e:	2b06      	cmp	r3, #6
 8001e30:	d902      	bls.n	8001e38 <NVIC_EncodePriority+0x30>
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	3b03      	subs	r3, #3
 8001e36:	e000      	b.n	8001e3a <NVIC_EncodePriority+0x32>
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43da      	mvns	r2, r3
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	401a      	ands	r2, r3
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e50:	f04f 31ff 	mov.w	r1, #4294967295
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	fa01 f303 	lsl.w	r3, r1, r3
 8001e5a:	43d9      	mvns	r1, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e60:	4313      	orrs	r3, r2
         );
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3724      	adds	r7, #36	; 0x24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
	...

08001e70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e80:	d301      	bcc.n	8001e86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e82:	2301      	movs	r3, #1
 8001e84:	e00f      	b.n	8001ea6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e86:	4a0a      	ldr	r2, [pc, #40]	; (8001eb0 <SysTick_Config+0x40>)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e8e:	210f      	movs	r1, #15
 8001e90:	f04f 30ff 	mov.w	r0, #4294967295
 8001e94:	f7ff ff8e 	bl	8001db4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e98:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <SysTick_Config+0x40>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e9e:	4b04      	ldr	r3, [pc, #16]	; (8001eb0 <SysTick_Config+0x40>)
 8001ea0:	2207      	movs	r2, #7
 8001ea2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ea4:	2300      	movs	r3, #0
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3708      	adds	r7, #8
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	e000e010 	.word	0xe000e010

08001eb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7ff ff29 	bl	8001d14 <__NVIC_SetPriorityGrouping>
}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}

08001eca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eca:	b580      	push	{r7, lr}
 8001ecc:	b086      	sub	sp, #24
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	60b9      	str	r1, [r7, #8]
 8001ed4:	607a      	str	r2, [r7, #4]
 8001ed6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ed8:	f7ff ff40 	bl	8001d5c <__NVIC_GetPriorityGrouping>
 8001edc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	68b9      	ldr	r1, [r7, #8]
 8001ee2:	6978      	ldr	r0, [r7, #20]
 8001ee4:	f7ff ff90 	bl	8001e08 <NVIC_EncodePriority>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001eee:	4611      	mov	r1, r2
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff ff5f 	bl	8001db4 <__NVIC_SetPriority>
}
 8001ef6:	bf00      	nop
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b082      	sub	sp, #8
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	4603      	mov	r3, r0
 8001f06:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff ff33 	bl	8001d78 <__NVIC_EnableIRQ>
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b082      	sub	sp, #8
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	f7ff ffa4 	bl	8001e70 <SysTick_Config>
 8001f28:	4603      	mov	r3, r0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d101      	bne.n	8001f46 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e0c6      	b.n	80020d4 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d102      	bne.n	8001f54 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7ff fb50 	bl	80015f4 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2223      	movs	r2, #35	; 0x23
 8001f58:	655a      	str	r2, [r3, #84]	; 0x54

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f5a:	4b60      	ldr	r3, [pc, #384]	; (80020dc <HAL_ETH_Init+0x1a8>)
 8001f5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f60:	4a5e      	ldr	r2, [pc, #376]	; (80020dc <HAL_ETH_Init+0x1a8>)
 8001f62:	f043 0302 	orr.w	r3, r3, #2
 8001f66:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001f6a:	4b5c      	ldr	r3, [pc, #368]	; (80020dc <HAL_ETH_Init+0x1a8>)
 8001f6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001f70:	f003 0302 	and.w	r3, r3, #2
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	7a1b      	ldrb	r3, [r3, #8]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d103      	bne.n	8001f88 <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001f80:	2000      	movs	r0, #0
 8001f82:	f7ff feb3 	bl	8001cec <HAL_SYSCFG_ETHInterfaceSelect>
 8001f86:	e003      	b.n	8001f90 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8001f88:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001f8c:	f7ff feae 	bl	8001cec <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f042 0201 	orr.w	r2, r2, #1
 8001fa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fa6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fa8:	f7ff fe66 	bl	8001c78 <HAL_GetTick>
 8001fac:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001fae:	e00f      	b.n	8001fd0 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 8001fb0:	f7ff fe62 	bl	8001c78 <HAL_GetTick>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001fbe:	d907      	bls.n	8001fd0 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2204      	movs	r2, #4
 8001fc4:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	22e0      	movs	r2, #224	; 0xe0
 8001fca:	655a      	str	r2, [r3, #84]	; 0x54
      /* Return Error */
      return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e081      	b.n	80020d4 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1e6      	bne.n	8001fb0 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 fac0 	bl	8002568 <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001fe8:	f001 fe66 	bl	8003cb8 <HAL_RCC_GetHCLKFreq>
 8001fec:	4602      	mov	r2, r0
 8001fee:	4b3c      	ldr	r3, [pc, #240]	; (80020e0 <HAL_ETH_Init+0x1ac>)
 8001ff0:	fba3 2302 	umull	r2, r3, r3, r2
 8001ff4:	0c9a      	lsrs	r2, r3, #18
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	3a01      	subs	r2, #1
 8001ffc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 fa13 	bl	800242c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800201c:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002020:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	2b00      	cmp	r3, #0
 800202c:	d007      	beq.n	800203e <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	22e0      	movs	r2, #224	; 0xe0
 8002038:	655a      	str	r2, [r3, #84]	; 0x54
    /* Return Error */
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e04a      	b.n	80020d4 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	f241 1308 	movw	r3, #4360	; 0x1108
 8002046:	4413      	add	r3, r2
 8002048:	681a      	ldr	r2, [r3, #0]
 800204a:	4b26      	ldr	r3, [pc, #152]	; (80020e4 <HAL_ETH_Init+0x1b0>)
 800204c:	4013      	ands	r3, r2
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6952      	ldr	r2, [r2, #20]
 8002052:	0052      	lsls	r2, r2, #1
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	6809      	ldr	r1, [r1, #0]
 8002058:	431a      	orrs	r2, r3
 800205a:	f241 1308 	movw	r3, #4360	; 0x1108
 800205e:	440b      	add	r3, r1
 8002060:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 fad8 	bl	8002618 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 fb1c 	bl	80026a6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	3305      	adds	r3, #5
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	021a      	lsls	r2, r3, #8
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	3304      	adds	r3, #4
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	4619      	mov	r1, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	430a      	orrs	r2, r1
 8002088:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	3303      	adds	r3, #3
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	061a      	lsls	r2, r3, #24
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	3302      	adds	r3, #2
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	041b      	lsls	r3, r3, #16
 80020a0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	3301      	adds	r3, #1
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80020ac:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80020ba:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80020bc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	65da      	str	r2, [r3, #92]	; 0x5c
  heth->gState = HAL_ETH_STATE_READY;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2210      	movs	r2, #16
 80020ca:	655a      	str	r2, [r3, #84]	; 0x54
  heth->RxState = HAL_ETH_STATE_READY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2210      	movs	r2, #16
 80020d0:	659a      	str	r2, [r3, #88]	; 0x58

  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3710      	adds	r7, #16
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	58024400 	.word	0x58024400
 80020e0:	431bde83 	.word	0x431bde83
 80020e4:	ffff8001 	.word	0xffff8001

080020e8 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b085      	sub	sp, #20
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
 80020f0:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 80020fa:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	791b      	ldrb	r3, [r3, #4]
 8002100:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8002102:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	7b1b      	ldrb	r3, [r3, #12]
 8002108:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800210a:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	7b5b      	ldrb	r3, [r3, #13]
 8002110:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002112:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	7b9b      	ldrb	r3, [r3, #14]
 8002118:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800211a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	7bdb      	ldrb	r3, [r3, #15]
 8002120:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002122:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002124:	683a      	ldr	r2, [r7, #0]
 8002126:	7c12      	ldrb	r2, [r2, #16]
 8002128:	2a00      	cmp	r2, #0
 800212a:	d102      	bne.n	8002132 <ETH_SetMACConfig+0x4a>
 800212c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002130:	e000      	b.n	8002134 <ETH_SetMACConfig+0x4c>
 8002132:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002134:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002136:	683a      	ldr	r2, [r7, #0]
 8002138:	7c52      	ldrb	r2, [r2, #17]
 800213a:	2a00      	cmp	r2, #0
 800213c:	d102      	bne.n	8002144 <ETH_SetMACConfig+0x5c>
 800213e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002142:	e000      	b.n	8002146 <ETH_SetMACConfig+0x5e>
 8002144:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002146:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	7c9b      	ldrb	r3, [r3, #18]
 800214c:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800214e:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002154:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800215a:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	7f1b      	ldrb	r3, [r3, #28]
 8002160:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8002162:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	7f5b      	ldrb	r3, [r3, #29]
 8002168:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800216a:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 800216c:	683a      	ldr	r2, [r7, #0]
 800216e:	7f92      	ldrb	r2, [r2, #30]
 8002170:	2a00      	cmp	r2, #0
 8002172:	d102      	bne.n	800217a <ETH_SetMACConfig+0x92>
 8002174:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002178:	e000      	b.n	800217c <ETH_SetMACConfig+0x94>
 800217a:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 800217c:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	7fdb      	ldrb	r3, [r3, #31]
 8002182:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002184:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	f892 2020 	ldrb.w	r2, [r2, #32]
 800218c:	2a00      	cmp	r2, #0
 800218e:	d102      	bne.n	8002196 <ETH_SetMACConfig+0xae>
 8002190:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002194:	e000      	b.n	8002198 <ETH_SetMACConfig+0xb0>
 8002196:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002198:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800219e:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80021a6:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80021a8:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80021ae:	4313      	orrs	r3, r2
 80021b0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	4b56      	ldr	r3, [pc, #344]	; (8002314 <ETH_SetMACConfig+0x22c>)
 80021ba:	4013      	ands	r3, r2
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6812      	ldr	r2, [r2, #0]
 80021c0:	68f9      	ldr	r1, [r7, #12]
 80021c2:	430b      	orrs	r3, r1
 80021c4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021ca:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021d2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80021d4:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80021dc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80021de:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80021e6:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80021e8:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80021f0:	2a00      	cmp	r2, #0
 80021f2:	d102      	bne.n	80021fa <ETH_SetMACConfig+0x112>
 80021f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80021f8:	e000      	b.n	80021fc <ETH_SetMACConfig+0x114>
 80021fa:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80021fc:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002202:	4313      	orrs	r3, r2
 8002204:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	4b42      	ldr	r3, [pc, #264]	; (8002318 <ETH_SetMACConfig+0x230>)
 800220e:	4013      	ands	r3, r2
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6812      	ldr	r2, [r2, #0]
 8002214:	68f9      	ldr	r1, [r7, #12]
 8002216:	430b      	orrs	r3, r1
 8002218:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002220:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8002226:	4313      	orrs	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	68da      	ldr	r2, [r3, #12]
 8002230:	4b3a      	ldr	r3, [pc, #232]	; (800231c <ETH_SetMACConfig+0x234>)
 8002232:	4013      	ands	r3, r2
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	6812      	ldr	r2, [r2, #0]
 8002238:	68f9      	ldr	r1, [r7, #12]
 800223a:	430b      	orrs	r3, r1
 800223c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002244:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800224a:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002252:	2a00      	cmp	r2, #0
 8002254:	d101      	bne.n	800225a <ETH_SetMACConfig+0x172>
 8002256:	2280      	movs	r2, #128	; 0x80
 8002258:	e000      	b.n	800225c <ETH_SetMACConfig+0x174>
 800225a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800225c:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002262:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002264:	4313      	orrs	r3, r2
 8002266:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800226e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002272:	4013      	ands	r3, r2
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	6812      	ldr	r2, [r2, #0]
 8002278:	68f9      	ldr	r1, [r7, #12]
 800227a:	430b      	orrs	r3, r1
 800227c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002284:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800228c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800228e:	4313      	orrs	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229a:	f023 0103 	bic.w	r1, r3, #3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80022b2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	430a      	orrs	r2, r1
 80022c0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80022c8:	683a      	ldr	r2, [r7, #0]
 80022ca:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80022ce:	2a00      	cmp	r2, #0
 80022d0:	d101      	bne.n	80022d6 <ETH_SetMACConfig+0x1ee>
 80022d2:	2240      	movs	r2, #64	; 0x40
 80022d4:	e000      	b.n	80022d8 <ETH_SetMACConfig+0x1f0>
 80022d6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80022d8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80022e0:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80022e2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80022ea:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80022ec:	4313      	orrs	r3, r2
 80022ee:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80022f8:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	68fa      	ldr	r2, [r7, #12]
 8002302:	430a      	orrs	r2, r1
 8002304:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8002308:	bf00      	nop
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	00048083 	.word	0x00048083
 8002318:	c0f88000 	.word	0xc0f88000
 800231c:	fffffef0 	.word	0xfffffef0

08002320 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002320:	b480      	push	{r7}
 8002322:	b085      	sub	sp, #20
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002332:	681a      	ldr	r2, [r3, #0]
 8002334:	4b38      	ldr	r3, [pc, #224]	; (8002418 <ETH_SetDMAConfig+0xf8>)
 8002336:	4013      	ands	r3, r2
 8002338:	683a      	ldr	r2, [r7, #0]
 800233a:	6812      	ldr	r2, [r2, #0]
 800233c:	6879      	ldr	r1, [r7, #4]
 800233e:	6809      	ldr	r1, [r1, #0]
 8002340:	431a      	orrs	r2, r3
 8002342:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 8002346:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	791b      	ldrb	r3, [r3, #4]
 800234c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002352:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	7b1b      	ldrb	r3, [r3, #12]
 8002358:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800235a:	4313      	orrs	r3, r2
 800235c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	f241 0304 	movw	r3, #4100	; 0x1004
 8002366:	4413      	add	r3, r2
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	4b2c      	ldr	r3, [pc, #176]	; (800241c <ETH_SetDMAConfig+0xfc>)
 800236c:	4013      	ands	r3, r2
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	6811      	ldr	r1, [r2, #0]
 8002372:	68fa      	ldr	r2, [r7, #12]
 8002374:	431a      	orrs	r2, r3
 8002376:	f241 0304 	movw	r3, #4100	; 0x1004
 800237a:	440b      	add	r3, r1
 800237c:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	7b5b      	ldrb	r3, [r3, #13]
 8002382:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002388:	4313      	orrs	r3, r2
 800238a:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	4b22      	ldr	r3, [pc, #136]	; (8002420 <ETH_SetDMAConfig+0x100>)
 8002398:	4013      	ands	r3, r2
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6811      	ldr	r1, [r2, #0]
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	431a      	orrs	r2, r3
 80023a2:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80023a6:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	7d1b      	ldrb	r3, [r3, #20]
 80023b0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80023b2:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	7f5b      	ldrb	r3, [r3, #29]
 80023b8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80023ba:	4313      	orrs	r3, r2
 80023bc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	f241 1304 	movw	r3, #4356	; 0x1104
 80023c6:	4413      	add	r3, r2
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	4b16      	ldr	r3, [pc, #88]	; (8002424 <ETH_SetDMAConfig+0x104>)
 80023cc:	4013      	ands	r3, r2
 80023ce:	687a      	ldr	r2, [r7, #4]
 80023d0:	6811      	ldr	r1, [r2, #0]
 80023d2:	68fa      	ldr	r2, [r7, #12]
 80023d4:	431a      	orrs	r2, r3
 80023d6:	f241 1304 	movw	r3, #4356	; 0x1104
 80023da:	440b      	add	r3, r1
 80023dc:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	7f1b      	ldrb	r3, [r3, #28]
 80023e2:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80023e8:	4313      	orrs	r3, r2
 80023ea:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	f241 1308 	movw	r3, #4360	; 0x1108
 80023f4:	4413      	add	r3, r2
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <ETH_SetDMAConfig+0x108>)
 80023fa:	4013      	ands	r3, r2
 80023fc:	687a      	ldr	r2, [r7, #4]
 80023fe:	6811      	ldr	r1, [r2, #0]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	431a      	orrs	r2, r3
 8002404:	f241 1308 	movw	r3, #4360	; 0x1108
 8002408:	440b      	add	r3, r1
 800240a:	601a      	str	r2, [r3, #0]
}
 800240c:	bf00      	nop
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	ffff87fd 	.word	0xffff87fd
 800241c:	ffff2ffe 	.word	0xffff2ffe
 8002420:	fffec000 	.word	0xfffec000
 8002424:	ffc0efef 	.word	0xffc0efef
 8002428:	7fc0ffff 	.word	0x7fc0ffff

0800242c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b0a4      	sub	sp, #144	; 0x90
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002434:	2301      	movs	r3, #1
 8002436:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800243a:	2300      	movs	r3, #0
 800243c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800243e:	2300      	movs	r3, #0
 8002440:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002444:	2300      	movs	r3, #0
 8002446:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800244a:	2301      	movs	r3, #1
 800244c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002450:	2301      	movs	r3, #1
 8002452:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8002456:	2301      	movs	r3, #1
 8002458:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800245c:	2300      	movs	r3, #0
 800245e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002462:	2301      	movs	r3, #1
 8002464:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002468:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800246c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800246e:	2300      	movs	r3, #0
 8002470:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002474:	2300      	movs	r3, #0
 8002476:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8002478:	2300      	movs	r3, #0
 800247a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800247e:	2300      	movs	r3, #0
 8002480:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002484:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8002488:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800248a:	2300      	movs	r3, #0
 800248c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8002490:	2300      	movs	r3, #0
 8002492:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8002494:	2301      	movs	r3, #1
 8002496:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800249a:	2300      	movs	r3, #0
 800249c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80024a0:	2300      	movs	r3, #0
 80024a2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80024a6:	2300      	movs	r3, #0
 80024a8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80024aa:	2300      	movs	r3, #0
 80024ac:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80024ae:	2300      	movs	r3, #0
 80024b0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80024b2:	2300      	movs	r3, #0
 80024b4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80024b8:	2300      	movs	r3, #0
 80024ba:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80024be:	2301      	movs	r3, #1
 80024c0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80024c4:	2320      	movs	r3, #32
 80024c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80024ca:	2301      	movs	r3, #1
 80024cc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80024d0:	2300      	movs	r3, #0
 80024d2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80024d6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80024da:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80024dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80024e0:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80024e2:	2300      	movs	r3, #0
 80024e4:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80024e8:	2302      	movs	r3, #2
 80024ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80024ee:	2300      	movs	r3, #0
 80024f0:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80024f4:	2300      	movs	r3, #0
 80024f6:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80024fa:	2300      	movs	r3, #0
 80024fc:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002500:	2301      	movs	r3, #1
 8002502:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8002506:	2300      	movs	r3, #0
 8002508:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800250a:	2301      	movs	r3, #1
 800250c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002510:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002514:	4619      	mov	r1, r3
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f7ff fde6 	bl	80020e8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800251c:	2301      	movs	r3, #1
 800251e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002520:	2301      	movs	r3, #1
 8002522:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002524:	2300      	movs	r3, #0
 8002526:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8002528:	2300      	movs	r3, #0
 800252a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800252e:	2300      	movs	r3, #0
 8002530:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002532:	2300      	movs	r3, #0
 8002534:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002536:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800253a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800253c:	2300      	movs	r3, #0
 800253e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002540:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002544:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8002546:	2300      	movs	r3, #0
 8002548:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 800254c:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002550:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002552:	f107 0308 	add.w	r3, r7, #8
 8002556:	4619      	mov	r1, r3
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7ff fee1 	bl	8002320 <ETH_SetDMAConfig>
}
 800255e:	bf00      	nop
 8002560:	3790      	adds	r7, #144	; 0x90
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}
	...

08002568 <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002578:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002580:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002582:	f001 fb99 	bl	8003cb8 <HAL_RCC_GetHCLKFreq>
 8002586:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	4a1e      	ldr	r2, [pc, #120]	; (8002604 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d908      	bls.n	80025a2 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	4a1d      	ldr	r2, [pc, #116]	; (8002608 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d804      	bhi.n	80025a2 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800259e:	60fb      	str	r3, [r7, #12]
 80025a0:	e027      	b.n	80025f2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	4a18      	ldr	r2, [pc, #96]	; (8002608 <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d908      	bls.n	80025bc <ETH_MAC_MDIO_ClkConfig+0x54>
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	4a17      	ldr	r2, [pc, #92]	; (800260c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d804      	bhi.n	80025bc <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80025b8:	60fb      	str	r3, [r7, #12]
 80025ba:	e01a      	b.n	80025f2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	4a13      	ldr	r2, [pc, #76]	; (800260c <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d903      	bls.n	80025cc <ETH_MAC_MDIO_ClkConfig+0x64>
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	4a12      	ldr	r2, [pc, #72]	; (8002610 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80025c8:	4293      	cmp	r3, r2
 80025ca:	d911      	bls.n	80025f0 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	4a10      	ldr	r2, [pc, #64]	; (8002610 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d908      	bls.n	80025e6 <ETH_MAC_MDIO_ClkConfig+0x7e>
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	4a0f      	ldr	r2, [pc, #60]	; (8002614 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d804      	bhi.n	80025e6 <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025e2:	60fb      	str	r3, [r7, #12]
 80025e4:	e005      	b.n	80025f2 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	e000      	b.n	80025f2 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80025f0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80025fc:	bf00      	nop
 80025fe:	3710      	adds	r7, #16
 8002600:	46bd      	mov	sp, r7
 8002602:	bd80      	pop	{r7, pc}
 8002604:	01312cff 	.word	0x01312cff
 8002608:	02160ebf 	.word	0x02160ebf
 800260c:	039386ff 	.word	0x039386ff
 8002610:	05f5e0ff 	.word	0x05f5e0ff
 8002614:	08f0d17f 	.word	0x08f0d17f

08002618 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002620:	2300      	movs	r3, #0
 8002622:	60fb      	str	r3, [r7, #12]
 8002624:	e01d      	b.n	8002662 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68d9      	ldr	r1, [r3, #12]
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	4613      	mov	r3, r2
 800262e:	005b      	lsls	r3, r3, #1
 8002630:	4413      	add	r3, r2
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	440b      	add	r3, r1
 8002636:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	2200      	movs	r2, #0
 800263c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	2200      	movs	r2, #0
 8002642:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	2200      	movs	r2, #0
 8002648:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	2200      	movs	r2, #0
 800264e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002650:	68b9      	ldr	r1, [r7, #8]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68fa      	ldr	r2, [r7, #12]
 8002656:	3206      	adds	r2, #6
 8002658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	3301      	adds	r3, #1
 8002660:	60fb      	str	r3, [r7, #12]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2b03      	cmp	r3, #3
 8002666:	d9de      	bls.n	8002626 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2200      	movs	r2, #0
 800266c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	f241 132c 	movw	r3, #4396	; 0x112c
 8002676:	4413      	add	r3, r2
 8002678:	2203      	movs	r2, #3
 800267a:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68d9      	ldr	r1, [r3, #12]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	f241 1314 	movw	r3, #4372	; 0x1114
 8002688:	4413      	add	r3, r2
 800268a:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68da      	ldr	r2, [r3, #12]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 8002698:	601a      	str	r2, [r3, #0]
}
 800269a:	bf00      	nop
 800269c:	3714      	adds	r7, #20
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b085      	sub	sp, #20
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80026ae:	2300      	movs	r3, #0
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	e024      	b.n	80026fe <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6919      	ldr	r1, [r3, #16]
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	4613      	mov	r3, r2
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	4413      	add	r3, r2
 80026c0:	00db      	lsls	r3, r3, #3
 80026c2:	440b      	add	r3, r1
 80026c4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	2200      	movs	r2, #0
 80026d0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	2200      	movs	r2, #0
 80026d6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	2200      	movs	r2, #0
 80026dc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2200      	movs	r2, #0
 80026e2:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	2200      	movs	r2, #0
 80026e8:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors adresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	6879      	ldr	r1, [r7, #4]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	330a      	adds	r3, #10
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	3301      	adds	r3, #1
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	2b03      	cmp	r3, #3
 8002702:	d9d7      	bls.n	80026b4 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	63da      	str	r2, [r3, #60]	; 0x3c
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	645a      	str	r2, [r3, #68]	; 0x44
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	64da      	str	r2, [r3, #76]	; 0x4c
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2200      	movs	r2, #0
 8002720:	649a      	str	r2, [r3, #72]	; 0x48

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	f241 1330 	movw	r3, #4400	; 0x1130
 800272a:	4413      	add	r3, r2
 800272c:	2203      	movs	r2, #3
 800272e:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6919      	ldr	r1, [r3, #16]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	f241 131c 	movw	r3, #4380	; 0x111c
 800273c:	4413      	add	r3, r2
 800273e:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	691b      	ldr	r3, [r3, #16]
 8002744:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	f241 1328 	movw	r3, #4392	; 0x1128
 8002750:	4413      	add	r3, r2
 8002752:	6019      	str	r1, [r3, #0]
}
 8002754:	bf00      	nop
 8002756:	3714      	adds	r7, #20
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002760:	b480      	push	{r7}
 8002762:	b089      	sub	sp, #36	; 0x24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800276a:	2300      	movs	r3, #0
 800276c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800276e:	4b89      	ldr	r3, [pc, #548]	; (8002994 <HAL_GPIO_Init+0x234>)
 8002770:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002772:	e194      	b.n	8002a9e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	681a      	ldr	r2, [r3, #0]
 8002778:	2101      	movs	r1, #1
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	fa01 f303 	lsl.w	r3, r1, r3
 8002780:	4013      	ands	r3, r2
 8002782:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	2b00      	cmp	r3, #0
 8002788:	f000 8186 	beq.w	8002a98 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d00b      	beq.n	80027ac <HAL_GPIO_Init+0x4c>
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	2b02      	cmp	r3, #2
 800279a:	d007      	beq.n	80027ac <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027a0:	2b11      	cmp	r3, #17
 80027a2:	d003      	beq.n	80027ac <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2b12      	cmp	r3, #18
 80027aa:	d130      	bne.n	800280e <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	2203      	movs	r2, #3
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	43db      	mvns	r3, r3
 80027be:	69ba      	ldr	r2, [r7, #24]
 80027c0:	4013      	ands	r3, r2
 80027c2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	68da      	ldr	r2, [r3, #12]
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69ba      	ldr	r2, [r7, #24]
 80027da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80027e2:	2201      	movs	r2, #1
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ea:	43db      	mvns	r3, r3
 80027ec:	69ba      	ldr	r2, [r7, #24]
 80027ee:	4013      	ands	r3, r2
 80027f0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	091b      	lsrs	r3, r3, #4
 80027f8:	f003 0201 	and.w	r2, r3, #1
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002802:	69ba      	ldr	r2, [r7, #24]
 8002804:	4313      	orrs	r3, r2
 8002806:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	2203      	movs	r2, #3
 800281a:	fa02 f303 	lsl.w	r3, r2, r3
 800281e:	43db      	mvns	r3, r3
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	4013      	ands	r3, r2
 8002824:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	689a      	ldr	r2, [r3, #8]
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4313      	orrs	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b02      	cmp	r3, #2
 8002844:	d003      	beq.n	800284e <HAL_GPIO_Init+0xee>
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	2b12      	cmp	r3, #18
 800284c:	d123      	bne.n	8002896 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	08da      	lsrs	r2, r3, #3
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3208      	adds	r2, #8
 8002856:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800285a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	220f      	movs	r2, #15
 8002866:	fa02 f303 	lsl.w	r3, r2, r3
 800286a:	43db      	mvns	r3, r3
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	4013      	ands	r3, r2
 8002870:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	691a      	ldr	r2, [r3, #16]
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	009b      	lsls	r3, r3, #2
 800287e:	fa02 f303 	lsl.w	r3, r2, r3
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	4313      	orrs	r3, r2
 8002886:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	08da      	lsrs	r2, r3, #3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	3208      	adds	r2, #8
 8002890:	69b9      	ldr	r1, [r7, #24]
 8002892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	2203      	movs	r2, #3
 80028a2:	fa02 f303 	lsl.w	r3, r2, r3
 80028a6:	43db      	mvns	r3, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4013      	ands	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f003 0203 	and.w	r2, r3, #3
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	f000 80e0 	beq.w	8002a98 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028d8:	4b2f      	ldr	r3, [pc, #188]	; (8002998 <HAL_GPIO_Init+0x238>)
 80028da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028de:	4a2e      	ldr	r2, [pc, #184]	; (8002998 <HAL_GPIO_Init+0x238>)
 80028e0:	f043 0302 	orr.w	r3, r3, #2
 80028e4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80028e8:	4b2b      	ldr	r3, [pc, #172]	; (8002998 <HAL_GPIO_Init+0x238>)
 80028ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	60fb      	str	r3, [r7, #12]
 80028f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028f6:	4a29      	ldr	r2, [pc, #164]	; (800299c <HAL_GPIO_Init+0x23c>)
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	089b      	lsrs	r3, r3, #2
 80028fc:	3302      	adds	r3, #2
 80028fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002902:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	220f      	movs	r2, #15
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	43db      	mvns	r3, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4013      	ands	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a20      	ldr	r2, [pc, #128]	; (80029a0 <HAL_GPIO_Init+0x240>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d052      	beq.n	80029c8 <HAL_GPIO_Init+0x268>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a1f      	ldr	r2, [pc, #124]	; (80029a4 <HAL_GPIO_Init+0x244>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d031      	beq.n	800298e <HAL_GPIO_Init+0x22e>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a1e      	ldr	r2, [pc, #120]	; (80029a8 <HAL_GPIO_Init+0x248>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d02b      	beq.n	800298a <HAL_GPIO_Init+0x22a>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a1d      	ldr	r2, [pc, #116]	; (80029ac <HAL_GPIO_Init+0x24c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d025      	beq.n	8002986 <HAL_GPIO_Init+0x226>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a1c      	ldr	r2, [pc, #112]	; (80029b0 <HAL_GPIO_Init+0x250>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d01f      	beq.n	8002982 <HAL_GPIO_Init+0x222>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a1b      	ldr	r2, [pc, #108]	; (80029b4 <HAL_GPIO_Init+0x254>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d019      	beq.n	800297e <HAL_GPIO_Init+0x21e>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a1a      	ldr	r2, [pc, #104]	; (80029b8 <HAL_GPIO_Init+0x258>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d013      	beq.n	800297a <HAL_GPIO_Init+0x21a>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a19      	ldr	r2, [pc, #100]	; (80029bc <HAL_GPIO_Init+0x25c>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d00d      	beq.n	8002976 <HAL_GPIO_Init+0x216>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a18      	ldr	r2, [pc, #96]	; (80029c0 <HAL_GPIO_Init+0x260>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d007      	beq.n	8002972 <HAL_GPIO_Init+0x212>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a17      	ldr	r2, [pc, #92]	; (80029c4 <HAL_GPIO_Init+0x264>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d101      	bne.n	800296e <HAL_GPIO_Init+0x20e>
 800296a:	2309      	movs	r3, #9
 800296c:	e02d      	b.n	80029ca <HAL_GPIO_Init+0x26a>
 800296e:	230a      	movs	r3, #10
 8002970:	e02b      	b.n	80029ca <HAL_GPIO_Init+0x26a>
 8002972:	2308      	movs	r3, #8
 8002974:	e029      	b.n	80029ca <HAL_GPIO_Init+0x26a>
 8002976:	2307      	movs	r3, #7
 8002978:	e027      	b.n	80029ca <HAL_GPIO_Init+0x26a>
 800297a:	2306      	movs	r3, #6
 800297c:	e025      	b.n	80029ca <HAL_GPIO_Init+0x26a>
 800297e:	2305      	movs	r3, #5
 8002980:	e023      	b.n	80029ca <HAL_GPIO_Init+0x26a>
 8002982:	2304      	movs	r3, #4
 8002984:	e021      	b.n	80029ca <HAL_GPIO_Init+0x26a>
 8002986:	2303      	movs	r3, #3
 8002988:	e01f      	b.n	80029ca <HAL_GPIO_Init+0x26a>
 800298a:	2302      	movs	r3, #2
 800298c:	e01d      	b.n	80029ca <HAL_GPIO_Init+0x26a>
 800298e:	2301      	movs	r3, #1
 8002990:	e01b      	b.n	80029ca <HAL_GPIO_Init+0x26a>
 8002992:	bf00      	nop
 8002994:	58000080 	.word	0x58000080
 8002998:	58024400 	.word	0x58024400
 800299c:	58000400 	.word	0x58000400
 80029a0:	58020000 	.word	0x58020000
 80029a4:	58020400 	.word	0x58020400
 80029a8:	58020800 	.word	0x58020800
 80029ac:	58020c00 	.word	0x58020c00
 80029b0:	58021000 	.word	0x58021000
 80029b4:	58021400 	.word	0x58021400
 80029b8:	58021800 	.word	0x58021800
 80029bc:	58021c00 	.word	0x58021c00
 80029c0:	58022000 	.word	0x58022000
 80029c4:	58022400 	.word	0x58022400
 80029c8:	2300      	movs	r3, #0
 80029ca:	69fa      	ldr	r2, [r7, #28]
 80029cc:	f002 0203 	and.w	r2, r2, #3
 80029d0:	0092      	lsls	r2, r2, #2
 80029d2:	4093      	lsls	r3, r2
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029da:	4938      	ldr	r1, [pc, #224]	; (8002abc <HAL_GPIO_Init+0x35c>)
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	089b      	lsrs	r3, r3, #2
 80029e0:	3302      	adds	r3, #2
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	43db      	mvns	r3, r3
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4013      	ands	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d003      	beq.n	8002a0c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d003      	beq.n	8002a36 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a3c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	43db      	mvns	r3, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4013      	ands	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d003      	beq.n	8002a62 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002a5a:	69ba      	ldr	r2, [r7, #24]
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002a62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a66:	69bb      	ldr	r3, [r7, #24]
 8002a68:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002a6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	43db      	mvns	r3, r3
 8002a76:	69ba      	ldr	r2, [r7, #24]
 8002a78:	4013      	ands	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d003      	beq.n	8002a90 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002a90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	681a      	ldr	r2, [r3, #0]
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	f47f ae63 	bne.w	8002774 <HAL_GPIO_Init+0x14>
  }
}
 8002aae:	bf00      	nop
 8002ab0:	3724      	adds	r7, #36	; 0x24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	58000400 	.word	0x58000400

08002ac0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
 8002ac8:	460b      	mov	r3, r1
 8002aca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	691a      	ldr	r2, [r3, #16]
 8002ad0:	887b      	ldrh	r3, [r7, #2]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d002      	beq.n	8002ade <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	73fb      	strb	r3, [r7, #15]
 8002adc:	e001      	b.n	8002ae2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	460b      	mov	r3, r1
 8002afa:	807b      	strh	r3, [r7, #2]
 8002afc:	4613      	mov	r3, r2
 8002afe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b00:	787b      	ldrb	r3, [r7, #1]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b06:	887a      	ldrh	r2, [r7, #2]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002b0c:	e003      	b.n	8002b16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002b0e:	887b      	ldrh	r3, [r7, #2]
 8002b10:	041a      	lsls	r2, r3, #16
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	619a      	str	r2, [r3, #24]
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002b22:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b24:	b08f      	sub	sp, #60	; 0x3c
 8002b26:	af0a      	add	r7, sp, #40	; 0x28
 8002b28:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e116      	b.n	8002d62 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d106      	bne.n	8002b54 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7fe fe90 	bl	8001874 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2203      	movs	r2, #3
 8002b58:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d102      	bne.n	8002b6e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f004 f80a 	bl	8006b8c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	603b      	str	r3, [r7, #0]
 8002b7e:	687e      	ldr	r6, [r7, #4]
 8002b80:	466d      	mov	r5, sp
 8002b82:	f106 0410 	add.w	r4, r6, #16
 8002b86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b88:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002b8e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002b92:	e885 0003 	stmia.w	r5, {r0, r1}
 8002b96:	1d33      	adds	r3, r6, #4
 8002b98:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002b9a:	6838      	ldr	r0, [r7, #0]
 8002b9c:	f003 ff94 	bl	8006ac8 <USB_CoreInit>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d005      	beq.n	8002bb2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2202      	movs	r2, #2
 8002baa:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e0d7      	b.n	8002d62 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f003 fff8 	bl	8006bae <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	73fb      	strb	r3, [r7, #15]
 8002bc2:	e04a      	b.n	8002c5a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002bc4:	7bfa      	ldrb	r2, [r7, #15]
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	1a9b      	subs	r3, r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	440b      	add	r3, r1
 8002bd2:	333d      	adds	r3, #61	; 0x3d
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002bd8:	7bfa      	ldrb	r2, [r7, #15]
 8002bda:	6879      	ldr	r1, [r7, #4]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	1a9b      	subs	r3, r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	440b      	add	r3, r1
 8002be6:	333c      	adds	r3, #60	; 0x3c
 8002be8:	7bfa      	ldrb	r2, [r7, #15]
 8002bea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002bec:	7bfa      	ldrb	r2, [r7, #15]
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
 8002bf0:	b298      	uxth	r0, r3
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	00db      	lsls	r3, r3, #3
 8002bf8:	1a9b      	subs	r3, r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	3342      	adds	r3, #66	; 0x42
 8002c00:	4602      	mov	r2, r0
 8002c02:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002c04:	7bfa      	ldrb	r2, [r7, #15]
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	00db      	lsls	r3, r3, #3
 8002c0c:	1a9b      	subs	r3, r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	333f      	adds	r3, #63	; 0x3f
 8002c14:	2200      	movs	r2, #0
 8002c16:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002c18:	7bfa      	ldrb	r2, [r7, #15]
 8002c1a:	6879      	ldr	r1, [r7, #4]
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	1a9b      	subs	r3, r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	440b      	add	r3, r1
 8002c26:	3344      	adds	r3, #68	; 0x44
 8002c28:	2200      	movs	r2, #0
 8002c2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002c2c:	7bfa      	ldrb	r2, [r7, #15]
 8002c2e:	6879      	ldr	r1, [r7, #4]
 8002c30:	4613      	mov	r3, r2
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	1a9b      	subs	r3, r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	440b      	add	r3, r1
 8002c3a:	3348      	adds	r3, #72	; 0x48
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002c40:	7bfa      	ldrb	r2, [r7, #15]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	3350      	adds	r3, #80	; 0x50
 8002c50:	2200      	movs	r2, #0
 8002c52:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c54:	7bfb      	ldrb	r3, [r7, #15]
 8002c56:	3301      	adds	r3, #1
 8002c58:	73fb      	strb	r3, [r7, #15]
 8002c5a:	7bfa      	ldrb	r2, [r7, #15]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d3af      	bcc.n	8002bc4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c64:	2300      	movs	r3, #0
 8002c66:	73fb      	strb	r3, [r7, #15]
 8002c68:	e044      	b.n	8002cf4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002c6a:	7bfa      	ldrb	r2, [r7, #15]
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	1a9b      	subs	r3, r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	440b      	add	r3, r1
 8002c78:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002c80:	7bfa      	ldrb	r2, [r7, #15]
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	4613      	mov	r3, r2
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	1a9b      	subs	r3, r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002c92:	7bfa      	ldrb	r2, [r7, #15]
 8002c94:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002c96:	7bfa      	ldrb	r2, [r7, #15]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	00db      	lsls	r3, r3, #3
 8002c9e:	1a9b      	subs	r3, r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002ca8:	2200      	movs	r2, #0
 8002caa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002cac:	7bfa      	ldrb	r2, [r7, #15]
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	1a9b      	subs	r3, r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002cc2:	7bfa      	ldrb	r2, [r7, #15]
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	00db      	lsls	r3, r3, #3
 8002cca:	1a9b      	subs	r3, r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	440b      	add	r3, r1
 8002cd0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002cd8:	7bfa      	ldrb	r2, [r7, #15]
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	1a9b      	subs	r3, r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002cea:	2200      	movs	r2, #0
 8002cec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cee:	7bfb      	ldrb	r3, [r7, #15]
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
 8002cf4:	7bfa      	ldrb	r2, [r7, #15]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d3b5      	bcc.n	8002c6a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	603b      	str	r3, [r7, #0]
 8002d04:	687e      	ldr	r6, [r7, #4]
 8002d06:	466d      	mov	r5, sp
 8002d08:	f106 0410 	add.w	r4, r6, #16
 8002d0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d18:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d1c:	1d33      	adds	r3, r6, #4
 8002d1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d20:	6838      	ldr	r0, [r7, #0]
 8002d22:	f003 ff6f 	bl	8006c04 <USB_DevInit>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d005      	beq.n	8002d38 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2202      	movs	r2, #2
 8002d30:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e014      	b.n	8002d62 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d102      	bne.n	8002d56 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f80b 	bl	8002d6c <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f004 f911 	bl	8006f82 <USB_DevDisconnect>

  return HAL_OK;
 8002d60:	2300      	movs	r3, #0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002d6c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b085      	sub	sp, #20
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	699b      	ldr	r3, [r3, #24]
 8002d8e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d9a:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <HAL_PCDEx_ActivateLPM+0x44>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	68fa      	ldr	r2, [r7, #12]
 8002da0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3714      	adds	r7, #20
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	10000003 	.word	0x10000003

08002db4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002dbc:	4b19      	ldr	r3, [pc, #100]	; (8002e24 <HAL_PWREx_ConfigSupply+0x70>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b04      	cmp	r3, #4
 8002dc6:	d00a      	beq.n	8002dde <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002dc8:	4b16      	ldr	r3, [pc, #88]	; (8002e24 <HAL_PWREx_ConfigSupply+0x70>)
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	429a      	cmp	r2, r3
 8002dd4:	d001      	beq.n	8002dda <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e01f      	b.n	8002e1a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	e01d      	b.n	8002e1a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002dde:	4b11      	ldr	r3, [pc, #68]	; (8002e24 <HAL_PWREx_ConfigSupply+0x70>)
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	f023 0207 	bic.w	r2, r3, #7
 8002de6:	490f      	ldr	r1, [pc, #60]	; (8002e24 <HAL_PWREx_ConfigSupply+0x70>)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002dee:	f7fe ff43 	bl	8001c78 <HAL_GetTick>
 8002df2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002df4:	e009      	b.n	8002e0a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002df6:	f7fe ff3f 	bl	8001c78 <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e04:	d901      	bls.n	8002e0a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e007      	b.n	8002e1a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002e0a:	4b06      	ldr	r3, [pc, #24]	; (8002e24 <HAL_PWREx_ConfigSupply+0x70>)
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e16:	d1ee      	bne.n	8002df6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3710      	adds	r7, #16
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	58024800 	.word	0x58024800

08002e28 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002e2c:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	4a04      	ldr	r2, [pc, #16]	; (8002e44 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002e32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e36:	60d3      	str	r3, [r2, #12]
}
 8002e38:	bf00      	nop
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	58024800 	.word	0x58024800

08002e48 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b08c      	sub	sp, #48	; 0x30
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e3ff      	b.n	800365a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0301 	and.w	r3, r3, #1
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 8087 	beq.w	8002f76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e68:	4b99      	ldr	r3, [pc, #612]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e70:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e72:	4b97      	ldr	r3, [pc, #604]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e76:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e7a:	2b10      	cmp	r3, #16
 8002e7c:	d007      	beq.n	8002e8e <HAL_RCC_OscConfig+0x46>
 8002e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e80:	2b18      	cmp	r3, #24
 8002e82:	d110      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x5e>
 8002e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	d10b      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e8e:	4b90      	ldr	r3, [pc, #576]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d06c      	beq.n	8002f74 <HAL_RCC_OscConfig+0x12c>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d168      	bne.n	8002f74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e3d9      	b.n	800365a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eae:	d106      	bne.n	8002ebe <HAL_RCC_OscConfig+0x76>
 8002eb0:	4b87      	ldr	r3, [pc, #540]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a86      	ldr	r2, [pc, #536]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002eb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eba:	6013      	str	r3, [r2, #0]
 8002ebc:	e02e      	b.n	8002f1c <HAL_RCC_OscConfig+0xd4>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10c      	bne.n	8002ee0 <HAL_RCC_OscConfig+0x98>
 8002ec6:	4b82      	ldr	r3, [pc, #520]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a81      	ldr	r2, [pc, #516]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002ecc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	4b7f      	ldr	r3, [pc, #508]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a7e      	ldr	r2, [pc, #504]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002ed8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002edc:	6013      	str	r3, [r2, #0]
 8002ede:	e01d      	b.n	8002f1c <HAL_RCC_OscConfig+0xd4>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ee8:	d10c      	bne.n	8002f04 <HAL_RCC_OscConfig+0xbc>
 8002eea:	4b79      	ldr	r3, [pc, #484]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a78      	ldr	r2, [pc, #480]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002ef0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ef4:	6013      	str	r3, [r2, #0]
 8002ef6:	4b76      	ldr	r3, [pc, #472]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a75      	ldr	r2, [pc, #468]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002efc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f00:	6013      	str	r3, [r2, #0]
 8002f02:	e00b      	b.n	8002f1c <HAL_RCC_OscConfig+0xd4>
 8002f04:	4b72      	ldr	r3, [pc, #456]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4a71      	ldr	r2, [pc, #452]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002f0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f0e:	6013      	str	r3, [r2, #0]
 8002f10:	4b6f      	ldr	r3, [pc, #444]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a6e      	ldr	r2, [pc, #440]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002f16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d013      	beq.n	8002f4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f24:	f7fe fea8 	bl	8001c78 <HAL_GetTick>
 8002f28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f2c:	f7fe fea4 	bl	8001c78 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b64      	cmp	r3, #100	; 0x64
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e38d      	b.n	800365a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f3e:	4b64      	ldr	r3, [pc, #400]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d0f0      	beq.n	8002f2c <HAL_RCC_OscConfig+0xe4>
 8002f4a:	e014      	b.n	8002f76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f4c:	f7fe fe94 	bl	8001c78 <HAL_GetTick>
 8002f50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f54:	f7fe fe90 	bl	8001c78 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b64      	cmp	r3, #100	; 0x64
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e379      	b.n	800365a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f66:	4b5a      	ldr	r3, [pc, #360]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d1f0      	bne.n	8002f54 <HAL_RCC_OscConfig+0x10c>
 8002f72:	e000      	b.n	8002f76 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 80ae 	beq.w	80030e0 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f84:	4b52      	ldr	r3, [pc, #328]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f8c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f8e:	4b50      	ldr	r3, [pc, #320]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f92:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002f94:	6a3b      	ldr	r3, [r7, #32]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d007      	beq.n	8002faa <HAL_RCC_OscConfig+0x162>
 8002f9a:	6a3b      	ldr	r3, [r7, #32]
 8002f9c:	2b18      	cmp	r3, #24
 8002f9e:	d13a      	bne.n	8003016 <HAL_RCC_OscConfig+0x1ce>
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d135      	bne.n	8003016 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002faa:	4b49      	ldr	r3, [pc, #292]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 0304 	and.w	r3, r3, #4
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d005      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x17a>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e34b      	b.n	800365a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc2:	f7fe fe87 	bl	8001cd4 <HAL_GetREVID>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	f241 0303 	movw	r3, #4099	; 0x1003
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d817      	bhi.n	8003000 <HAL_RCC_OscConfig+0x1b8>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	2b40      	cmp	r3, #64	; 0x40
 8002fd6:	d108      	bne.n	8002fea <HAL_RCC_OscConfig+0x1a2>
 8002fd8:	4b3d      	ldr	r3, [pc, #244]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002fe0:	4a3b      	ldr	r2, [pc, #236]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002fe2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fe6:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fe8:	e07a      	b.n	80030e0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fea:	4b39      	ldr	r3, [pc, #228]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	031b      	lsls	r3, r3, #12
 8002ff8:	4935      	ldr	r1, [pc, #212]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ffe:	e06f      	b.n	80030e0 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003000:	4b33      	ldr	r3, [pc, #204]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	691b      	ldr	r3, [r3, #16]
 800300c:	061b      	lsls	r3, r3, #24
 800300e:	4930      	ldr	r1, [pc, #192]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8003010:	4313      	orrs	r3, r2
 8003012:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003014:	e064      	b.n	80030e0 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d045      	beq.n	80030aa <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800301e:	4b2c      	ldr	r3, [pc, #176]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f023 0219 	bic.w	r2, r3, #25
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	4929      	ldr	r1, [pc, #164]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 800302c:	4313      	orrs	r3, r2
 800302e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003030:	f7fe fe22 	bl	8001c78 <HAL_GetTick>
 8003034:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003036:	e008      	b.n	800304a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003038:	f7fe fe1e 	bl	8001c78 <HAL_GetTick>
 800303c:	4602      	mov	r2, r0
 800303e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	2b02      	cmp	r3, #2
 8003044:	d901      	bls.n	800304a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	e307      	b.n	800365a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800304a:	4b21      	ldr	r3, [pc, #132]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	2b00      	cmp	r3, #0
 8003054:	d0f0      	beq.n	8003038 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003056:	f7fe fe3d 	bl	8001cd4 <HAL_GetREVID>
 800305a:	4602      	mov	r2, r0
 800305c:	f241 0303 	movw	r3, #4099	; 0x1003
 8003060:	429a      	cmp	r2, r3
 8003062:	d817      	bhi.n	8003094 <HAL_RCC_OscConfig+0x24c>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	2b40      	cmp	r3, #64	; 0x40
 800306a:	d108      	bne.n	800307e <HAL_RCC_OscConfig+0x236>
 800306c:	4b18      	ldr	r3, [pc, #96]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003074:	4a16      	ldr	r2, [pc, #88]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8003076:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800307a:	6053      	str	r3, [r2, #4]
 800307c:	e030      	b.n	80030e0 <HAL_RCC_OscConfig+0x298>
 800307e:	4b14      	ldr	r3, [pc, #80]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	031b      	lsls	r3, r3, #12
 800308c:	4910      	ldr	r1, [pc, #64]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 800308e:	4313      	orrs	r3, r2
 8003090:	604b      	str	r3, [r1, #4]
 8003092:	e025      	b.n	80030e0 <HAL_RCC_OscConfig+0x298>
 8003094:	4b0e      	ldr	r3, [pc, #56]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	061b      	lsls	r3, r3, #24
 80030a2:	490b      	ldr	r1, [pc, #44]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 80030a4:	4313      	orrs	r3, r2
 80030a6:	604b      	str	r3, [r1, #4]
 80030a8:	e01a      	b.n	80030e0 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030aa:	4b09      	ldr	r3, [pc, #36]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a08      	ldr	r2, [pc, #32]	; (80030d0 <HAL_RCC_OscConfig+0x288>)
 80030b0:	f023 0301 	bic.w	r3, r3, #1
 80030b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030b6:	f7fe fddf 	bl	8001c78 <HAL_GetTick>
 80030ba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030bc:	e00a      	b.n	80030d4 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030be:	f7fe fddb 	bl	8001c78 <HAL_GetTick>
 80030c2:	4602      	mov	r2, r0
 80030c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c6:	1ad3      	subs	r3, r2, r3
 80030c8:	2b02      	cmp	r3, #2
 80030ca:	d903      	bls.n	80030d4 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80030cc:	2303      	movs	r3, #3
 80030ce:	e2c4      	b.n	800365a <HAL_RCC_OscConfig+0x812>
 80030d0:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030d4:	4ba4      	ldr	r3, [pc, #656]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1ee      	bne.n	80030be <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0310 	and.w	r3, r3, #16
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 80a9 	beq.w	8003240 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030ee:	4b9e      	ldr	r3, [pc, #632]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030f6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80030f8:	4b9b      	ldr	r3, [pc, #620]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 80030fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	2b08      	cmp	r3, #8
 8003102:	d007      	beq.n	8003114 <HAL_RCC_OscConfig+0x2cc>
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	2b18      	cmp	r3, #24
 8003108:	d13a      	bne.n	8003180 <HAL_RCC_OscConfig+0x338>
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	f003 0303 	and.w	r3, r3, #3
 8003110:	2b01      	cmp	r3, #1
 8003112:	d135      	bne.n	8003180 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003114:	4b94      	ldr	r3, [pc, #592]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800311c:	2b00      	cmp	r3, #0
 800311e:	d005      	beq.n	800312c <HAL_RCC_OscConfig+0x2e4>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	2b80      	cmp	r3, #128	; 0x80
 8003126:	d001      	beq.n	800312c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e296      	b.n	800365a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800312c:	f7fe fdd2 	bl	8001cd4 <HAL_GetREVID>
 8003130:	4602      	mov	r2, r0
 8003132:	f241 0303 	movw	r3, #4099	; 0x1003
 8003136:	429a      	cmp	r2, r3
 8003138:	d817      	bhi.n	800316a <HAL_RCC_OscConfig+0x322>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a1b      	ldr	r3, [r3, #32]
 800313e:	2b20      	cmp	r3, #32
 8003140:	d108      	bne.n	8003154 <HAL_RCC_OscConfig+0x30c>
 8003142:	4b89      	ldr	r3, [pc, #548]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800314a:	4a87      	ldr	r2, [pc, #540]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 800314c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003150:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003152:	e075      	b.n	8003240 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003154:	4b84      	ldr	r3, [pc, #528]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a1b      	ldr	r3, [r3, #32]
 8003160:	069b      	lsls	r3, r3, #26
 8003162:	4981      	ldr	r1, [pc, #516]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 8003164:	4313      	orrs	r3, r2
 8003166:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003168:	e06a      	b.n	8003240 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800316a:	4b7f      	ldr	r3, [pc, #508]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	061b      	lsls	r3, r3, #24
 8003178:	497b      	ldr	r1, [pc, #492]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 800317a:	4313      	orrs	r3, r2
 800317c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800317e:	e05f      	b.n	8003240 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d042      	beq.n	800320e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003188:	4b77      	ldr	r3, [pc, #476]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a76      	ldr	r2, [pc, #472]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 800318e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003194:	f7fe fd70 	bl	8001c78 <HAL_GetTick>
 8003198:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800319c:	f7fe fd6c 	bl	8001c78 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e255      	b.n	800365a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80031ae:	4b6e      	ldr	r3, [pc, #440]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d0f0      	beq.n	800319c <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031ba:	f7fe fd8b 	bl	8001cd4 <HAL_GetREVID>
 80031be:	4602      	mov	r2, r0
 80031c0:	f241 0303 	movw	r3, #4099	; 0x1003
 80031c4:	429a      	cmp	r2, r3
 80031c6:	d817      	bhi.n	80031f8 <HAL_RCC_OscConfig+0x3b0>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	2b20      	cmp	r3, #32
 80031ce:	d108      	bne.n	80031e2 <HAL_RCC_OscConfig+0x39a>
 80031d0:	4b65      	ldr	r3, [pc, #404]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80031d8:	4a63      	ldr	r2, [pc, #396]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 80031da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80031de:	6053      	str	r3, [r2, #4]
 80031e0:	e02e      	b.n	8003240 <HAL_RCC_OscConfig+0x3f8>
 80031e2:	4b61      	ldr	r3, [pc, #388]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	069b      	lsls	r3, r3, #26
 80031f0:	495d      	ldr	r1, [pc, #372]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 80031f2:	4313      	orrs	r3, r2
 80031f4:	604b      	str	r3, [r1, #4]
 80031f6:	e023      	b.n	8003240 <HAL_RCC_OscConfig+0x3f8>
 80031f8:	4b5b      	ldr	r3, [pc, #364]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a1b      	ldr	r3, [r3, #32]
 8003204:	061b      	lsls	r3, r3, #24
 8003206:	4958      	ldr	r1, [pc, #352]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 8003208:	4313      	orrs	r3, r2
 800320a:	60cb      	str	r3, [r1, #12]
 800320c:	e018      	b.n	8003240 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800320e:	4b56      	ldr	r3, [pc, #344]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a55      	ldr	r2, [pc, #340]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 8003214:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003218:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321a:	f7fe fd2d 	bl	8001c78 <HAL_GetTick>
 800321e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8003222:	f7fe fd29 	bl	8001c78 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e212      	b.n	800365a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003234:	4b4c      	ldr	r3, [pc, #304]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1f0      	bne.n	8003222 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	2b00      	cmp	r3, #0
 800324a:	d036      	beq.n	80032ba <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d019      	beq.n	8003288 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003254:	4b44      	ldr	r3, [pc, #272]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 8003256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003258:	4a43      	ldr	r2, [pc, #268]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 800325a:	f043 0301 	orr.w	r3, r3, #1
 800325e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003260:	f7fe fd0a 	bl	8001c78 <HAL_GetTick>
 8003264:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003268:	f7fe fd06 	bl	8001c78 <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e1ef      	b.n	800365a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800327a:	4b3b      	ldr	r3, [pc, #236]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 800327c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d0f0      	beq.n	8003268 <HAL_RCC_OscConfig+0x420>
 8003286:	e018      	b.n	80032ba <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003288:	4b37      	ldr	r3, [pc, #220]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 800328a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800328c:	4a36      	ldr	r2, [pc, #216]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 800328e:	f023 0301 	bic.w	r3, r3, #1
 8003292:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003294:	f7fe fcf0 	bl	8001c78 <HAL_GetTick>
 8003298:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800329c:	f7fe fcec 	bl	8001c78 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b02      	cmp	r3, #2
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e1d5      	b.n	800365a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80032ae:	4b2e      	ldr	r3, [pc, #184]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 80032b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f0      	bne.n	800329c <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 0320 	and.w	r3, r3, #32
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d036      	beq.n	8003334 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d019      	beq.n	8003302 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032ce:	4b26      	ldr	r3, [pc, #152]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a25      	ldr	r2, [pc, #148]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 80032d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032d8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80032da:	f7fe fccd 	bl	8001c78 <HAL_GetTick>
 80032de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80032e2:	f7fe fcc9 	bl	8001c78 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e1b2      	b.n	800365a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80032f4:	4b1c      	ldr	r3, [pc, #112]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0f0      	beq.n	80032e2 <HAL_RCC_OscConfig+0x49a>
 8003300:	e018      	b.n	8003334 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003302:	4b19      	ldr	r3, [pc, #100]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a18      	ldr	r2, [pc, #96]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 8003308:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800330c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800330e:	f7fe fcb3 	bl	8001c78 <HAL_GetTick>
 8003312:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003314:	e008      	b.n	8003328 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003316:	f7fe fcaf 	bl	8001c78 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e198      	b.n	800365a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003328:	4b0f      	ldr	r3, [pc, #60]	; (8003368 <HAL_RCC_OscConfig+0x520>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d1f0      	bne.n	8003316 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 0304 	and.w	r3, r3, #4
 800333c:	2b00      	cmp	r3, #0
 800333e:	f000 8085 	beq.w	800344c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003342:	4b0a      	ldr	r3, [pc, #40]	; (800336c <HAL_RCC_OscConfig+0x524>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a09      	ldr	r2, [pc, #36]	; (800336c <HAL_RCC_OscConfig+0x524>)
 8003348:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800334c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800334e:	f7fe fc93 	bl	8001c78 <HAL_GetTick>
 8003352:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003354:	e00c      	b.n	8003370 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003356:	f7fe fc8f 	bl	8001c78 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b64      	cmp	r3, #100	; 0x64
 8003362:	d905      	bls.n	8003370 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e178      	b.n	800365a <HAL_RCC_OscConfig+0x812>
 8003368:	58024400 	.word	0x58024400
 800336c:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003370:	4b96      	ldr	r3, [pc, #600]	; (80035cc <HAL_RCC_OscConfig+0x784>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003378:	2b00      	cmp	r3, #0
 800337a:	d0ec      	beq.n	8003356 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d106      	bne.n	8003392 <HAL_RCC_OscConfig+0x54a>
 8003384:	4b92      	ldr	r3, [pc, #584]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 8003386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003388:	4a91      	ldr	r2, [pc, #580]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 800338a:	f043 0301 	orr.w	r3, r3, #1
 800338e:	6713      	str	r3, [r2, #112]	; 0x70
 8003390:	e02d      	b.n	80033ee <HAL_RCC_OscConfig+0x5a6>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d10c      	bne.n	80033b4 <HAL_RCC_OscConfig+0x56c>
 800339a:	4b8d      	ldr	r3, [pc, #564]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 800339c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339e:	4a8c      	ldr	r2, [pc, #560]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 80033a0:	f023 0301 	bic.w	r3, r3, #1
 80033a4:	6713      	str	r3, [r2, #112]	; 0x70
 80033a6:	4b8a      	ldr	r3, [pc, #552]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 80033a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033aa:	4a89      	ldr	r2, [pc, #548]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 80033ac:	f023 0304 	bic.w	r3, r3, #4
 80033b0:	6713      	str	r3, [r2, #112]	; 0x70
 80033b2:	e01c      	b.n	80033ee <HAL_RCC_OscConfig+0x5a6>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	2b05      	cmp	r3, #5
 80033ba:	d10c      	bne.n	80033d6 <HAL_RCC_OscConfig+0x58e>
 80033bc:	4b84      	ldr	r3, [pc, #528]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 80033be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c0:	4a83      	ldr	r2, [pc, #524]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 80033c2:	f043 0304 	orr.w	r3, r3, #4
 80033c6:	6713      	str	r3, [r2, #112]	; 0x70
 80033c8:	4b81      	ldr	r3, [pc, #516]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 80033ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033cc:	4a80      	ldr	r2, [pc, #512]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 80033ce:	f043 0301 	orr.w	r3, r3, #1
 80033d2:	6713      	str	r3, [r2, #112]	; 0x70
 80033d4:	e00b      	b.n	80033ee <HAL_RCC_OscConfig+0x5a6>
 80033d6:	4b7e      	ldr	r3, [pc, #504]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 80033d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033da:	4a7d      	ldr	r2, [pc, #500]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 80033dc:	f023 0301 	bic.w	r3, r3, #1
 80033e0:	6713      	str	r3, [r2, #112]	; 0x70
 80033e2:	4b7b      	ldr	r3, [pc, #492]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 80033e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033e6:	4a7a      	ldr	r2, [pc, #488]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 80033e8:	f023 0304 	bic.w	r3, r3, #4
 80033ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d015      	beq.n	8003422 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033f6:	f7fe fc3f 	bl	8001c78 <HAL_GetTick>
 80033fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033fc:	e00a      	b.n	8003414 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033fe:	f7fe fc3b 	bl	8001c78 <HAL_GetTick>
 8003402:	4602      	mov	r2, r0
 8003404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003406:	1ad3      	subs	r3, r2, r3
 8003408:	f241 3288 	movw	r2, #5000	; 0x1388
 800340c:	4293      	cmp	r3, r2
 800340e:	d901      	bls.n	8003414 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e122      	b.n	800365a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003414:	4b6e      	ldr	r3, [pc, #440]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 8003416:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003418:	f003 0302 	and.w	r3, r3, #2
 800341c:	2b00      	cmp	r3, #0
 800341e:	d0ee      	beq.n	80033fe <HAL_RCC_OscConfig+0x5b6>
 8003420:	e014      	b.n	800344c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003422:	f7fe fc29 	bl	8001c78 <HAL_GetTick>
 8003426:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003428:	e00a      	b.n	8003440 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800342a:	f7fe fc25 	bl	8001c78 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	f241 3288 	movw	r2, #5000	; 0x1388
 8003438:	4293      	cmp	r3, r2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e10c      	b.n	800365a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003440:	4b63      	ldr	r3, [pc, #396]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 8003442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003444:	f003 0302 	and.w	r3, r3, #2
 8003448:	2b00      	cmp	r3, #0
 800344a:	d1ee      	bne.n	800342a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 8101 	beq.w	8003658 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003456:	4b5e      	ldr	r3, [pc, #376]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800345e:	2b18      	cmp	r3, #24
 8003460:	f000 80bc 	beq.w	80035dc <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003468:	2b02      	cmp	r3, #2
 800346a:	f040 8095 	bne.w	8003598 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800346e:	4b58      	ldr	r3, [pc, #352]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a57      	ldr	r2, [pc, #348]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 8003474:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003478:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347a:	f7fe fbfd 	bl	8001c78 <HAL_GetTick>
 800347e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003480:	e008      	b.n	8003494 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003482:	f7fe fbf9 	bl	8001c78 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d901      	bls.n	8003494 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e0e2      	b.n	800365a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003494:	4b4e      	ldr	r3, [pc, #312]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1f0      	bne.n	8003482 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80034a0:	4b4b      	ldr	r3, [pc, #300]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 80034a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034a4:	4b4b      	ldr	r3, [pc, #300]	; (80035d4 <HAL_RCC_OscConfig+0x78c>)
 80034a6:	4013      	ands	r3, r2
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80034b0:	0112      	lsls	r2, r2, #4
 80034b2:	430a      	orrs	r2, r1
 80034b4:	4946      	ldr	r1, [pc, #280]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	628b      	str	r3, [r1, #40]	; 0x28
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034be:	3b01      	subs	r3, #1
 80034c0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034c8:	3b01      	subs	r3, #1
 80034ca:	025b      	lsls	r3, r3, #9
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d4:	3b01      	subs	r3, #1
 80034d6:	041b      	lsls	r3, r3, #16
 80034d8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80034dc:	431a      	orrs	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e2:	3b01      	subs	r3, #1
 80034e4:	061b      	lsls	r3, r3, #24
 80034e6:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80034ea:	4939      	ldr	r1, [pc, #228]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80034f0:	4b37      	ldr	r3, [pc, #220]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 80034f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f4:	4a36      	ldr	r2, [pc, #216]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 80034f6:	f023 0301 	bic.w	r3, r3, #1
 80034fa:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80034fc:	4b34      	ldr	r3, [pc, #208]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 80034fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003500:	4b35      	ldr	r3, [pc, #212]	; (80035d8 <HAL_RCC_OscConfig+0x790>)
 8003502:	4013      	ands	r3, r2
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003508:	00d2      	lsls	r2, r2, #3
 800350a:	4931      	ldr	r1, [pc, #196]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 800350c:	4313      	orrs	r3, r2
 800350e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003510:	4b2f      	ldr	r3, [pc, #188]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 8003512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003514:	f023 020c 	bic.w	r2, r3, #12
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	492c      	ldr	r1, [pc, #176]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 800351e:	4313      	orrs	r3, r2
 8003520:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003522:	4b2b      	ldr	r3, [pc, #172]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 8003524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003526:	f023 0202 	bic.w	r2, r3, #2
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800352e:	4928      	ldr	r1, [pc, #160]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 8003530:	4313      	orrs	r3, r2
 8003532:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003534:	4b26      	ldr	r3, [pc, #152]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 8003536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003538:	4a25      	ldr	r2, [pc, #148]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 800353a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800353e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003540:	4b23      	ldr	r3, [pc, #140]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 8003542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003544:	4a22      	ldr	r2, [pc, #136]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 8003546:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800354a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800354c:	4b20      	ldr	r3, [pc, #128]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 800354e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003550:	4a1f      	ldr	r2, [pc, #124]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 8003552:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003556:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8003558:	4b1d      	ldr	r3, [pc, #116]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 800355a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355c:	4a1c      	ldr	r2, [pc, #112]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 800355e:	f043 0301 	orr.w	r3, r3, #1
 8003562:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003564:	4b1a      	ldr	r3, [pc, #104]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a19      	ldr	r2, [pc, #100]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 800356a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800356e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003570:	f7fe fb82 	bl	8001c78 <HAL_GetTick>
 8003574:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003578:	f7fe fb7e 	bl	8001c78 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e067      	b.n	800365a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800358a:	4b11      	ldr	r3, [pc, #68]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0f0      	beq.n	8003578 <HAL_RCC_OscConfig+0x730>
 8003596:	e05f      	b.n	8003658 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003598:	4b0d      	ldr	r3, [pc, #52]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a0c      	ldr	r2, [pc, #48]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 800359e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a4:	f7fe fb68 	bl	8001c78 <HAL_GetTick>
 80035a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ac:	f7fe fb64 	bl	8001c78 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e04d      	b.n	800365a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035be:	4b04      	ldr	r3, [pc, #16]	; (80035d0 <HAL_RCC_OscConfig+0x788>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1f0      	bne.n	80035ac <HAL_RCC_OscConfig+0x764>
 80035ca:	e045      	b.n	8003658 <HAL_RCC_OscConfig+0x810>
 80035cc:	58024800 	.word	0x58024800
 80035d0:	58024400 	.word	0x58024400
 80035d4:	fffffc0c 	.word	0xfffffc0c
 80035d8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80035dc:	4b21      	ldr	r3, [pc, #132]	; (8003664 <HAL_RCC_OscConfig+0x81c>)
 80035de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80035e2:	4b20      	ldr	r3, [pc, #128]	; (8003664 <HAL_RCC_OscConfig+0x81c>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d031      	beq.n	8003654 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f003 0203 	and.w	r2, r3, #3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d12a      	bne.n	8003654 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	091b      	lsrs	r3, r3, #4
 8003602:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800360a:	429a      	cmp	r2, r3
 800360c:	d122      	bne.n	8003654 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003618:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800361a:	429a      	cmp	r2, r3
 800361c:	d11a      	bne.n	8003654 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	0a5b      	lsrs	r3, r3, #9
 8003622:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800362a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800362c:	429a      	cmp	r2, r3
 800362e:	d111      	bne.n	8003654 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	0c1b      	lsrs	r3, r3, #16
 8003634:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800363c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800363e:	429a      	cmp	r2, r3
 8003640:	d108      	bne.n	8003654 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	0e1b      	lsrs	r3, r3, #24
 8003646:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003650:	429a      	cmp	r2, r3
 8003652:	d001      	beq.n	8003658 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e000      	b.n	800365a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8003658:	2300      	movs	r3, #0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3730      	adds	r7, #48	; 0x30
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	58024400 	.word	0x58024400

08003668 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d101      	bne.n	800367c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e19c      	b.n	80039b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800367c:	4b8a      	ldr	r3, [pc, #552]	; (80038a8 <HAL_RCC_ClockConfig+0x240>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 030f 	and.w	r3, r3, #15
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	429a      	cmp	r2, r3
 8003688:	d910      	bls.n	80036ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800368a:	4b87      	ldr	r3, [pc, #540]	; (80038a8 <HAL_RCC_ClockConfig+0x240>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f023 020f 	bic.w	r2, r3, #15
 8003692:	4985      	ldr	r1, [pc, #532]	; (80038a8 <HAL_RCC_ClockConfig+0x240>)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	4313      	orrs	r3, r2
 8003698:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800369a:	4b83      	ldr	r3, [pc, #524]	; (80038a8 <HAL_RCC_ClockConfig+0x240>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d001      	beq.n	80036ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80036a8:	2301      	movs	r3, #1
 80036aa:	e184      	b.n	80039b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d010      	beq.n	80036da <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	691a      	ldr	r2, [r3, #16]
 80036bc:	4b7b      	ldr	r3, [pc, #492]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d908      	bls.n	80036da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80036c8:	4b78      	ldr	r3, [pc, #480]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 80036ca:	699b      	ldr	r3, [r3, #24]
 80036cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	4975      	ldr	r1, [pc, #468]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d010      	beq.n	8003708 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	695a      	ldr	r2, [r3, #20]
 80036ea:	4b70      	ldr	r3, [pc, #448]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d908      	bls.n	8003708 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80036f6:	4b6d      	ldr	r3, [pc, #436]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	496a      	ldr	r1, [pc, #424]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 8003704:	4313      	orrs	r3, r2
 8003706:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0310 	and.w	r3, r3, #16
 8003710:	2b00      	cmp	r3, #0
 8003712:	d010      	beq.n	8003736 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	699a      	ldr	r2, [r3, #24]
 8003718:	4b64      	ldr	r3, [pc, #400]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 800371a:	69db      	ldr	r3, [r3, #28]
 800371c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003720:	429a      	cmp	r2, r3
 8003722:	d908      	bls.n	8003736 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003724:	4b61      	ldr	r3, [pc, #388]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	495e      	ldr	r1, [pc, #376]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 8003732:	4313      	orrs	r3, r2
 8003734:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0320 	and.w	r3, r3, #32
 800373e:	2b00      	cmp	r3, #0
 8003740:	d010      	beq.n	8003764 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	69da      	ldr	r2, [r3, #28]
 8003746:	4b59      	ldr	r3, [pc, #356]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800374e:	429a      	cmp	r2, r3
 8003750:	d908      	bls.n	8003764 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003752:	4b56      	ldr	r3, [pc, #344]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	4953      	ldr	r1, [pc, #332]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 8003760:	4313      	orrs	r3, r2
 8003762:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d010      	beq.n	8003792 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	68da      	ldr	r2, [r3, #12]
 8003774:	4b4d      	ldr	r3, [pc, #308]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	f003 030f 	and.w	r3, r3, #15
 800377c:	429a      	cmp	r2, r3
 800377e:	d908      	bls.n	8003792 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003780:	4b4a      	ldr	r3, [pc, #296]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	f023 020f 	bic.w	r2, r3, #15
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	4947      	ldr	r1, [pc, #284]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 800378e:	4313      	orrs	r3, r2
 8003790:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	2b00      	cmp	r3, #0
 800379c:	d055      	beq.n	800384a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800379e:	4b43      	ldr	r3, [pc, #268]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 80037a0:	699b      	ldr	r3, [r3, #24]
 80037a2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	4940      	ldr	r1, [pc, #256]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 80037ac:	4313      	orrs	r3, r2
 80037ae:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	685b      	ldr	r3, [r3, #4]
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d107      	bne.n	80037c8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80037b8:	4b3c      	ldr	r3, [pc, #240]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d121      	bne.n	8003808 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e0f6      	b.n	80039b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	2b03      	cmp	r3, #3
 80037ce:	d107      	bne.n	80037e0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037d0:	4b36      	ldr	r3, [pc, #216]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d115      	bne.n	8003808 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	e0ea      	b.n	80039b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d107      	bne.n	80037f8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80037e8:	4b30      	ldr	r3, [pc, #192]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d109      	bne.n	8003808 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e0de      	b.n	80039b6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80037f8:	4b2c      	ldr	r3, [pc, #176]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	d101      	bne.n	8003808 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e0d6      	b.n	80039b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003808:	4b28      	ldr	r3, [pc, #160]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 800380a:	691b      	ldr	r3, [r3, #16]
 800380c:	f023 0207 	bic.w	r2, r3, #7
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	4925      	ldr	r1, [pc, #148]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 8003816:	4313      	orrs	r3, r2
 8003818:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800381a:	f7fe fa2d 	bl	8001c78 <HAL_GetTick>
 800381e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003820:	e00a      	b.n	8003838 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003822:	f7fe fa29 	bl	8001c78 <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003830:	4293      	cmp	r3, r2
 8003832:	d901      	bls.n	8003838 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e0be      	b.n	80039b6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003838:	4b1c      	ldr	r3, [pc, #112]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	00db      	lsls	r3, r3, #3
 8003846:	429a      	cmp	r2, r3
 8003848:	d1eb      	bne.n	8003822 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d010      	beq.n	8003878 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68da      	ldr	r2, [r3, #12]
 800385a:	4b14      	ldr	r3, [pc, #80]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	f003 030f 	and.w	r3, r3, #15
 8003862:	429a      	cmp	r2, r3
 8003864:	d208      	bcs.n	8003878 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003866:	4b11      	ldr	r3, [pc, #68]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	f023 020f 	bic.w	r2, r3, #15
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	68db      	ldr	r3, [r3, #12]
 8003872:	490e      	ldr	r1, [pc, #56]	; (80038ac <HAL_RCC_ClockConfig+0x244>)
 8003874:	4313      	orrs	r3, r2
 8003876:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003878:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <HAL_RCC_ClockConfig+0x240>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 030f 	and.w	r3, r3, #15
 8003880:	683a      	ldr	r2, [r7, #0]
 8003882:	429a      	cmp	r2, r3
 8003884:	d214      	bcs.n	80038b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003886:	4b08      	ldr	r3, [pc, #32]	; (80038a8 <HAL_RCC_ClockConfig+0x240>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f023 020f 	bic.w	r2, r3, #15
 800388e:	4906      	ldr	r1, [pc, #24]	; (80038a8 <HAL_RCC_ClockConfig+0x240>)
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	4313      	orrs	r3, r2
 8003894:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003896:	4b04      	ldr	r3, [pc, #16]	; (80038a8 <HAL_RCC_ClockConfig+0x240>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 030f 	and.w	r3, r3, #15
 800389e:	683a      	ldr	r2, [r7, #0]
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d005      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e086      	b.n	80039b6 <HAL_RCC_ClockConfig+0x34e>
 80038a8:	52002000 	.word	0x52002000
 80038ac:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d010      	beq.n	80038de <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	691a      	ldr	r2, [r3, #16]
 80038c0:	4b3f      	ldr	r3, [pc, #252]	; (80039c0 <HAL_RCC_ClockConfig+0x358>)
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d208      	bcs.n	80038de <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80038cc:	4b3c      	ldr	r3, [pc, #240]	; (80039c0 <HAL_RCC_ClockConfig+0x358>)
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	4939      	ldr	r1, [pc, #228]	; (80039c0 <HAL_RCC_ClockConfig+0x358>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0308 	and.w	r3, r3, #8
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d010      	beq.n	800390c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	695a      	ldr	r2, [r3, #20]
 80038ee:	4b34      	ldr	r3, [pc, #208]	; (80039c0 <HAL_RCC_ClockConfig+0x358>)
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80038f6:	429a      	cmp	r2, r3
 80038f8:	d208      	bcs.n	800390c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80038fa:	4b31      	ldr	r3, [pc, #196]	; (80039c0 <HAL_RCC_ClockConfig+0x358>)
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	492e      	ldr	r1, [pc, #184]	; (80039c0 <HAL_RCC_ClockConfig+0x358>)
 8003908:	4313      	orrs	r3, r2
 800390a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0310 	and.w	r3, r3, #16
 8003914:	2b00      	cmp	r3, #0
 8003916:	d010      	beq.n	800393a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	699a      	ldr	r2, [r3, #24]
 800391c:	4b28      	ldr	r3, [pc, #160]	; (80039c0 <HAL_RCC_ClockConfig+0x358>)
 800391e:	69db      	ldr	r3, [r3, #28]
 8003920:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003924:	429a      	cmp	r2, r3
 8003926:	d208      	bcs.n	800393a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003928:	4b25      	ldr	r3, [pc, #148]	; (80039c0 <HAL_RCC_ClockConfig+0x358>)
 800392a:	69db      	ldr	r3, [r3, #28]
 800392c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	699b      	ldr	r3, [r3, #24]
 8003934:	4922      	ldr	r1, [pc, #136]	; (80039c0 <HAL_RCC_ClockConfig+0x358>)
 8003936:	4313      	orrs	r3, r2
 8003938:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0320 	and.w	r3, r3, #32
 8003942:	2b00      	cmp	r3, #0
 8003944:	d010      	beq.n	8003968 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69da      	ldr	r2, [r3, #28]
 800394a:	4b1d      	ldr	r3, [pc, #116]	; (80039c0 <HAL_RCC_ClockConfig+0x358>)
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003952:	429a      	cmp	r2, r3
 8003954:	d208      	bcs.n	8003968 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003956:	4b1a      	ldr	r3, [pc, #104]	; (80039c0 <HAL_RCC_ClockConfig+0x358>)
 8003958:	6a1b      	ldr	r3, [r3, #32]
 800395a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	69db      	ldr	r3, [r3, #28]
 8003962:	4917      	ldr	r1, [pc, #92]	; (80039c0 <HAL_RCC_ClockConfig+0x358>)
 8003964:	4313      	orrs	r3, r2
 8003966:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003968:	f000 f834 	bl	80039d4 <HAL_RCC_GetSysClockFreq>
 800396c:	4601      	mov	r1, r0
 800396e:	4b14      	ldr	r3, [pc, #80]	; (80039c0 <HAL_RCC_ClockConfig+0x358>)
 8003970:	699b      	ldr	r3, [r3, #24]
 8003972:	0a1b      	lsrs	r3, r3, #8
 8003974:	f003 030f 	and.w	r3, r3, #15
 8003978:	4a12      	ldr	r2, [pc, #72]	; (80039c4 <HAL_RCC_ClockConfig+0x35c>)
 800397a:	5cd3      	ldrb	r3, [r2, r3]
 800397c:	f003 031f 	and.w	r3, r3, #31
 8003980:	fa21 f303 	lsr.w	r3, r1, r3
 8003984:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003986:	4b0e      	ldr	r3, [pc, #56]	; (80039c0 <HAL_RCC_ClockConfig+0x358>)
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	4a0d      	ldr	r2, [pc, #52]	; (80039c4 <HAL_RCC_ClockConfig+0x35c>)
 8003990:	5cd3      	ldrb	r3, [r2, r3]
 8003992:	f003 031f 	and.w	r3, r3, #31
 8003996:	693a      	ldr	r2, [r7, #16]
 8003998:	fa22 f303 	lsr.w	r3, r2, r3
 800399c:	4a0a      	ldr	r2, [pc, #40]	; (80039c8 <HAL_RCC_ClockConfig+0x360>)
 800399e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80039a0:	4a0a      	ldr	r2, [pc, #40]	; (80039cc <HAL_RCC_ClockConfig+0x364>)
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80039a6:	4b0a      	ldr	r3, [pc, #40]	; (80039d0 <HAL_RCC_ClockConfig+0x368>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fe f91a 	bl	8001be4 <HAL_InitTick>
 80039b0:	4603      	mov	r3, r0
 80039b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80039b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3718      	adds	r7, #24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	58024400 	.word	0x58024400
 80039c4:	080078dc 	.word	0x080078dc
 80039c8:	2400000c 	.word	0x2400000c
 80039cc:	24000008 	.word	0x24000008
 80039d0:	24000010 	.word	0x24000010

080039d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039d4:	b480      	push	{r7}
 80039d6:	b089      	sub	sp, #36	; 0x24
 80039d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039da:	4baf      	ldr	r3, [pc, #700]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039e2:	2b18      	cmp	r3, #24
 80039e4:	f200 814e 	bhi.w	8003c84 <HAL_RCC_GetSysClockFreq+0x2b0>
 80039e8:	a201      	add	r2, pc, #4	; (adr r2, 80039f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80039ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ee:	bf00      	nop
 80039f0:	08003a55 	.word	0x08003a55
 80039f4:	08003c85 	.word	0x08003c85
 80039f8:	08003c85 	.word	0x08003c85
 80039fc:	08003c85 	.word	0x08003c85
 8003a00:	08003c85 	.word	0x08003c85
 8003a04:	08003c85 	.word	0x08003c85
 8003a08:	08003c85 	.word	0x08003c85
 8003a0c:	08003c85 	.word	0x08003c85
 8003a10:	08003a7b 	.word	0x08003a7b
 8003a14:	08003c85 	.word	0x08003c85
 8003a18:	08003c85 	.word	0x08003c85
 8003a1c:	08003c85 	.word	0x08003c85
 8003a20:	08003c85 	.word	0x08003c85
 8003a24:	08003c85 	.word	0x08003c85
 8003a28:	08003c85 	.word	0x08003c85
 8003a2c:	08003c85 	.word	0x08003c85
 8003a30:	08003a81 	.word	0x08003a81
 8003a34:	08003c85 	.word	0x08003c85
 8003a38:	08003c85 	.word	0x08003c85
 8003a3c:	08003c85 	.word	0x08003c85
 8003a40:	08003c85 	.word	0x08003c85
 8003a44:	08003c85 	.word	0x08003c85
 8003a48:	08003c85 	.word	0x08003c85
 8003a4c:	08003c85 	.word	0x08003c85
 8003a50:	08003a87 	.word	0x08003a87
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a54:	4b90      	ldr	r3, [pc, #576]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0320 	and.w	r3, r3, #32
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d009      	beq.n	8003a74 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003a60:	4b8d      	ldr	r3, [pc, #564]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	08db      	lsrs	r3, r3, #3
 8003a66:	f003 0303 	and.w	r3, r3, #3
 8003a6a:	4a8c      	ldr	r2, [pc, #560]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003a6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a70:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003a72:	e10a      	b.n	8003c8a <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003a74:	4b89      	ldr	r3, [pc, #548]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003a76:	61bb      	str	r3, [r7, #24]
    break;
 8003a78:	e107      	b.n	8003c8a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003a7a:	4b89      	ldr	r3, [pc, #548]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003a7c:	61bb      	str	r3, [r7, #24]
    break;
 8003a7e:	e104      	b.n	8003c8a <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003a80:	4b88      	ldr	r3, [pc, #544]	; (8003ca4 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8003a82:	61bb      	str	r3, [r7, #24]
    break;
 8003a84:	e101      	b.n	8003c8a <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003a86:	4b84      	ldr	r3, [pc, #528]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a8a:	f003 0303 	and.w	r3, r3, #3
 8003a8e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003a90:	4b81      	ldr	r3, [pc, #516]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a94:	091b      	lsrs	r3, r3, #4
 8003a96:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a9a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003a9c:	4b7e      	ldr	r3, [pc, #504]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003aa6:	4b7c      	ldr	r3, [pc, #496]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aaa:	08db      	lsrs	r3, r3, #3
 8003aac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003ab0:	68fa      	ldr	r2, [r7, #12]
 8003ab2:	fb02 f303 	mul.w	r3, r2, r3
 8003ab6:	ee07 3a90 	vmov	s15, r3
 8003aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003abe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	f000 80da 	beq.w	8003c7e <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	d05a      	beq.n	8003b86 <HAL_RCC_GetSysClockFreq+0x1b2>
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d302      	bcc.n	8003ada <HAL_RCC_GetSysClockFreq+0x106>
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d078      	beq.n	8003bca <HAL_RCC_GetSysClockFreq+0x1f6>
 8003ad8:	e099      	b.n	8003c0e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ada:	4b6f      	ldr	r3, [pc, #444]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0320 	and.w	r3, r3, #32
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d02d      	beq.n	8003b42 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003ae6:	4b6c      	ldr	r3, [pc, #432]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	08db      	lsrs	r3, r3, #3
 8003aec:	f003 0303 	and.w	r3, r3, #3
 8003af0:	4a6a      	ldr	r2, [pc, #424]	; (8003c9c <HAL_RCC_GetSysClockFreq+0x2c8>)
 8003af2:	fa22 f303 	lsr.w	r3, r2, r3
 8003af6:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	ee07 3a90 	vmov	s15, r3
 8003afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	ee07 3a90 	vmov	s15, r3
 8003b08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b10:	4b61      	ldr	r3, [pc, #388]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b18:	ee07 3a90 	vmov	s15, r3
 8003b1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b20:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b24:	eddf 5a60 	vldr	s11, [pc, #384]	; 8003ca8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003b28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b3c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003b40:	e087      	b.n	8003c52 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	ee07 3a90 	vmov	s15, r3
 8003b48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b4c:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003cac <HAL_RCC_GetSysClockFreq+0x2d8>
 8003b50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b54:	4b50      	ldr	r3, [pc, #320]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b5c:	ee07 3a90 	vmov	s15, r3
 8003b60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b64:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b68:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8003ca8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003b6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b80:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003b84:	e065      	b.n	8003c52 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	ee07 3a90 	vmov	s15, r3
 8003b8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b90:	eddf 6a47 	vldr	s13, [pc, #284]	; 8003cb0 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003b94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b98:	4b3f      	ldr	r3, [pc, #252]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ba0:	ee07 3a90 	vmov	s15, r3
 8003ba4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ba8:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bac:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8003ca8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003bb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bc4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bc8:	e043      	b.n	8003c52 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	ee07 3a90 	vmov	s15, r3
 8003bd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bd4:	eddf 6a37 	vldr	s13, [pc, #220]	; 8003cb4 <HAL_RCC_GetSysClockFreq+0x2e0>
 8003bd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bdc:	4b2e      	ldr	r3, [pc, #184]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003be4:	ee07 3a90 	vmov	s15, r3
 8003be8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bec:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bf0:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8003ca8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003bf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c08:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c0c:	e021      	b.n	8003c52 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	ee07 3a90 	vmov	s15, r3
 8003c14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c18:	eddf 6a25 	vldr	s13, [pc, #148]	; 8003cb0 <HAL_RCC_GetSysClockFreq+0x2dc>
 8003c1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c20:	4b1d      	ldr	r3, [pc, #116]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c28:	ee07 3a90 	vmov	s15, r3
 8003c2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c30:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c34:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8003ca8 <HAL_RCC_GetSysClockFreq+0x2d4>
 8003c38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c4c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c50:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003c52:	4b11      	ldr	r3, [pc, #68]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8003c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c56:	0a5b      	lsrs	r3, r3, #9
 8003c58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c5c:	3301      	adds	r3, #1
 8003c5e:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	ee07 3a90 	vmov	s15, r3
 8003c66:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003c6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c76:	ee17 3a90 	vmov	r3, s15
 8003c7a:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003c7c:	e005      	b.n	8003c8a <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	61bb      	str	r3, [r7, #24]
    break;
 8003c82:	e002      	b.n	8003c8a <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8003c84:	4b06      	ldr	r3, [pc, #24]	; (8003ca0 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8003c86:	61bb      	str	r3, [r7, #24]
    break;
 8003c88:	bf00      	nop
  }

  return sysclockfreq;
 8003c8a:	69bb      	ldr	r3, [r7, #24]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3724      	adds	r7, #36	; 0x24
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	58024400 	.word	0x58024400
 8003c9c:	03d09000 	.word	0x03d09000
 8003ca0:	003d0900 	.word	0x003d0900
 8003ca4:	007a1200 	.word	0x007a1200
 8003ca8:	46000000 	.word	0x46000000
 8003cac:	4c742400 	.word	0x4c742400
 8003cb0:	4a742400 	.word	0x4a742400
 8003cb4:	4af42400 	.word	0x4af42400

08003cb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003cbe:	f7ff fe89 	bl	80039d4 <HAL_RCC_GetSysClockFreq>
 8003cc2:	4601      	mov	r1, r0
 8003cc4:	4b10      	ldr	r3, [pc, #64]	; (8003d08 <HAL_RCC_GetHCLKFreq+0x50>)
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	0a1b      	lsrs	r3, r3, #8
 8003cca:	f003 030f 	and.w	r3, r3, #15
 8003cce:	4a0f      	ldr	r2, [pc, #60]	; (8003d0c <HAL_RCC_GetHCLKFreq+0x54>)
 8003cd0:	5cd3      	ldrb	r3, [r2, r3]
 8003cd2:	f003 031f 	and.w	r3, r3, #31
 8003cd6:	fa21 f303 	lsr.w	r3, r1, r3
 8003cda:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003cdc:	4b0a      	ldr	r3, [pc, #40]	; (8003d08 <HAL_RCC_GetHCLKFreq+0x50>)
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	f003 030f 	and.w	r3, r3, #15
 8003ce4:	4a09      	ldr	r2, [pc, #36]	; (8003d0c <HAL_RCC_GetHCLKFreq+0x54>)
 8003ce6:	5cd3      	ldrb	r3, [r2, r3]
 8003ce8:	f003 031f 	and.w	r3, r3, #31
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	fa22 f303 	lsr.w	r3, r2, r3
 8003cf2:	4a07      	ldr	r2, [pc, #28]	; (8003d10 <HAL_RCC_GetHCLKFreq+0x58>)
 8003cf4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003cf6:	4a07      	ldr	r2, [pc, #28]	; (8003d14 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003cfc:	4b04      	ldr	r3, [pc, #16]	; (8003d10 <HAL_RCC_GetHCLKFreq+0x58>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	58024400 	.word	0x58024400
 8003d0c:	080078dc 	.word	0x080078dc
 8003d10:	2400000c 	.word	0x2400000c
 8003d14:	24000008 	.word	0x24000008

08003d18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003d1c:	f7ff ffcc 	bl	8003cb8 <HAL_RCC_GetHCLKFreq>
 8003d20:	4601      	mov	r1, r0
 8003d22:	4b06      	ldr	r3, [pc, #24]	; (8003d3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	091b      	lsrs	r3, r3, #4
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	4a04      	ldr	r2, [pc, #16]	; (8003d40 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d2e:	5cd3      	ldrb	r3, [r2, r3]
 8003d30:	f003 031f 	and.w	r3, r3, #31
 8003d34:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	58024400 	.word	0x58024400
 8003d40:	080078dc 	.word	0x080078dc

08003d44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003d48:	f7ff ffb6 	bl	8003cb8 <HAL_RCC_GetHCLKFreq>
 8003d4c:	4601      	mov	r1, r0
 8003d4e:	4b06      	ldr	r3, [pc, #24]	; (8003d68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d50:	69db      	ldr	r3, [r3, #28]
 8003d52:	0a1b      	lsrs	r3, r3, #8
 8003d54:	f003 0307 	and.w	r3, r3, #7
 8003d58:	4a04      	ldr	r2, [pc, #16]	; (8003d6c <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d5a:	5cd3      	ldrb	r3, [r2, r3]
 8003d5c:	f003 031f 	and.w	r3, r3, #31
 8003d60:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	58024400 	.word	0x58024400
 8003d6c:	080078dc 	.word	0x080078dc

08003d70 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d78:	2300      	movs	r3, #0
 8003d7a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d03d      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d94:	d013      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8003d96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d9a:	d802      	bhi.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d007      	beq.n	8003db0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003da0:	e01f      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8003da2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003da6:	d013      	beq.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8003da8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003dac:	d01c      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8003dae:	e018      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003db0:	4baf      	ldr	r3, [pc, #700]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db4:	4aae      	ldr	r2, [pc, #696]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003db6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003dbc:	e015      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	2102      	movs	r1, #2
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f001 f96f 	bl	80050a8 <RCCEx_PLL2_Config>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003dce:	e00c      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	3324      	adds	r3, #36	; 0x24
 8003dd4:	2102      	movs	r1, #2
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f001 fa18 	bl	800520c <RCCEx_PLL3_Config>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003de0:	e003      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	75fb      	strb	r3, [r7, #23]
      break;
 8003de6:	e000      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8003de8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dea:	7dfb      	ldrb	r3, [r7, #23]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d109      	bne.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003df0:	4b9f      	ldr	r3, [pc, #636]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003df2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dfc:	499c      	ldr	r1, [pc, #624]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	650b      	str	r3, [r1, #80]	; 0x50
 8003e02:	e001      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e04:	7dfb      	ldrb	r3, [r7, #23]
 8003e06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d03d      	beq.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e18:	2b04      	cmp	r3, #4
 8003e1a:	d826      	bhi.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8003e1c:	a201      	add	r2, pc, #4	; (adr r2, 8003e24 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8003e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e22:	bf00      	nop
 8003e24:	08003e39 	.word	0x08003e39
 8003e28:	08003e47 	.word	0x08003e47
 8003e2c:	08003e59 	.word	0x08003e59
 8003e30:	08003e71 	.word	0x08003e71
 8003e34:	08003e71 	.word	0x08003e71
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e38:	4b8d      	ldr	r3, [pc, #564]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3c:	4a8c      	ldr	r2, [pc, #560]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e44:	e015      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	3304      	adds	r3, #4
 8003e4a:	2100      	movs	r1, #0
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f001 f92b 	bl	80050a8 <RCCEx_PLL2_Config>
 8003e52:	4603      	mov	r3, r0
 8003e54:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e56:	e00c      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	3324      	adds	r3, #36	; 0x24
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f001 f9d4 	bl	800520c <RCCEx_PLL3_Config>
 8003e64:	4603      	mov	r3, r0
 8003e66:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003e68:	e003      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	75fb      	strb	r3, [r7, #23]
      break;
 8003e6e:	e000      	b.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 8003e70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e72:	7dfb      	ldrb	r3, [r7, #23]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d109      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003e78:	4b7d      	ldr	r3, [pc, #500]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e7c:	f023 0207 	bic.w	r2, r3, #7
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e84:	497a      	ldr	r1, [pc, #488]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	650b      	str	r3, [r1, #80]	; 0x50
 8003e8a:	e001      	b.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e8c:	7dfb      	ldrb	r3, [r7, #23]
 8003e8e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d03e      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea0:	2b80      	cmp	r3, #128	; 0x80
 8003ea2:	d01c      	beq.n	8003ede <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003ea4:	2b80      	cmp	r3, #128	; 0x80
 8003ea6:	d804      	bhi.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x142>
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d008      	beq.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003eac:	2b40      	cmp	r3, #64	; 0x40
 8003eae:	d00d      	beq.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003eb0:	e01e      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8003eb2:	2bc0      	cmp	r3, #192	; 0xc0
 8003eb4:	d01f      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x186>
 8003eb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eba:	d01e      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003ebc:	e018      	b.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ebe:	4b6c      	ldr	r3, [pc, #432]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec2:	4a6b      	ldr	r2, [pc, #428]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003ec4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ec8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003eca:	e017      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	3304      	adds	r3, #4
 8003ed0:	2100      	movs	r1, #0
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f001 f8e8 	bl	80050a8 <RCCEx_PLL2_Config>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003edc:	e00e      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	3324      	adds	r3, #36	; 0x24
 8003ee2:	2100      	movs	r1, #0
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f001 f991 	bl	800520c <RCCEx_PLL3_Config>
 8003eea:	4603      	mov	r3, r0
 8003eec:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003eee:	e005      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ef4:	e002      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003ef6:	bf00      	nop
 8003ef8:	e000      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 8003efa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003efc:	7dfb      	ldrb	r3, [r7, #23]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d109      	bne.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003f02:	4b5b      	ldr	r3, [pc, #364]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f06:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0e:	4958      	ldr	r1, [pc, #352]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	650b      	str	r3, [r1, #80]	; 0x50
 8003f14:	e001      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f16:	7dfb      	ldrb	r3, [r7, #23]
 8003f18:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d044      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f2c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f30:	d01f      	beq.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003f32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f36:	d805      	bhi.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d00a      	beq.n	8003f52 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003f3c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f40:	d00e      	beq.n	8003f60 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8003f42:	e01f      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8003f44:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003f48:	d01f      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x21a>
 8003f4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003f4e:	d01e      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8003f50:	e018      	b.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f52:	4b47      	ldr	r3, [pc, #284]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f56:	4a46      	ldr	r2, [pc, #280]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f5c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f5e:	e017      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3304      	adds	r3, #4
 8003f64:	2100      	movs	r1, #0
 8003f66:	4618      	mov	r0, r3
 8003f68:	f001 f89e 	bl	80050a8 <RCCEx_PLL2_Config>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8003f70:	e00e      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	3324      	adds	r3, #36	; 0x24
 8003f76:	2100      	movs	r1, #0
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f001 f947 	bl	800520c <RCCEx_PLL3_Config>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003f82:	e005      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	75fb      	strb	r3, [r7, #23]
      break;
 8003f88:	e002      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003f8a:	bf00      	nop
 8003f8c:	e000      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8003f8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f90:	7dfb      	ldrb	r3, [r7, #23]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10a      	bne.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003f96:	4b36      	ldr	r3, [pc, #216]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9a:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003fa4:	4932      	ldr	r1, [pc, #200]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	658b      	str	r3, [r1, #88]	; 0x58
 8003faa:	e001      	b.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fac:	7dfb      	ldrb	r3, [r7, #23]
 8003fae:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d044      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003fc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fc6:	d01f      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003fc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fcc:	d805      	bhi.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00a      	beq.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x278>
 8003fd2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003fd6:	d00e      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0x286>
 8003fd8:	e01f      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 8003fda:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003fde:	d01f      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003fe0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003fe4:	d01e      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003fe6:	e018      	b.n	800401a <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fe8:	4b21      	ldr	r3, [pc, #132]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fec:	4a20      	ldr	r2, [pc, #128]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8003fee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ff2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003ff4:	e017      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	3304      	adds	r3, #4
 8003ffa:	2100      	movs	r1, #0
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f001 f853 	bl	80050a8 <RCCEx_PLL2_Config>
 8004002:	4603      	mov	r3, r0
 8004004:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004006:	e00e      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	3324      	adds	r3, #36	; 0x24
 800400c:	2100      	movs	r1, #0
 800400e:	4618      	mov	r0, r3
 8004010:	f001 f8fc 	bl	800520c <RCCEx_PLL3_Config>
 8004014:	4603      	mov	r3, r0
 8004016:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004018:	e005      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	75fb      	strb	r3, [r7, #23]
      break;
 800401e:	e002      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004020:	bf00      	nop
 8004022:	e000      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8004024:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004026:	7dfb      	ldrb	r3, [r7, #23]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10a      	bne.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800402c:	4b10      	ldr	r3, [pc, #64]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800402e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004030:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800403a:	490d      	ldr	r1, [pc, #52]	; (8004070 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800403c:	4313      	orrs	r3, r2
 800403e:	658b      	str	r3, [r1, #88]	; 0x58
 8004040:	e001      	b.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004042:	7dfb      	ldrb	r3, [r7, #23]
 8004044:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d035      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004056:	2b10      	cmp	r3, #16
 8004058:	d00c      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800405a:	2b10      	cmp	r3, #16
 800405c:	d802      	bhi.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800405e:	2b00      	cmp	r3, #0
 8004060:	d01b      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0x32a>
 8004062:	e017      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x324>
 8004064:	2b20      	cmp	r3, #32
 8004066:	d00c      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x312>
 8004068:	2b30      	cmp	r3, #48	; 0x30
 800406a:	d018      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800406c:	e012      	b.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800406e:	bf00      	nop
 8004070:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004074:	4baf      	ldr	r3, [pc, #700]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004078:	4aae      	ldr	r2, [pc, #696]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800407a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800407e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004080:	e00e      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	3304      	adds	r3, #4
 8004086:	2102      	movs	r1, #2
 8004088:	4618      	mov	r0, r3
 800408a:	f001 f80d 	bl	80050a8 <RCCEx_PLL2_Config>
 800408e:	4603      	mov	r3, r0
 8004090:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8004092:	e005      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	75fb      	strb	r3, [r7, #23]
      break;
 8004098:	e002      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800409a:	bf00      	nop
 800409c:	e000      	b.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800409e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040a0:	7dfb      	ldrb	r3, [r7, #23]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d109      	bne.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80040a6:	4ba3      	ldr	r3, [pc, #652]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80040a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040aa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040b2:	49a0      	ldr	r1, [pc, #640]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80040b4:	4313      	orrs	r3, r2
 80040b6:	64cb      	str	r3, [r1, #76]	; 0x4c
 80040b8:	e001      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ba:	7dfb      	ldrb	r3, [r7, #23]
 80040bc:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d042      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040d2:	d01f      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 80040d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040d8:	d805      	bhi.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00a      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80040de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040e2:	d00e      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x392>
 80040e4:	e01f      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 80040e6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80040ea:	d01f      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80040ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040f0:	d01e      	beq.n	8004130 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 80040f2:	e018      	b.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040f4:	4b8f      	ldr	r3, [pc, #572]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80040f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f8:	4a8e      	ldr	r2, [pc, #568]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80040fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004100:	e017      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	3304      	adds	r3, #4
 8004106:	2100      	movs	r1, #0
 8004108:	4618      	mov	r0, r3
 800410a:	f000 ffcd 	bl	80050a8 <RCCEx_PLL2_Config>
 800410e:	4603      	mov	r3, r0
 8004110:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004112:	e00e      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	3324      	adds	r3, #36	; 0x24
 8004118:	2100      	movs	r1, #0
 800411a:	4618      	mov	r0, r3
 800411c:	f001 f876 	bl	800520c <RCCEx_PLL3_Config>
 8004120:	4603      	mov	r3, r0
 8004122:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004124:	e005      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	75fb      	strb	r3, [r7, #23]
      break;
 800412a:	e002      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800412c:	bf00      	nop
 800412e:	e000      	b.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8004130:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004132:	7dfb      	ldrb	r3, [r7, #23]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d109      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004138:	4b7e      	ldr	r3, [pc, #504]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800413a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800413c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004144:	497b      	ldr	r1, [pc, #492]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004146:	4313      	orrs	r3, r2
 8004148:	650b      	str	r3, [r1, #80]	; 0x50
 800414a:	e001      	b.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800414c:	7dfb      	ldrb	r3, [r7, #23]
 800414e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004158:	2b00      	cmp	r3, #0
 800415a:	d042      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004160:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004164:	d01b      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004166:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800416a:	d805      	bhi.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800416c:	2b00      	cmp	r3, #0
 800416e:	d022      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x446>
 8004170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004174:	d00a      	beq.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8004176:	e01b      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x440>
 8004178:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800417c:	d01d      	beq.n	80041ba <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800417e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004182:	d01c      	beq.n	80041be <HAL_RCCEx_PeriphCLKConfig+0x44e>
 8004184:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004188:	d01b      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800418a:	e011      	b.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	3304      	adds	r3, #4
 8004190:	2101      	movs	r1, #1
 8004192:	4618      	mov	r0, r3
 8004194:	f000 ff88 	bl	80050a8 <RCCEx_PLL2_Config>
 8004198:	4603      	mov	r3, r0
 800419a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800419c:	e012      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	3324      	adds	r3, #36	; 0x24
 80041a2:	2101      	movs	r1, #1
 80041a4:	4618      	mov	r0, r3
 80041a6:	f001 f831 	bl	800520c <RCCEx_PLL3_Config>
 80041aa:	4603      	mov	r3, r0
 80041ac:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80041ae:	e009      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	75fb      	strb	r3, [r7, #23]
      break;
 80041b4:	e006      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80041b6:	bf00      	nop
 80041b8:	e004      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80041ba:	bf00      	nop
 80041bc:	e002      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80041be:	bf00      	nop
 80041c0:	e000      	b.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 80041c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041c4:	7dfb      	ldrb	r3, [r7, #23]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d109      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80041ca:	4b5a      	ldr	r3, [pc, #360]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80041cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ce:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041d6:	4957      	ldr	r1, [pc, #348]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80041d8:	4313      	orrs	r3, r2
 80041da:	650b      	str	r3, [r1, #80]	; 0x50
 80041dc:	e001      	b.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041de:	7dfb      	ldrb	r3, [r7, #23]
 80041e0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d044      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80041f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041f8:	d01b      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 80041fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041fe:	d805      	bhi.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8004200:	2b00      	cmp	r3, #0
 8004202:	d022      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004204:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004208:	d00a      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800420a:	e01b      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800420c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004210:	d01d      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004212:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004216:	d01c      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 8004218:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800421c:	d01b      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800421e:	e011      	b.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3304      	adds	r3, #4
 8004224:	2101      	movs	r1, #1
 8004226:	4618      	mov	r0, r3
 8004228:	f000 ff3e 	bl	80050a8 <RCCEx_PLL2_Config>
 800422c:	4603      	mov	r3, r0
 800422e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004230:	e012      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	3324      	adds	r3, #36	; 0x24
 8004236:	2101      	movs	r1, #1
 8004238:	4618      	mov	r0, r3
 800423a:	f000 ffe7 	bl	800520c <RCCEx_PLL3_Config>
 800423e:	4603      	mov	r3, r0
 8004240:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8004242:	e009      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	75fb      	strb	r3, [r7, #23]
      break;
 8004248:	e006      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800424a:	bf00      	nop
 800424c:	e004      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800424e:	bf00      	nop
 8004250:	e002      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004252:	bf00      	nop
 8004254:	e000      	b.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 8004256:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004258:	7dfb      	ldrb	r3, [r7, #23]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10a      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800425e:	4b35      	ldr	r3, [pc, #212]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004262:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800426c:	4931      	ldr	r1, [pc, #196]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800426e:	4313      	orrs	r3, r2
 8004270:	658b      	str	r3, [r1, #88]	; 0x58
 8004272:	e001      	b.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004274:	7dfb      	ldrb	r3, [r7, #23]
 8004276:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004280:	2b00      	cmp	r3, #0
 8004282:	d02d      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004288:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800428c:	d005      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800428e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004292:	d009      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x538>
 8004294:	2b00      	cmp	r3, #0
 8004296:	d013      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8004298:	e00f      	b.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800429a:	4b26      	ldr	r3, [pc, #152]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800429c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429e:	4a25      	ldr	r2, [pc, #148]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80042a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80042a6:	e00c      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	3304      	adds	r3, #4
 80042ac:	2101      	movs	r1, #1
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 fefa 	bl	80050a8 <RCCEx_PLL2_Config>
 80042b4:	4603      	mov	r3, r0
 80042b6:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80042b8:	e003      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	75fb      	strb	r3, [r7, #23]
      break;
 80042be:	e000      	b.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 80042c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042c2:	7dfb      	ldrb	r3, [r7, #23]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d109      	bne.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80042c8:	4b1a      	ldr	r3, [pc, #104]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80042ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042cc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042d4:	4917      	ldr	r1, [pc, #92]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	650b      	str	r3, [r1, #80]	; 0x50
 80042da:	e001      	b.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042dc:	7dfb      	ldrb	r3, [r7, #23]
 80042de:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d035      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f0:	2b03      	cmp	r3, #3
 80042f2:	d81b      	bhi.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 80042f4:	a201      	add	r2, pc, #4	; (adr r2, 80042fc <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 80042f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fa:	bf00      	nop
 80042fc:	08004339 	.word	0x08004339
 8004300:	0800430d 	.word	0x0800430d
 8004304:	0800431b 	.word	0x0800431b
 8004308:	08004339 	.word	0x08004339
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800430c:	4b09      	ldr	r3, [pc, #36]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800430e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004310:	4a08      	ldr	r2, [pc, #32]	; (8004334 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8004312:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004316:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8004318:	e00f      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	3304      	adds	r3, #4
 800431e:	2102      	movs	r1, #2
 8004320:	4618      	mov	r0, r3
 8004322:	f000 fec1 	bl	80050a8 <RCCEx_PLL2_Config>
 8004326:	4603      	mov	r3, r0
 8004328:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800432a:	e006      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800432c:	2301      	movs	r3, #1
 800432e:	75fb      	strb	r3, [r7, #23]
      break;
 8004330:	e003      	b.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8004332:	bf00      	nop
 8004334:	58024400 	.word	0x58024400
      break;
 8004338:	bf00      	nop
    }

    if(ret == HAL_OK)
 800433a:	7dfb      	ldrb	r3, [r7, #23]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d109      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004340:	4bba      	ldr	r3, [pc, #744]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004344:	f023 0203 	bic.w	r2, r3, #3
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800434c:	49b7      	ldr	r1, [pc, #732]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800434e:	4313      	orrs	r3, r2
 8004350:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004352:	e001      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004354:	7dfb      	ldrb	r3, [r7, #23]
 8004356:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 8086 	beq.w	8004472 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004366:	4bb2      	ldr	r3, [pc, #712]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4ab1      	ldr	r2, [pc, #708]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800436c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004370:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004372:	f7fd fc81 	bl	8001c78 <HAL_GetTick>
 8004376:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004378:	e009      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800437a:	f7fd fc7d 	bl	8001c78 <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b64      	cmp	r3, #100	; 0x64
 8004386:	d902      	bls.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	75fb      	strb	r3, [r7, #23]
        break;
 800438c:	e005      	b.n	800439a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800438e:	4ba8      	ldr	r3, [pc, #672]	; (8004630 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004396:	2b00      	cmp	r3, #0
 8004398:	d0ef      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800439a:	7dfb      	ldrb	r3, [r7, #23]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d166      	bne.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80043a0:	4ba2      	ldr	r3, [pc, #648]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80043a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043aa:	4053      	eors	r3, r2
 80043ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d013      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043b4:	4b9d      	ldr	r3, [pc, #628]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80043b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043bc:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043be:	4b9b      	ldr	r3, [pc, #620]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80043c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c2:	4a9a      	ldr	r2, [pc, #616]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80043c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043c8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043ca:	4b98      	ldr	r3, [pc, #608]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80043cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ce:	4a97      	ldr	r2, [pc, #604]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80043d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043d4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80043d6:	4a95      	ldr	r2, [pc, #596]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043e6:	d115      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e8:	f7fd fc46 	bl	8001c78 <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80043ee:	e00b      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043f0:	f7fd fc42 	bl	8001c78 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80043fe:	4293      	cmp	r3, r2
 8004400:	d902      	bls.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	75fb      	strb	r3, [r7, #23]
            break;
 8004406:	e005      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004408:	4b88      	ldr	r3, [pc, #544]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800440a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	2b00      	cmp	r3, #0
 8004412:	d0ed      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8004414:	7dfb      	ldrb	r3, [r7, #23]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d126      	bne.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004420:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004424:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004428:	d10d      	bne.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800442a:	4b80      	ldr	r3, [pc, #512]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004438:	0919      	lsrs	r1, r3, #4
 800443a:	4b7e      	ldr	r3, [pc, #504]	; (8004634 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800443c:	400b      	ands	r3, r1
 800443e:	497b      	ldr	r1, [pc, #492]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004440:	4313      	orrs	r3, r2
 8004442:	610b      	str	r3, [r1, #16]
 8004444:	e005      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 8004446:	4b79      	ldr	r3, [pc, #484]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	4a78      	ldr	r2, [pc, #480]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800444c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004450:	6113      	str	r3, [r2, #16]
 8004452:	4b76      	ldr	r3, [pc, #472]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004454:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800445c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004460:	4972      	ldr	r1, [pc, #456]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004462:	4313      	orrs	r3, r2
 8004464:	670b      	str	r3, [r1, #112]	; 0x70
 8004466:	e004      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004468:	7dfb      	ldrb	r3, [r7, #23]
 800446a:	75bb      	strb	r3, [r7, #22]
 800446c:	e001      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800446e:	7dfb      	ldrb	r3, [r7, #23]
 8004470:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d07d      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004482:	2b28      	cmp	r3, #40	; 0x28
 8004484:	d866      	bhi.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 8004486:	a201      	add	r2, pc, #4	; (adr r2, 800448c <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8004488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800448c:	0800455b 	.word	0x0800455b
 8004490:	08004555 	.word	0x08004555
 8004494:	08004555 	.word	0x08004555
 8004498:	08004555 	.word	0x08004555
 800449c:	08004555 	.word	0x08004555
 80044a0:	08004555 	.word	0x08004555
 80044a4:	08004555 	.word	0x08004555
 80044a8:	08004555 	.word	0x08004555
 80044ac:	08004531 	.word	0x08004531
 80044b0:	08004555 	.word	0x08004555
 80044b4:	08004555 	.word	0x08004555
 80044b8:	08004555 	.word	0x08004555
 80044bc:	08004555 	.word	0x08004555
 80044c0:	08004555 	.word	0x08004555
 80044c4:	08004555 	.word	0x08004555
 80044c8:	08004555 	.word	0x08004555
 80044cc:	08004543 	.word	0x08004543
 80044d0:	08004555 	.word	0x08004555
 80044d4:	08004555 	.word	0x08004555
 80044d8:	08004555 	.word	0x08004555
 80044dc:	08004555 	.word	0x08004555
 80044e0:	08004555 	.word	0x08004555
 80044e4:	08004555 	.word	0x08004555
 80044e8:	08004555 	.word	0x08004555
 80044ec:	0800455b 	.word	0x0800455b
 80044f0:	08004555 	.word	0x08004555
 80044f4:	08004555 	.word	0x08004555
 80044f8:	08004555 	.word	0x08004555
 80044fc:	08004555 	.word	0x08004555
 8004500:	08004555 	.word	0x08004555
 8004504:	08004555 	.word	0x08004555
 8004508:	08004555 	.word	0x08004555
 800450c:	0800455b 	.word	0x0800455b
 8004510:	08004555 	.word	0x08004555
 8004514:	08004555 	.word	0x08004555
 8004518:	08004555 	.word	0x08004555
 800451c:	08004555 	.word	0x08004555
 8004520:	08004555 	.word	0x08004555
 8004524:	08004555 	.word	0x08004555
 8004528:	08004555 	.word	0x08004555
 800452c:	0800455b 	.word	0x0800455b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	3304      	adds	r3, #4
 8004534:	2101      	movs	r1, #1
 8004536:	4618      	mov	r0, r3
 8004538:	f000 fdb6 	bl	80050a8 <RCCEx_PLL2_Config>
 800453c:	4603      	mov	r3, r0
 800453e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004540:	e00c      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	3324      	adds	r3, #36	; 0x24
 8004546:	2101      	movs	r1, #1
 8004548:	4618      	mov	r0, r3
 800454a:	f000 fe5f 	bl	800520c <RCCEx_PLL3_Config>
 800454e:	4603      	mov	r3, r0
 8004550:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8004552:	e003      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	75fb      	strb	r3, [r7, #23]
      break;
 8004558:	e000      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800455a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800455c:	7dfb      	ldrb	r3, [r7, #23]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d109      	bne.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004562:	4b32      	ldr	r3, [pc, #200]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004566:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800456e:	492f      	ldr	r1, [pc, #188]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8004570:	4313      	orrs	r3, r2
 8004572:	654b      	str	r3, [r1, #84]	; 0x54
 8004574:	e001      	b.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004576:	7dfb      	ldrb	r3, [r7, #23]
 8004578:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d037      	beq.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800458a:	2b05      	cmp	r3, #5
 800458c:	d820      	bhi.n	80045d0 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800458e:	a201      	add	r2, pc, #4	; (adr r2, 8004594 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8004590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004594:	080045d7 	.word	0x080045d7
 8004598:	080045ad 	.word	0x080045ad
 800459c:	080045bf 	.word	0x080045bf
 80045a0:	080045d7 	.word	0x080045d7
 80045a4:	080045d7 	.word	0x080045d7
 80045a8:	080045d7 	.word	0x080045d7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	3304      	adds	r3, #4
 80045b0:	2101      	movs	r1, #1
 80045b2:	4618      	mov	r0, r3
 80045b4:	f000 fd78 	bl	80050a8 <RCCEx_PLL2_Config>
 80045b8:	4603      	mov	r3, r0
 80045ba:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80045bc:	e00c      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	3324      	adds	r3, #36	; 0x24
 80045c2:	2101      	movs	r1, #1
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 fe21 	bl	800520c <RCCEx_PLL3_Config>
 80045ca:	4603      	mov	r3, r0
 80045cc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80045ce:	e003      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	75fb      	strb	r3, [r7, #23]
      break;
 80045d4:	e000      	b.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 80045d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80045d8:	7dfb      	ldrb	r3, [r7, #23]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d109      	bne.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80045de:	4b13      	ldr	r3, [pc, #76]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80045e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e2:	f023 0207 	bic.w	r2, r3, #7
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045ea:	4910      	ldr	r1, [pc, #64]	; (800462c <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	654b      	str	r3, [r1, #84]	; 0x54
 80045f0:	e001      	b.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045f2:	7dfb      	ldrb	r3, [r7, #23]
 80045f4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0304 	and.w	r3, r3, #4
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d040      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004608:	2b05      	cmp	r3, #5
 800460a:	d827      	bhi.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800460c:	a201      	add	r2, pc, #4	; (adr r2, 8004614 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800460e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004612:	bf00      	nop
 8004614:	08004663 	.word	0x08004663
 8004618:	08004639 	.word	0x08004639
 800461c:	0800464b 	.word	0x0800464b
 8004620:	08004663 	.word	0x08004663
 8004624:	08004663 	.word	0x08004663
 8004628:	08004663 	.word	0x08004663
 800462c:	58024400 	.word	0x58024400
 8004630:	58024800 	.word	0x58024800
 8004634:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	3304      	adds	r3, #4
 800463c:	2101      	movs	r1, #1
 800463e:	4618      	mov	r0, r3
 8004640:	f000 fd32 	bl	80050a8 <RCCEx_PLL2_Config>
 8004644:	4603      	mov	r3, r0
 8004646:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8004648:	e00c      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	3324      	adds	r3, #36	; 0x24
 800464e:	2101      	movs	r1, #1
 8004650:	4618      	mov	r0, r3
 8004652:	f000 fddb 	bl	800520c <RCCEx_PLL3_Config>
 8004656:	4603      	mov	r3, r0
 8004658:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800465a:	e003      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	75fb      	strb	r3, [r7, #23]
      break;
 8004660:	e000      	b.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8004662:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004664:	7dfb      	ldrb	r3, [r7, #23]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d10a      	bne.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800466a:	4bb2      	ldr	r3, [pc, #712]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800466c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800466e:	f023 0207 	bic.w	r2, r3, #7
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004678:	49ae      	ldr	r1, [pc, #696]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800467a:	4313      	orrs	r3, r2
 800467c:	658b      	str	r3, [r1, #88]	; 0x58
 800467e:	e001      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004680:	7dfb      	ldrb	r3, [r7, #23]
 8004682:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0320 	and.w	r3, r3, #32
 800468c:	2b00      	cmp	r3, #0
 800468e:	d044      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004696:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800469a:	d01b      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800469c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046a0:	d805      	bhi.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d022      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80046a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046aa:	d00a      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x952>
 80046ac:	e01b      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 80046ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b2:	d01d      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 80046b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80046b8:	d01c      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x984>
 80046ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80046be:	d01b      	beq.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x988>
 80046c0:	e011      	b.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	3304      	adds	r3, #4
 80046c6:	2100      	movs	r1, #0
 80046c8:	4618      	mov	r0, r3
 80046ca:	f000 fced 	bl	80050a8 <RCCEx_PLL2_Config>
 80046ce:	4603      	mov	r3, r0
 80046d0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80046d2:	e012      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3324      	adds	r3, #36	; 0x24
 80046d8:	2102      	movs	r1, #2
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 fd96 	bl	800520c <RCCEx_PLL3_Config>
 80046e0:	4603      	mov	r3, r0
 80046e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80046e4:	e009      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	75fb      	strb	r3, [r7, #23]
      break;
 80046ea:	e006      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80046ec:	bf00      	nop
 80046ee:	e004      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80046f0:	bf00      	nop
 80046f2:	e002      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80046f4:	bf00      	nop
 80046f6:	e000      	b.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 80046f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046fa:	7dfb      	ldrb	r3, [r7, #23]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d10a      	bne.n	8004716 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004700:	4b8c      	ldr	r3, [pc, #560]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004704:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800470e:	4989      	ldr	r1, [pc, #548]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004710:	4313      	orrs	r3, r2
 8004712:	654b      	str	r3, [r1, #84]	; 0x54
 8004714:	e001      	b.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004716:	7dfb      	ldrb	r3, [r7, #23]
 8004718:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004722:	2b00      	cmp	r3, #0
 8004724:	d044      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800472c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004730:	d01b      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8004732:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004736:	d805      	bhi.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8004738:	2b00      	cmp	r3, #0
 800473a:	d022      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800473c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004740:	d00a      	beq.n	8004758 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8004742:	e01b      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8004744:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004748:	d01d      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800474a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800474e:	d01c      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8004750:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004754:	d01b      	beq.n	800478e <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8004756:	e011      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	3304      	adds	r3, #4
 800475c:	2100      	movs	r1, #0
 800475e:	4618      	mov	r0, r3
 8004760:	f000 fca2 	bl	80050a8 <RCCEx_PLL2_Config>
 8004764:	4603      	mov	r3, r0
 8004766:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004768:	e012      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	3324      	adds	r3, #36	; 0x24
 800476e:	2102      	movs	r1, #2
 8004770:	4618      	mov	r0, r3
 8004772:	f000 fd4b 	bl	800520c <RCCEx_PLL3_Config>
 8004776:	4603      	mov	r3, r0
 8004778:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800477a:	e009      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	75fb      	strb	r3, [r7, #23]
      break;
 8004780:	e006      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004782:	bf00      	nop
 8004784:	e004      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8004786:	bf00      	nop
 8004788:	e002      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800478a:	bf00      	nop
 800478c:	e000      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800478e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004790:	7dfb      	ldrb	r3, [r7, #23]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d10a      	bne.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004796:	4b67      	ldr	r3, [pc, #412]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800479a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047a4:	4963      	ldr	r1, [pc, #396]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	658b      	str	r3, [r1, #88]	; 0x58
 80047aa:	e001      	b.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ac:	7dfb      	ldrb	r3, [r7, #23]
 80047ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d044      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80047c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047c6:	d01b      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 80047c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047cc:	d805      	bhi.n	80047da <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d022      	beq.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 80047d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047d6:	d00a      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80047d8:	e01b      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 80047da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047de:	d01d      	beq.n	800481c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80047e0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80047e4:	d01c      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 80047e6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80047ea:	d01b      	beq.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 80047ec:	e011      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	3304      	adds	r3, #4
 80047f2:	2100      	movs	r1, #0
 80047f4:	4618      	mov	r0, r3
 80047f6:	f000 fc57 	bl	80050a8 <RCCEx_PLL2_Config>
 80047fa:	4603      	mov	r3, r0
 80047fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80047fe:	e012      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	3324      	adds	r3, #36	; 0x24
 8004804:	2102      	movs	r1, #2
 8004806:	4618      	mov	r0, r3
 8004808:	f000 fd00 	bl	800520c <RCCEx_PLL3_Config>
 800480c:	4603      	mov	r3, r0
 800480e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8004810:	e009      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	75fb      	strb	r3, [r7, #23]
      break;
 8004816:	e006      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004818:	bf00      	nop
 800481a:	e004      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800481c:	bf00      	nop
 800481e:	e002      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004820:	bf00      	nop
 8004822:	e000      	b.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8004824:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004826:	7dfb      	ldrb	r3, [r7, #23]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10a      	bne.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800482c:	4b41      	ldr	r3, [pc, #260]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800482e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004830:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800483a:	493e      	ldr	r1, [pc, #248]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800483c:	4313      	orrs	r3, r2
 800483e:	658b      	str	r3, [r1, #88]	; 0x58
 8004840:	e001      	b.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004842:	7dfb      	ldrb	r3, [r7, #23]
 8004844:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 0308 	and.w	r3, r3, #8
 800484e:	2b00      	cmp	r3, #0
 8004850:	d01a      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800485c:	d10a      	bne.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	3324      	adds	r3, #36	; 0x24
 8004862:	2102      	movs	r1, #2
 8004864:	4618      	mov	r0, r3
 8004866:	f000 fcd1 	bl	800520c <RCCEx_PLL3_Config>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004874:	4b2f      	ldr	r3, [pc, #188]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004876:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004878:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004882:	492c      	ldr	r1, [pc, #176]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004884:	4313      	orrs	r3, r2
 8004886:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0310 	and.w	r3, r3, #16
 8004890:	2b00      	cmp	r3, #0
 8004892:	d01a      	beq.n	80048ca <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800489a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800489e:	d10a      	bne.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	3324      	adds	r3, #36	; 0x24
 80048a4:	2102      	movs	r1, #2
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 fcb0 	bl	800520c <RCCEx_PLL3_Config>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d001      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80048b6:	4b1f      	ldr	r3, [pc, #124]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80048b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048c4:	491b      	ldr	r1, [pc, #108]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d032      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80048dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048e0:	d00d      	beq.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 80048e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048e6:	d016      	beq.n	8004916 <HAL_RCCEx_PeriphCLKConfig+0xba6>
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d111      	bne.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	3304      	adds	r3, #4
 80048f0:	2100      	movs	r1, #0
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 fbd8 	bl	80050a8 <RCCEx_PLL2_Config>
 80048f8:	4603      	mov	r3, r0
 80048fa:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80048fc:	e00c      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	3324      	adds	r3, #36	; 0x24
 8004902:	2102      	movs	r1, #2
 8004904:	4618      	mov	r0, r3
 8004906:	f000 fc81 	bl	800520c <RCCEx_PLL3_Config>
 800490a:	4603      	mov	r3, r0
 800490c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800490e:	e003      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004910:	2301      	movs	r3, #1
 8004912:	75fb      	strb	r3, [r7, #23]
      break;
 8004914:	e000      	b.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8004916:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004918:	7dfb      	ldrb	r3, [r7, #23]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10c      	bne.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800491e:	4b05      	ldr	r3, [pc, #20]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8004920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004922:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800492c:	4901      	ldr	r1, [pc, #4]	; (8004934 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800492e:	4313      	orrs	r3, r2
 8004930:	658b      	str	r3, [r1, #88]	; 0x58
 8004932:	e003      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8004934:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004938:	7dfb      	ldrb	r3, [r7, #23]
 800493a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d02f      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800494e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004952:	d00c      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8004954:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004958:	d015      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800495a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800495e:	d10f      	bne.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004960:	4b79      	ldr	r3, [pc, #484]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004964:	4a78      	ldr	r2, [pc, #480]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800496a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800496c:	e00c      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	3324      	adds	r3, #36	; 0x24
 8004972:	2101      	movs	r1, #1
 8004974:	4618      	mov	r0, r3
 8004976:	f000 fc49 	bl	800520c <RCCEx_PLL3_Config>
 800497a:	4603      	mov	r3, r0
 800497c:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800497e:	e003      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004980:	2301      	movs	r3, #1
 8004982:	75fb      	strb	r3, [r7, #23]
      break;
 8004984:	e000      	b.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8004986:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004988:	7dfb      	ldrb	r3, [r7, #23]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d10a      	bne.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800498e:	4b6e      	ldr	r3, [pc, #440]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004992:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800499c:	496a      	ldr	r1, [pc, #424]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800499e:	4313      	orrs	r3, r2
 80049a0:	654b      	str	r3, [r1, #84]	; 0x54
 80049a2:	e001      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049a4:	7dfb      	ldrb	r3, [r7, #23]
 80049a6:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d029      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d003      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 80049bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049c0:	d007      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 80049c2:	e00f      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80049c4:	4b60      	ldr	r3, [pc, #384]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80049c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c8:	4a5f      	ldr	r2, [pc, #380]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80049ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80049ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80049d0:	e00b      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	3304      	adds	r3, #4
 80049d6:	2102      	movs	r1, #2
 80049d8:	4618      	mov	r0, r3
 80049da:	f000 fb65 	bl	80050a8 <RCCEx_PLL2_Config>
 80049de:	4603      	mov	r3, r0
 80049e0:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80049e2:	e002      	b.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	75fb      	strb	r3, [r7, #23]
      break;
 80049e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049ea:	7dfb      	ldrb	r3, [r7, #23]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d109      	bne.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80049f0:	4b55      	ldr	r3, [pc, #340]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80049f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049f4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049fc:	4952      	ldr	r1, [pc, #328]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004a02:	e001      	b.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a04:	7dfb      	ldrb	r3, [r7, #23]
 8004a06:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00a      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	3324      	adds	r3, #36	; 0x24
 8004a18:	2102      	movs	r1, #2
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f000 fbf6 	bl	800520c <RCCEx_PLL3_Config>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d02f      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a3e:	d00c      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004a40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a44:	d802      	bhi.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d011      	beq.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8004a4a:	e00d      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8004a4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a50:	d00f      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8004a52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a56:	d00e      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8004a58:	e006      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a5a:	4b3b      	ldr	r3, [pc, #236]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5e:	4a3a      	ldr	r2, [pc, #232]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004a66:	e007      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a68:	2301      	movs	r3, #1
 8004a6a:	75fb      	strb	r3, [r7, #23]
      break;
 8004a6c:	e004      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004a6e:	bf00      	nop
 8004a70:	e002      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004a72:	bf00      	nop
 8004a74:	e000      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8004a76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a78:	7dfb      	ldrb	r3, [r7, #23]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d109      	bne.n	8004a92 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a7e:	4b32      	ldr	r3, [pc, #200]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a8a:	492f      	ldr	r1, [pc, #188]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	654b      	str	r3, [r1, #84]	; 0x54
 8004a90:	e001      	b.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a92:	7dfb      	ldrb	r3, [r7, #23]
 8004a94:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d008      	beq.n	8004ab4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004aa2:	4b29      	ldr	r3, [pc, #164]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aa6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aae:	4926      	ldr	r1, [pc, #152]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d009      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004ac0:	4b21      	ldr	r3, [pc, #132]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004ace:	491e      	ldr	r1, [pc, #120]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d008      	beq.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ae0:	4b19      	ldr	r3, [pc, #100]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ae4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004aec:	4916      	ldr	r1, [pc, #88]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00d      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004afe:	4b12      	ldr	r3, [pc, #72]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	4a11      	ldr	r2, [pc, #68]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b04:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004b08:	6113      	str	r3, [r2, #16]
 8004b0a:	4b0f      	ldr	r3, [pc, #60]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b0c:	691a      	ldr	r2, [r3, #16]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004b14:	490c      	ldr	r1, [pc, #48]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b16:	4313      	orrs	r3, r2
 8004b18:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	da08      	bge.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004b22:	4b09      	ldr	r3, [pc, #36]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b26:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b2e:	4906      	ldr	r1, [pc, #24]	; (8004b48 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8004b30:	4313      	orrs	r3, r2
 8004b32:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8004b34:	7dbb      	ldrb	r3, [r7, #22]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d101      	bne.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	e000      	b.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3718      	adds	r7, #24
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	58024400 	.word	0x58024400

08004b4c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004b50:	f7ff f8b2 	bl	8003cb8 <HAL_RCC_GetHCLKFreq>
 8004b54:	4601      	mov	r1, r0
 8004b56:	4b06      	ldr	r3, [pc, #24]	; (8004b70 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004b58:	6a1b      	ldr	r3, [r3, #32]
 8004b5a:	091b      	lsrs	r3, r3, #4
 8004b5c:	f003 0307 	and.w	r3, r3, #7
 8004b60:	4a04      	ldr	r2, [pc, #16]	; (8004b74 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004b62:	5cd3      	ldrb	r3, [r2, r3]
 8004b64:	f003 031f 	and.w	r3, r3, #31
 8004b68:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	58024400 	.word	0x58024400
 8004b74:	080078dc 	.word	0x080078dc

08004b78 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b089      	sub	sp, #36	; 0x24
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004b80:	4b9d      	ldr	r3, [pc, #628]	; (8004df8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b84:	f003 0303 	and.w	r3, r3, #3
 8004b88:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004b8a:	4b9b      	ldr	r3, [pc, #620]	; (8004df8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8e:	0b1b      	lsrs	r3, r3, #12
 8004b90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b94:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004b96:	4b98      	ldr	r3, [pc, #608]	; (8004df8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9a:	091b      	lsrs	r3, r3, #4
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004ba2:	4b95      	ldr	r3, [pc, #596]	; (8004df8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004ba4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba6:	08db      	lsrs	r3, r3, #3
 8004ba8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	fb02 f303 	mul.w	r3, r2, r3
 8004bb2:	ee07 3a90 	vmov	s15, r3
 8004bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f000 810a 	beq.w	8004dda <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 8004bc6:	69bb      	ldr	r3, [r7, #24]
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d05a      	beq.n	8004c82 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d302      	bcc.n	8004bd6 <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d078      	beq.n	8004cc6 <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8004bd4:	e099      	b.n	8004d0a <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bd6:	4b88      	ldr	r3, [pc, #544]	; (8004df8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f003 0320 	and.w	r3, r3, #32
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d02d      	beq.n	8004c3e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004be2:	4b85      	ldr	r3, [pc, #532]	; (8004df8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	08db      	lsrs	r3, r3, #3
 8004be8:	f003 0303 	and.w	r3, r3, #3
 8004bec:	4a83      	ldr	r2, [pc, #524]	; (8004dfc <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8004bee:	fa22 f303 	lsr.w	r3, r2, r3
 8004bf2:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	ee07 3a90 	vmov	s15, r3
 8004bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	ee07 3a90 	vmov	s15, r3
 8004c04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c08:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c0c:	4b7a      	ldr	r3, [pc, #488]	; (8004df8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c14:	ee07 3a90 	vmov	s15, r3
 8004c18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c1c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c20:	eddf 5a77 	vldr	s11, [pc, #476]	; 8004e00 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004c24:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c2c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c30:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c38:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004c3c:	e087      	b.n	8004d4e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	ee07 3a90 	vmov	s15, r3
 8004c44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c48:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8004e04 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8004c4c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c50:	4b69      	ldr	r3, [pc, #420]	; (8004df8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c58:	ee07 3a90 	vmov	s15, r3
 8004c5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c60:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c64:	eddf 5a66 	vldr	s11, [pc, #408]	; 8004e00 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004c68:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c6c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c70:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004c74:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c7c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004c80:	e065      	b.n	8004d4e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	ee07 3a90 	vmov	s15, r3
 8004c88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c8c:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8004e08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004c90:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c94:	4b58      	ldr	r3, [pc, #352]	; (8004df8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c9c:	ee07 3a90 	vmov	s15, r3
 8004ca0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ca4:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ca8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8004e00 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004cac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cb0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cb4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cb8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004cbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cc0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004cc4:	e043      	b.n	8004d4e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	ee07 3a90 	vmov	s15, r3
 8004ccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8004e0c <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8004cd4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004cd8:	4b47      	ldr	r3, [pc, #284]	; (8004df8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ce0:	ee07 3a90 	vmov	s15, r3
 8004ce4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ce8:	ed97 6a03 	vldr	s12, [r7, #12]
 8004cec:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004e00 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004cf0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004cf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004cf8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004cfc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d00:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d04:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d08:	e021      	b.n	8004d4e <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	ee07 3a90 	vmov	s15, r3
 8004d10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d14:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8004e08 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 8004d18:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004d1c:	4b36      	ldr	r3, [pc, #216]	; (8004df8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d24:	ee07 3a90 	vmov	s15, r3
 8004d28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004d2c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004d30:	eddf 5a33 	vldr	s11, [pc, #204]	; 8004e00 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8004d34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004d38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004d3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004d40:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004d44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d48:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004d4c:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004d4e:	4b2a      	ldr	r3, [pc, #168]	; (8004df8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d52:	0a5b      	lsrs	r3, r3, #9
 8004d54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d58:	ee07 3a90 	vmov	s15, r3
 8004d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d68:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d74:	ee17 2a90 	vmov	r2, s15
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004d7c:	4b1e      	ldr	r3, [pc, #120]	; (8004df8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d80:	0c1b      	lsrs	r3, r3, #16
 8004d82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d86:	ee07 3a90 	vmov	s15, r3
 8004d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d96:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004da2:	ee17 2a90 	vmov	r2, s15
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004daa:	4b13      	ldr	r3, [pc, #76]	; (8004df8 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8004dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dae:	0e1b      	lsrs	r3, r3, #24
 8004db0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004db4:	ee07 3a90 	vmov	s15, r3
 8004db8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004dc0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004dc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004dc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004dcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004dd0:	ee17 2a90 	vmov	r2, s15
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004dd8:	e008      	b.n	8004dec <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2200      	movs	r2, #0
 8004dea:	609a      	str	r2, [r3, #8]
}
 8004dec:	bf00      	nop
 8004dee:	3724      	adds	r7, #36	; 0x24
 8004df0:	46bd      	mov	sp, r7
 8004df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df6:	4770      	bx	lr
 8004df8:	58024400 	.word	0x58024400
 8004dfc:	03d09000 	.word	0x03d09000
 8004e00:	46000000 	.word	0x46000000
 8004e04:	4c742400 	.word	0x4c742400
 8004e08:	4a742400 	.word	0x4a742400
 8004e0c:	4af42400 	.word	0x4af42400

08004e10 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b089      	sub	sp, #36	; 0x24
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004e18:	4b9d      	ldr	r3, [pc, #628]	; (8005090 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1c:	f003 0303 	and.w	r3, r3, #3
 8004e20:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004e22:	4b9b      	ldr	r3, [pc, #620]	; (8005090 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e26:	0d1b      	lsrs	r3, r3, #20
 8004e28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e2c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004e2e:	4b98      	ldr	r3, [pc, #608]	; (8005090 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e32:	0a1b      	lsrs	r3, r3, #8
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004e3a:	4b95      	ldr	r3, [pc, #596]	; (8005090 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e3e:	08db      	lsrs	r3, r3, #3
 8004e40:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	fb02 f303 	mul.w	r3, r2, r3
 8004e4a:	ee07 3a90 	vmov	s15, r3
 8004e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e52:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f000 810a 	beq.w	8005072 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d05a      	beq.n	8004f1a <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 8004e64:	2b01      	cmp	r3, #1
 8004e66:	d302      	bcc.n	8004e6e <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 8004e68:	2b02      	cmp	r3, #2
 8004e6a:	d078      	beq.n	8004f5e <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 8004e6c:	e099      	b.n	8004fa2 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e6e:	4b88      	ldr	r3, [pc, #544]	; (8005090 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0320 	and.w	r3, r3, #32
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d02d      	beq.n	8004ed6 <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004e7a:	4b85      	ldr	r3, [pc, #532]	; (8005090 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	08db      	lsrs	r3, r3, #3
 8004e80:	f003 0303 	and.w	r3, r3, #3
 8004e84:	4a83      	ldr	r2, [pc, #524]	; (8005094 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 8004e86:	fa22 f303 	lsr.w	r3, r2, r3
 8004e8a:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	ee07 3a90 	vmov	s15, r3
 8004e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	ee07 3a90 	vmov	s15, r3
 8004e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ea0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ea4:	4b7a      	ldr	r3, [pc, #488]	; (8005090 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eac:	ee07 3a90 	vmov	s15, r3
 8004eb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eb4:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eb8:	eddf 5a77 	vldr	s11, [pc, #476]	; 8005098 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004ebc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ec0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ec4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ec8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ecc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ed0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004ed4:	e087      	b.n	8004fe6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	ee07 3a90 	vmov	s15, r3
 8004edc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ee0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800509c <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8004ee4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ee8:	4b69      	ldr	r3, [pc, #420]	; (8005090 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ef0:	ee07 3a90 	vmov	s15, r3
 8004ef4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ef8:	ed97 6a03 	vldr	s12, [r7, #12]
 8004efc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8005098 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004f00:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f04:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f08:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f0c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f14:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f18:	e065      	b.n	8004fe6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	ee07 3a90 	vmov	s15, r3
 8004f20:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f24:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80050a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004f28:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f2c:	4b58      	ldr	r3, [pc, #352]	; (8005090 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f34:	ee07 3a90 	vmov	s15, r3
 8004f38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f3c:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f40:	eddf 5a55 	vldr	s11, [pc, #340]	; 8005098 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004f44:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f48:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f4c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f50:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f58:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f5c:	e043      	b.n	8004fe6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	ee07 3a90 	vmov	s15, r3
 8004f64:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f68:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80050a4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 8004f6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f70:	4b47      	ldr	r3, [pc, #284]	; (8005090 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f78:	ee07 3a90 	vmov	s15, r3
 8004f7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f80:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f84:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005098 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004f88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f9c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004fa0:	e021      	b.n	8004fe6 <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	ee07 3a90 	vmov	s15, r3
 8004fa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fac:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80050a0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8004fb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004fb4:	4b36      	ldr	r3, [pc, #216]	; (8005090 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fbc:	ee07 3a90 	vmov	s15, r3
 8004fc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004fc4:	ed97 6a03 	vldr	s12, [r7, #12]
 8004fc8:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005098 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8004fcc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004fd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004fd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004fd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004fdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004fe0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004fe4:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004fe6:	4b2a      	ldr	r3, [pc, #168]	; (8005090 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8004fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fea:	0a5b      	lsrs	r3, r3, #9
 8004fec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ff0:	ee07 3a90 	vmov	s15, r3
 8004ff4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ff8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ffc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005000:	edd7 6a07 	vldr	s13, [r7, #28]
 8005004:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005008:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800500c:	ee17 2a90 	vmov	r2, s15
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005014:	4b1e      	ldr	r3, [pc, #120]	; (8005090 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005018:	0c1b      	lsrs	r3, r3, #16
 800501a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800501e:	ee07 3a90 	vmov	s15, r3
 8005022:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005026:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800502a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800502e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005032:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005036:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800503a:	ee17 2a90 	vmov	r2, s15
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005042:	4b13      	ldr	r3, [pc, #76]	; (8005090 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8005044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005046:	0e1b      	lsrs	r3, r3, #24
 8005048:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800504c:	ee07 3a90 	vmov	s15, r3
 8005050:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005054:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005058:	ee37 7a87 	vadd.f32	s14, s15, s14
 800505c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005060:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005064:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005068:	ee17 2a90 	vmov	r2, s15
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005070:	e008      	b.n	8005084 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	609a      	str	r2, [r3, #8]
}
 8005084:	bf00      	nop
 8005086:	3724      	adds	r7, #36	; 0x24
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr
 8005090:	58024400 	.word	0x58024400
 8005094:	03d09000 	.word	0x03d09000
 8005098:	46000000 	.word	0x46000000
 800509c:	4c742400 	.word	0x4c742400
 80050a0:	4a742400 	.word	0x4a742400
 80050a4:	4af42400 	.word	0x4af42400

080050a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b084      	sub	sp, #16
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050b2:	2300      	movs	r3, #0
 80050b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80050b6:	4b53      	ldr	r3, [pc, #332]	; (8005204 <RCCEx_PLL2_Config+0x15c>)
 80050b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ba:	f003 0303 	and.w	r3, r3, #3
 80050be:	2b03      	cmp	r3, #3
 80050c0:	d101      	bne.n	80050c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e099      	b.n	80051fa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80050c6:	4b4f      	ldr	r3, [pc, #316]	; (8005204 <RCCEx_PLL2_Config+0x15c>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4a4e      	ldr	r2, [pc, #312]	; (8005204 <RCCEx_PLL2_Config+0x15c>)
 80050cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050d2:	f7fc fdd1 	bl	8001c78 <HAL_GetTick>
 80050d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80050d8:	e008      	b.n	80050ec <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80050da:	f7fc fdcd 	bl	8001c78 <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	2b02      	cmp	r3, #2
 80050e6:	d901      	bls.n	80050ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e086      	b.n	80051fa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80050ec:	4b45      	ldr	r3, [pc, #276]	; (8005204 <RCCEx_PLL2_Config+0x15c>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d1f0      	bne.n	80050da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80050f8:	4b42      	ldr	r3, [pc, #264]	; (8005204 <RCCEx_PLL2_Config+0x15c>)
 80050fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050fc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	031b      	lsls	r3, r3, #12
 8005106:	493f      	ldr	r1, [pc, #252]	; (8005204 <RCCEx_PLL2_Config+0x15c>)
 8005108:	4313      	orrs	r3, r2
 800510a:	628b      	str	r3, [r1, #40]	; 0x28
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	3b01      	subs	r3, #1
 8005112:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	3b01      	subs	r3, #1
 800511c:	025b      	lsls	r3, r3, #9
 800511e:	b29b      	uxth	r3, r3
 8005120:	431a      	orrs	r2, r3
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	68db      	ldr	r3, [r3, #12]
 8005126:	3b01      	subs	r3, #1
 8005128:	041b      	lsls	r3, r3, #16
 800512a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800512e:	431a      	orrs	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	3b01      	subs	r3, #1
 8005136:	061b      	lsls	r3, r3, #24
 8005138:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800513c:	4931      	ldr	r1, [pc, #196]	; (8005204 <RCCEx_PLL2_Config+0x15c>)
 800513e:	4313      	orrs	r3, r2
 8005140:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005142:	4b30      	ldr	r3, [pc, #192]	; (8005204 <RCCEx_PLL2_Config+0x15c>)
 8005144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005146:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	695b      	ldr	r3, [r3, #20]
 800514e:	492d      	ldr	r1, [pc, #180]	; (8005204 <RCCEx_PLL2_Config+0x15c>)
 8005150:	4313      	orrs	r3, r2
 8005152:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005154:	4b2b      	ldr	r3, [pc, #172]	; (8005204 <RCCEx_PLL2_Config+0x15c>)
 8005156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005158:	f023 0220 	bic.w	r2, r3, #32
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	4928      	ldr	r1, [pc, #160]	; (8005204 <RCCEx_PLL2_Config+0x15c>)
 8005162:	4313      	orrs	r3, r2
 8005164:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005166:	4b27      	ldr	r3, [pc, #156]	; (8005204 <RCCEx_PLL2_Config+0x15c>)
 8005168:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800516a:	4a26      	ldr	r2, [pc, #152]	; (8005204 <RCCEx_PLL2_Config+0x15c>)
 800516c:	f023 0310 	bic.w	r3, r3, #16
 8005170:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005172:	4b24      	ldr	r3, [pc, #144]	; (8005204 <RCCEx_PLL2_Config+0x15c>)
 8005174:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005176:	4b24      	ldr	r3, [pc, #144]	; (8005208 <RCCEx_PLL2_Config+0x160>)
 8005178:	4013      	ands	r3, r2
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	69d2      	ldr	r2, [r2, #28]
 800517e:	00d2      	lsls	r2, r2, #3
 8005180:	4920      	ldr	r1, [pc, #128]	; (8005204 <RCCEx_PLL2_Config+0x15c>)
 8005182:	4313      	orrs	r3, r2
 8005184:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005186:	4b1f      	ldr	r3, [pc, #124]	; (8005204 <RCCEx_PLL2_Config+0x15c>)
 8005188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518a:	4a1e      	ldr	r2, [pc, #120]	; (8005204 <RCCEx_PLL2_Config+0x15c>)
 800518c:	f043 0310 	orr.w	r3, r3, #16
 8005190:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d106      	bne.n	80051a6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005198:	4b1a      	ldr	r3, [pc, #104]	; (8005204 <RCCEx_PLL2_Config+0x15c>)
 800519a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519c:	4a19      	ldr	r2, [pc, #100]	; (8005204 <RCCEx_PLL2_Config+0x15c>)
 800519e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80051a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051a4:	e00f      	b.n	80051c6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d106      	bne.n	80051ba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80051ac:	4b15      	ldr	r3, [pc, #84]	; (8005204 <RCCEx_PLL2_Config+0x15c>)
 80051ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b0:	4a14      	ldr	r2, [pc, #80]	; (8005204 <RCCEx_PLL2_Config+0x15c>)
 80051b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80051b8:	e005      	b.n	80051c6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80051ba:	4b12      	ldr	r3, [pc, #72]	; (8005204 <RCCEx_PLL2_Config+0x15c>)
 80051bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051be:	4a11      	ldr	r2, [pc, #68]	; (8005204 <RCCEx_PLL2_Config+0x15c>)
 80051c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80051c6:	4b0f      	ldr	r3, [pc, #60]	; (8005204 <RCCEx_PLL2_Config+0x15c>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4a0e      	ldr	r2, [pc, #56]	; (8005204 <RCCEx_PLL2_Config+0x15c>)
 80051cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051d2:	f7fc fd51 	bl	8001c78 <HAL_GetTick>
 80051d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80051d8:	e008      	b.n	80051ec <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80051da:	f7fc fd4d 	bl	8001c78 <HAL_GetTick>
 80051de:	4602      	mov	r2, r0
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	2b02      	cmp	r3, #2
 80051e6:	d901      	bls.n	80051ec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e006      	b.n	80051fa <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80051ec:	4b05      	ldr	r3, [pc, #20]	; (8005204 <RCCEx_PLL2_Config+0x15c>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0f0      	beq.n	80051da <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80051f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	58024400 	.word	0x58024400
 8005208:	ffff0007 	.word	0xffff0007

0800520c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005216:	2300      	movs	r3, #0
 8005218:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800521a:	4b53      	ldr	r3, [pc, #332]	; (8005368 <RCCEx_PLL3_Config+0x15c>)
 800521c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521e:	f003 0303 	and.w	r3, r3, #3
 8005222:	2b03      	cmp	r3, #3
 8005224:	d101      	bne.n	800522a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e099      	b.n	800535e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800522a:	4b4f      	ldr	r3, [pc, #316]	; (8005368 <RCCEx_PLL3_Config+0x15c>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4a4e      	ldr	r2, [pc, #312]	; (8005368 <RCCEx_PLL3_Config+0x15c>)
 8005230:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005234:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005236:	f7fc fd1f 	bl	8001c78 <HAL_GetTick>
 800523a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800523c:	e008      	b.n	8005250 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800523e:	f7fc fd1b 	bl	8001c78 <HAL_GetTick>
 8005242:	4602      	mov	r2, r0
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	1ad3      	subs	r3, r2, r3
 8005248:	2b02      	cmp	r3, #2
 800524a:	d901      	bls.n	8005250 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e086      	b.n	800535e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005250:	4b45      	ldr	r3, [pc, #276]	; (8005368 <RCCEx_PLL3_Config+0x15c>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005258:	2b00      	cmp	r3, #0
 800525a:	d1f0      	bne.n	800523e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800525c:	4b42      	ldr	r3, [pc, #264]	; (8005368 <RCCEx_PLL3_Config+0x15c>)
 800525e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005260:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	051b      	lsls	r3, r3, #20
 800526a:	493f      	ldr	r1, [pc, #252]	; (8005368 <RCCEx_PLL3_Config+0x15c>)
 800526c:	4313      	orrs	r3, r2
 800526e:	628b      	str	r3, [r1, #40]	; 0x28
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	3b01      	subs	r3, #1
 8005276:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	3b01      	subs	r3, #1
 8005280:	025b      	lsls	r3, r3, #9
 8005282:	b29b      	uxth	r3, r3
 8005284:	431a      	orrs	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	3b01      	subs	r3, #1
 800528c:	041b      	lsls	r3, r3, #16
 800528e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005292:	431a      	orrs	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	3b01      	subs	r3, #1
 800529a:	061b      	lsls	r3, r3, #24
 800529c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80052a0:	4931      	ldr	r1, [pc, #196]	; (8005368 <RCCEx_PLL3_Config+0x15c>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80052a6:	4b30      	ldr	r3, [pc, #192]	; (8005368 <RCCEx_PLL3_Config+0x15c>)
 80052a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	492d      	ldr	r1, [pc, #180]	; (8005368 <RCCEx_PLL3_Config+0x15c>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80052b8:	4b2b      	ldr	r3, [pc, #172]	; (8005368 <RCCEx_PLL3_Config+0x15c>)
 80052ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052bc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	4928      	ldr	r1, [pc, #160]	; (8005368 <RCCEx_PLL3_Config+0x15c>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80052ca:	4b27      	ldr	r3, [pc, #156]	; (8005368 <RCCEx_PLL3_Config+0x15c>)
 80052cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ce:	4a26      	ldr	r2, [pc, #152]	; (8005368 <RCCEx_PLL3_Config+0x15c>)
 80052d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80052d6:	4b24      	ldr	r3, [pc, #144]	; (8005368 <RCCEx_PLL3_Config+0x15c>)
 80052d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052da:	4b24      	ldr	r3, [pc, #144]	; (800536c <RCCEx_PLL3_Config+0x160>)
 80052dc:	4013      	ands	r3, r2
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	69d2      	ldr	r2, [r2, #28]
 80052e2:	00d2      	lsls	r2, r2, #3
 80052e4:	4920      	ldr	r1, [pc, #128]	; (8005368 <RCCEx_PLL3_Config+0x15c>)
 80052e6:	4313      	orrs	r3, r2
 80052e8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80052ea:	4b1f      	ldr	r3, [pc, #124]	; (8005368 <RCCEx_PLL3_Config+0x15c>)
 80052ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ee:	4a1e      	ldr	r2, [pc, #120]	; (8005368 <RCCEx_PLL3_Config+0x15c>)
 80052f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d106      	bne.n	800530a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80052fc:	4b1a      	ldr	r3, [pc, #104]	; (8005368 <RCCEx_PLL3_Config+0x15c>)
 80052fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005300:	4a19      	ldr	r2, [pc, #100]	; (8005368 <RCCEx_PLL3_Config+0x15c>)
 8005302:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005306:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005308:	e00f      	b.n	800532a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d106      	bne.n	800531e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005310:	4b15      	ldr	r3, [pc, #84]	; (8005368 <RCCEx_PLL3_Config+0x15c>)
 8005312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005314:	4a14      	ldr	r2, [pc, #80]	; (8005368 <RCCEx_PLL3_Config+0x15c>)
 8005316:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800531a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800531c:	e005      	b.n	800532a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800531e:	4b12      	ldr	r3, [pc, #72]	; (8005368 <RCCEx_PLL3_Config+0x15c>)
 8005320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005322:	4a11      	ldr	r2, [pc, #68]	; (8005368 <RCCEx_PLL3_Config+0x15c>)
 8005324:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005328:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800532a:	4b0f      	ldr	r3, [pc, #60]	; (8005368 <RCCEx_PLL3_Config+0x15c>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a0e      	ldr	r2, [pc, #56]	; (8005368 <RCCEx_PLL3_Config+0x15c>)
 8005330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005334:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005336:	f7fc fc9f 	bl	8001c78 <HAL_GetTick>
 800533a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800533c:	e008      	b.n	8005350 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800533e:	f7fc fc9b 	bl	8001c78 <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	2b02      	cmp	r3, #2
 800534a:	d901      	bls.n	8005350 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800534c:	2303      	movs	r3, #3
 800534e:	e006      	b.n	800535e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005350:	4b05      	ldr	r3, [pc, #20]	; (8005368 <RCCEx_PLL3_Config+0x15c>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d0f0      	beq.n	800533e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800535c:	7bfb      	ldrb	r3, [r7, #15]
}
 800535e:	4618      	mov	r0, r3
 8005360:	3710      	adds	r7, #16
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	58024400 	.word	0x58024400
 800536c:	ffff0007 	.word	0xffff0007

08005370 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e049      	b.n	8005416 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2b00      	cmp	r3, #0
 800538c:	d106      	bne.n	800539c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f7fc f9fa 	bl	8001790 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2202      	movs	r2, #2
 80053a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	3304      	adds	r3, #4
 80053ac:	4619      	mov	r1, r3
 80053ae:	4610      	mov	r0, r2
 80053b0:	f000 f9b4 	bl	800571c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2201      	movs	r2, #1
 80053b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2201      	movs	r2, #1
 80053d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	2201      	movs	r2, #1
 80053e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
	...

08005420 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800542e:	b2db      	uxtb	r3, r3
 8005430:	2b01      	cmp	r3, #1
 8005432:	d001      	beq.n	8005438 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e021      	b.n	800547c <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68da      	ldr	r2, [r3, #12]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f042 0201 	orr.w	r2, r2, #1
 800544e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	689a      	ldr	r2, [r3, #8]
 8005456:	4b0c      	ldr	r3, [pc, #48]	; (8005488 <HAL_TIM_Base_Start_IT+0x68>)
 8005458:	4013      	ands	r3, r2
 800545a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2b06      	cmp	r3, #6
 8005460:	d00b      	beq.n	800547a <HAL_TIM_Base_Start_IT+0x5a>
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005468:	d007      	beq.n	800547a <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f042 0201 	orr.w	r2, r2, #1
 8005478:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800547a:	2300      	movs	r3, #0
}
 800547c:	4618      	mov	r0, r3
 800547e:	3714      	adds	r7, #20
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	00010007 	.word	0x00010007

0800548c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b082      	sub	sp, #8
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d122      	bne.n	80054e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	f003 0302 	and.w	r3, r3, #2
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d11b      	bne.n	80054e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f06f 0202 	mvn.w	r2, #2
 80054b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	699b      	ldr	r3, [r3, #24]
 80054c6:	f003 0303 	and.w	r3, r3, #3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f000 f905 	bl	80056de <HAL_TIM_IC_CaptureCallback>
 80054d4:	e005      	b.n	80054e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f8f7 	bl	80056ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 f908 	bl	80056f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	f003 0304 	and.w	r3, r3, #4
 80054f2:	2b04      	cmp	r3, #4
 80054f4:	d122      	bne.n	800553c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	f003 0304 	and.w	r3, r3, #4
 8005500:	2b04      	cmp	r3, #4
 8005502:	d11b      	bne.n	800553c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f06f 0204 	mvn.w	r2, #4
 800550c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2202      	movs	r2, #2
 8005512:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	699b      	ldr	r3, [r3, #24]
 800551a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800551e:	2b00      	cmp	r3, #0
 8005520:	d003      	beq.n	800552a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005522:	6878      	ldr	r0, [r7, #4]
 8005524:	f000 f8db 	bl	80056de <HAL_TIM_IC_CaptureCallback>
 8005528:	e005      	b.n	8005536 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f8cd 	bl	80056ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f000 f8de 	bl	80056f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2200      	movs	r2, #0
 800553a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	f003 0308 	and.w	r3, r3, #8
 8005546:	2b08      	cmp	r3, #8
 8005548:	d122      	bne.n	8005590 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	f003 0308 	and.w	r3, r3, #8
 8005554:	2b08      	cmp	r3, #8
 8005556:	d11b      	bne.n	8005590 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f06f 0208 	mvn.w	r2, #8
 8005560:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2204      	movs	r2, #4
 8005566:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	69db      	ldr	r3, [r3, #28]
 800556e:	f003 0303 	and.w	r3, r3, #3
 8005572:	2b00      	cmp	r3, #0
 8005574:	d003      	beq.n	800557e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f8b1 	bl	80056de <HAL_TIM_IC_CaptureCallback>
 800557c:	e005      	b.n	800558a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f8a3 	bl	80056ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 f8b4 	bl	80056f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	f003 0310 	and.w	r3, r3, #16
 800559a:	2b10      	cmp	r3, #16
 800559c:	d122      	bne.n	80055e4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	f003 0310 	and.w	r3, r3, #16
 80055a8:	2b10      	cmp	r3, #16
 80055aa:	d11b      	bne.n	80055e4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f06f 0210 	mvn.w	r2, #16
 80055b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2208      	movs	r2, #8
 80055ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	69db      	ldr	r3, [r3, #28]
 80055c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d003      	beq.n	80055d2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f887 	bl	80056de <HAL_TIM_IC_CaptureCallback>
 80055d0:	e005      	b.n	80055de <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f879 	bl	80056ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 f88a 	bl	80056f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	f003 0301 	and.w	r3, r3, #1
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d10e      	bne.n	8005610 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	f003 0301 	and.w	r3, r3, #1
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d107      	bne.n	8005610 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f06f 0201 	mvn.w	r2, #1
 8005608:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7fb ffbe 	bl	800158c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	691b      	ldr	r3, [r3, #16]
 8005616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800561a:	2b80      	cmp	r3, #128	; 0x80
 800561c:	d10e      	bne.n	800563c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005628:	2b80      	cmp	r3, #128	; 0x80
 800562a:	d107      	bne.n	800563c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f914 	bl	8005864 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005646:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800564a:	d10e      	bne.n	800566a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005656:	2b80      	cmp	r3, #128	; 0x80
 8005658:	d107      	bne.n	800566a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005662:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 f907 	bl	8005878 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	691b      	ldr	r3, [r3, #16]
 8005670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005674:	2b40      	cmp	r3, #64	; 0x40
 8005676:	d10e      	bne.n	8005696 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005682:	2b40      	cmp	r3, #64	; 0x40
 8005684:	d107      	bne.n	8005696 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800568e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 f838 	bl	8005706 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	691b      	ldr	r3, [r3, #16]
 800569c:	f003 0320 	and.w	r3, r3, #32
 80056a0:	2b20      	cmp	r3, #32
 80056a2:	d10e      	bne.n	80056c2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68db      	ldr	r3, [r3, #12]
 80056aa:	f003 0320 	and.w	r3, r3, #32
 80056ae:	2b20      	cmp	r3, #32
 80056b0:	d107      	bne.n	80056c2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f06f 0220 	mvn.w	r2, #32
 80056ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f8c7 	bl	8005850 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80056c2:	bf00      	nop
 80056c4:	3708      	adds	r7, #8
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}

080056ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056ca:	b480      	push	{r7}
 80056cc:	b083      	sub	sp, #12
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056d2:	bf00      	nop
 80056d4:	370c      	adds	r7, #12
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr

080056de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056de:	b480      	push	{r7}
 80056e0:	b083      	sub	sp, #12
 80056e2:	af00      	add	r7, sp, #0
 80056e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056e6:	bf00      	nop
 80056e8:	370c      	adds	r7, #12
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr

080056f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056f2:	b480      	push	{r7}
 80056f4:	b083      	sub	sp, #12
 80056f6:	af00      	add	r7, sp, #0
 80056f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056fa:	bf00      	nop
 80056fc:	370c      	adds	r7, #12
 80056fe:	46bd      	mov	sp, r7
 8005700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005704:	4770      	bx	lr

08005706 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005706:	b480      	push	{r7}
 8005708:	b083      	sub	sp, #12
 800570a:	af00      	add	r7, sp, #0
 800570c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800570e:	bf00      	nop
 8005710:	370c      	adds	r7, #12
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
	...

0800571c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a40      	ldr	r2, [pc, #256]	; (8005830 <TIM_Base_SetConfig+0x114>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d013      	beq.n	800575c <TIM_Base_SetConfig+0x40>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800573a:	d00f      	beq.n	800575c <TIM_Base_SetConfig+0x40>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a3d      	ldr	r2, [pc, #244]	; (8005834 <TIM_Base_SetConfig+0x118>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d00b      	beq.n	800575c <TIM_Base_SetConfig+0x40>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	4a3c      	ldr	r2, [pc, #240]	; (8005838 <TIM_Base_SetConfig+0x11c>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d007      	beq.n	800575c <TIM_Base_SetConfig+0x40>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a3b      	ldr	r2, [pc, #236]	; (800583c <TIM_Base_SetConfig+0x120>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d003      	beq.n	800575c <TIM_Base_SetConfig+0x40>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	4a3a      	ldr	r2, [pc, #232]	; (8005840 <TIM_Base_SetConfig+0x124>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d108      	bne.n	800576e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005762:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	4313      	orrs	r3, r2
 800576c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a2f      	ldr	r2, [pc, #188]	; (8005830 <TIM_Base_SetConfig+0x114>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d01f      	beq.n	80057b6 <TIM_Base_SetConfig+0x9a>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800577c:	d01b      	beq.n	80057b6 <TIM_Base_SetConfig+0x9a>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a2c      	ldr	r2, [pc, #176]	; (8005834 <TIM_Base_SetConfig+0x118>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d017      	beq.n	80057b6 <TIM_Base_SetConfig+0x9a>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a2b      	ldr	r2, [pc, #172]	; (8005838 <TIM_Base_SetConfig+0x11c>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d013      	beq.n	80057b6 <TIM_Base_SetConfig+0x9a>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a2a      	ldr	r2, [pc, #168]	; (800583c <TIM_Base_SetConfig+0x120>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d00f      	beq.n	80057b6 <TIM_Base_SetConfig+0x9a>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a29      	ldr	r2, [pc, #164]	; (8005840 <TIM_Base_SetConfig+0x124>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d00b      	beq.n	80057b6 <TIM_Base_SetConfig+0x9a>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a28      	ldr	r2, [pc, #160]	; (8005844 <TIM_Base_SetConfig+0x128>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d007      	beq.n	80057b6 <TIM_Base_SetConfig+0x9a>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a27      	ldr	r2, [pc, #156]	; (8005848 <TIM_Base_SetConfig+0x12c>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d003      	beq.n	80057b6 <TIM_Base_SetConfig+0x9a>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a26      	ldr	r2, [pc, #152]	; (800584c <TIM_Base_SetConfig+0x130>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d108      	bne.n	80057c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	695b      	ldr	r3, [r3, #20]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	689a      	ldr	r2, [r3, #8]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a10      	ldr	r2, [pc, #64]	; (8005830 <TIM_Base_SetConfig+0x114>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d00f      	beq.n	8005814 <TIM_Base_SetConfig+0xf8>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	4a12      	ldr	r2, [pc, #72]	; (8005840 <TIM_Base_SetConfig+0x124>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d00b      	beq.n	8005814 <TIM_Base_SetConfig+0xf8>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a11      	ldr	r2, [pc, #68]	; (8005844 <TIM_Base_SetConfig+0x128>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d007      	beq.n	8005814 <TIM_Base_SetConfig+0xf8>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a10      	ldr	r2, [pc, #64]	; (8005848 <TIM_Base_SetConfig+0x12c>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d003      	beq.n	8005814 <TIM_Base_SetConfig+0xf8>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a0f      	ldr	r2, [pc, #60]	; (800584c <TIM_Base_SetConfig+0x130>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d103      	bne.n	800581c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	691a      	ldr	r2, [r3, #16]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	615a      	str	r2, [r3, #20]
}
 8005822:	bf00      	nop
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	40010000 	.word	0x40010000
 8005834:	40000400 	.word	0x40000400
 8005838:	40000800 	.word	0x40000800
 800583c:	40000c00 	.word	0x40000c00
 8005840:	40010400 	.word	0x40010400
 8005844:	40014000 	.word	0x40014000
 8005848:	40014400 	.word	0x40014400
 800584c:	40014800 	.word	0x40014800

08005850 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d101      	bne.n	800589e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e042      	b.n	8005924 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d106      	bne.n	80058b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f7fb ff95 	bl	80017e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2224      	movs	r2, #36	; 0x24
 80058ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 0201 	bic.w	r2, r2, #1
 80058cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	f000 f8c2 	bl	8005a58 <UART_SetConfig>
 80058d4:	4603      	mov	r3, r0
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d101      	bne.n	80058de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e022      	b.n	8005924 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d002      	beq.n	80058ec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 fe66 	bl	80065b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	689a      	ldr	r2, [r3, #8]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800590a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681a      	ldr	r2, [r3, #0]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f042 0201 	orr.w	r2, r2, #1
 800591a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 feed 	bl	80066fc <UART_CheckIdleState>
 8005922:	4603      	mov	r3, r0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3708      	adds	r7, #8
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b08a      	sub	sp, #40	; 0x28
 8005930:	af02      	add	r7, sp, #8
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	603b      	str	r3, [r7, #0]
 8005938:	4613      	mov	r3, r2
 800593a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005942:	2b20      	cmp	r3, #32
 8005944:	f040 8083 	bne.w	8005a4e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d002      	beq.n	8005954 <HAL_UART_Transmit+0x28>
 800594e:	88fb      	ldrh	r3, [r7, #6]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d101      	bne.n	8005958 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e07b      	b.n	8005a50 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800595e:	2b01      	cmp	r3, #1
 8005960:	d101      	bne.n	8005966 <HAL_UART_Transmit+0x3a>
 8005962:	2302      	movs	r3, #2
 8005964:	e074      	b.n	8005a50 <HAL_UART_Transmit+0x124>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2201      	movs	r2, #1
 800596a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2221      	movs	r2, #33	; 0x21
 800597a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800597e:	f7fc f97b 	bl	8001c78 <HAL_GetTick>
 8005982:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	88fa      	ldrh	r2, [r7, #6]
 8005988:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	88fa      	ldrh	r2, [r7, #6]
 8005990:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800599c:	d108      	bne.n	80059b0 <HAL_UART_Transmit+0x84>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d104      	bne.n	80059b0 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80059a6:	2300      	movs	r3, #0
 80059a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	61bb      	str	r3, [r7, #24]
 80059ae:	e003      	b.n	80059b8 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059b4:	2300      	movs	r3, #0
 80059b6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 80059c0:	e02c      	b.n	8005a1c <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	9300      	str	r3, [sp, #0]
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	2200      	movs	r2, #0
 80059ca:	2180      	movs	r1, #128	; 0x80
 80059cc:	68f8      	ldr	r0, [r7, #12]
 80059ce:	f000 fedd 	bl	800678c <UART_WaitOnFlagUntilTimeout>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d001      	beq.n	80059dc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80059d8:	2303      	movs	r3, #3
 80059da:	e039      	b.n	8005a50 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d10b      	bne.n	80059fa <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	881b      	ldrh	r3, [r3, #0]
 80059e6:	461a      	mov	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059f0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80059f2:	69bb      	ldr	r3, [r7, #24]
 80059f4:	3302      	adds	r3, #2
 80059f6:	61bb      	str	r3, [r7, #24]
 80059f8:	e007      	b.n	8005a0a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80059fa:	69fb      	ldr	r3, [r7, #28]
 80059fc:	781a      	ldrb	r2, [r3, #0]
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	3301      	adds	r3, #1
 8005a08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	3b01      	subs	r3, #1
 8005a14:	b29a      	uxth	r2, r3
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005a22:	b29b      	uxth	r3, r3
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1cc      	bne.n	80059c2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	9300      	str	r3, [sp, #0]
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	2140      	movs	r1, #64	; 0x40
 8005a32:	68f8      	ldr	r0, [r7, #12]
 8005a34:	f000 feaa 	bl	800678c <UART_WaitOnFlagUntilTimeout>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e006      	b.n	8005a50 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2220      	movs	r2, #32
 8005a46:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	e000      	b.n	8005a50 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005a4e:	2302      	movs	r3, #2
  }
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3720      	adds	r7, #32
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a58:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8005a5c:	b08e      	sub	sp, #56	; 0x38
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a62:	2300      	movs	r3, #0
 8005a64:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	689a      	ldr	r2, [r3, #8]
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	431a      	orrs	r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	695b      	ldr	r3, [r3, #20]
 8005a76:	431a      	orrs	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	69db      	ldr	r3, [r3, #28]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a86:	4313      	orrs	r3, r2
 8005a88:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	4bc1      	ldr	r3, [pc, #772]	; (8005d98 <UART_SetConfig+0x340>)
 8005a92:	4013      	ands	r3, r2
 8005a94:	687a      	ldr	r2, [r7, #4]
 8005a96:	6812      	ldr	r2, [r2, #0]
 8005a98:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005a9a:	430b      	orrs	r3, r1
 8005a9c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	68da      	ldr	r2, [r3, #12]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4ab7      	ldr	r2, [pc, #732]	; (8005d9c <UART_SetConfig+0x344>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d004      	beq.n	8005ace <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005aca:	4313      	orrs	r3, r2
 8005acc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689a      	ldr	r2, [r3, #8]
 8005ad4:	4bb2      	ldr	r3, [pc, #712]	; (8005da0 <UART_SetConfig+0x348>)
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	6812      	ldr	r2, [r2, #0]
 8005adc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005ade:	430b      	orrs	r3, r1
 8005ae0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae8:	f023 010f 	bic.w	r1, r3, #15
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	430a      	orrs	r2, r1
 8005af6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4aa9      	ldr	r2, [pc, #676]	; (8005da4 <UART_SetConfig+0x34c>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d177      	bne.n	8005bf2 <UART_SetConfig+0x19a>
 8005b02:	4ba9      	ldr	r3, [pc, #676]	; (8005da8 <UART_SetConfig+0x350>)
 8005b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b0a:	2b28      	cmp	r3, #40	; 0x28
 8005b0c:	d86c      	bhi.n	8005be8 <UART_SetConfig+0x190>
 8005b0e:	a201      	add	r2, pc, #4	; (adr r2, 8005b14 <UART_SetConfig+0xbc>)
 8005b10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b14:	08005bb9 	.word	0x08005bb9
 8005b18:	08005be9 	.word	0x08005be9
 8005b1c:	08005be9 	.word	0x08005be9
 8005b20:	08005be9 	.word	0x08005be9
 8005b24:	08005be9 	.word	0x08005be9
 8005b28:	08005be9 	.word	0x08005be9
 8005b2c:	08005be9 	.word	0x08005be9
 8005b30:	08005be9 	.word	0x08005be9
 8005b34:	08005bc1 	.word	0x08005bc1
 8005b38:	08005be9 	.word	0x08005be9
 8005b3c:	08005be9 	.word	0x08005be9
 8005b40:	08005be9 	.word	0x08005be9
 8005b44:	08005be9 	.word	0x08005be9
 8005b48:	08005be9 	.word	0x08005be9
 8005b4c:	08005be9 	.word	0x08005be9
 8005b50:	08005be9 	.word	0x08005be9
 8005b54:	08005bc9 	.word	0x08005bc9
 8005b58:	08005be9 	.word	0x08005be9
 8005b5c:	08005be9 	.word	0x08005be9
 8005b60:	08005be9 	.word	0x08005be9
 8005b64:	08005be9 	.word	0x08005be9
 8005b68:	08005be9 	.word	0x08005be9
 8005b6c:	08005be9 	.word	0x08005be9
 8005b70:	08005be9 	.word	0x08005be9
 8005b74:	08005bd1 	.word	0x08005bd1
 8005b78:	08005be9 	.word	0x08005be9
 8005b7c:	08005be9 	.word	0x08005be9
 8005b80:	08005be9 	.word	0x08005be9
 8005b84:	08005be9 	.word	0x08005be9
 8005b88:	08005be9 	.word	0x08005be9
 8005b8c:	08005be9 	.word	0x08005be9
 8005b90:	08005be9 	.word	0x08005be9
 8005b94:	08005bd9 	.word	0x08005bd9
 8005b98:	08005be9 	.word	0x08005be9
 8005b9c:	08005be9 	.word	0x08005be9
 8005ba0:	08005be9 	.word	0x08005be9
 8005ba4:	08005be9 	.word	0x08005be9
 8005ba8:	08005be9 	.word	0x08005be9
 8005bac:	08005be9 	.word	0x08005be9
 8005bb0:	08005be9 	.word	0x08005be9
 8005bb4:	08005be1 	.word	0x08005be1
 8005bb8:	2301      	movs	r3, #1
 8005bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bbe:	e233      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005bc0:	2304      	movs	r3, #4
 8005bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bc6:	e22f      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005bc8:	2308      	movs	r3, #8
 8005bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bce:	e22b      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005bd0:	2310      	movs	r3, #16
 8005bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bd6:	e227      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005bd8:	2320      	movs	r3, #32
 8005bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bde:	e223      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005be0:	2340      	movs	r3, #64	; 0x40
 8005be2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005be6:	e21f      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005be8:	2380      	movs	r3, #128	; 0x80
 8005bea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005bee:	bf00      	nop
 8005bf0:	e21a      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a6d      	ldr	r2, [pc, #436]	; (8005dac <UART_SetConfig+0x354>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d132      	bne.n	8005c62 <UART_SetConfig+0x20a>
 8005bfc:	4b6a      	ldr	r3, [pc, #424]	; (8005da8 <UART_SetConfig+0x350>)
 8005bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c00:	f003 0307 	and.w	r3, r3, #7
 8005c04:	2b05      	cmp	r3, #5
 8005c06:	d827      	bhi.n	8005c58 <UART_SetConfig+0x200>
 8005c08:	a201      	add	r2, pc, #4	; (adr r2, 8005c10 <UART_SetConfig+0x1b8>)
 8005c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c0e:	bf00      	nop
 8005c10:	08005c29 	.word	0x08005c29
 8005c14:	08005c31 	.word	0x08005c31
 8005c18:	08005c39 	.word	0x08005c39
 8005c1c:	08005c41 	.word	0x08005c41
 8005c20:	08005c49 	.word	0x08005c49
 8005c24:	08005c51 	.word	0x08005c51
 8005c28:	2300      	movs	r3, #0
 8005c2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c2e:	e1fb      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005c30:	2304      	movs	r3, #4
 8005c32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c36:	e1f7      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005c38:	2308      	movs	r3, #8
 8005c3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c3e:	e1f3      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005c40:	2310      	movs	r3, #16
 8005c42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c46:	e1ef      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005c48:	2320      	movs	r3, #32
 8005c4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c4e:	e1eb      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005c50:	2340      	movs	r3, #64	; 0x40
 8005c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c56:	e1e7      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005c58:	2380      	movs	r3, #128	; 0x80
 8005c5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c5e:	bf00      	nop
 8005c60:	e1e2      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a52      	ldr	r2, [pc, #328]	; (8005db0 <UART_SetConfig+0x358>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d132      	bne.n	8005cd2 <UART_SetConfig+0x27a>
 8005c6c:	4b4e      	ldr	r3, [pc, #312]	; (8005da8 <UART_SetConfig+0x350>)
 8005c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c70:	f003 0307 	and.w	r3, r3, #7
 8005c74:	2b05      	cmp	r3, #5
 8005c76:	d827      	bhi.n	8005cc8 <UART_SetConfig+0x270>
 8005c78:	a201      	add	r2, pc, #4	; (adr r2, 8005c80 <UART_SetConfig+0x228>)
 8005c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7e:	bf00      	nop
 8005c80:	08005c99 	.word	0x08005c99
 8005c84:	08005ca1 	.word	0x08005ca1
 8005c88:	08005ca9 	.word	0x08005ca9
 8005c8c:	08005cb1 	.word	0x08005cb1
 8005c90:	08005cb9 	.word	0x08005cb9
 8005c94:	08005cc1 	.word	0x08005cc1
 8005c98:	2300      	movs	r3, #0
 8005c9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005c9e:	e1c3      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005ca0:	2304      	movs	r3, #4
 8005ca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ca6:	e1bf      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005ca8:	2308      	movs	r3, #8
 8005caa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cae:	e1bb      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005cb0:	2310      	movs	r3, #16
 8005cb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cb6:	e1b7      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005cb8:	2320      	movs	r3, #32
 8005cba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cbe:	e1b3      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005cc0:	2340      	movs	r3, #64	; 0x40
 8005cc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cc6:	e1af      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005cc8:	2380      	movs	r3, #128	; 0x80
 8005cca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005cce:	bf00      	nop
 8005cd0:	e1aa      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a37      	ldr	r2, [pc, #220]	; (8005db4 <UART_SetConfig+0x35c>)
 8005cd8:	4293      	cmp	r3, r2
 8005cda:	d132      	bne.n	8005d42 <UART_SetConfig+0x2ea>
 8005cdc:	4b32      	ldr	r3, [pc, #200]	; (8005da8 <UART_SetConfig+0x350>)
 8005cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ce0:	f003 0307 	and.w	r3, r3, #7
 8005ce4:	2b05      	cmp	r3, #5
 8005ce6:	d827      	bhi.n	8005d38 <UART_SetConfig+0x2e0>
 8005ce8:	a201      	add	r2, pc, #4	; (adr r2, 8005cf0 <UART_SetConfig+0x298>)
 8005cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cee:	bf00      	nop
 8005cf0:	08005d09 	.word	0x08005d09
 8005cf4:	08005d11 	.word	0x08005d11
 8005cf8:	08005d19 	.word	0x08005d19
 8005cfc:	08005d21 	.word	0x08005d21
 8005d00:	08005d29 	.word	0x08005d29
 8005d04:	08005d31 	.word	0x08005d31
 8005d08:	2300      	movs	r3, #0
 8005d0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d0e:	e18b      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005d10:	2304      	movs	r3, #4
 8005d12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d16:	e187      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005d18:	2308      	movs	r3, #8
 8005d1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d1e:	e183      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005d20:	2310      	movs	r3, #16
 8005d22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d26:	e17f      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005d28:	2320      	movs	r3, #32
 8005d2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d2e:	e17b      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005d30:	2340      	movs	r3, #64	; 0x40
 8005d32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d36:	e177      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005d38:	2380      	movs	r3, #128	; 0x80
 8005d3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d3e:	bf00      	nop
 8005d40:	e172      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a1c      	ldr	r2, [pc, #112]	; (8005db8 <UART_SetConfig+0x360>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d144      	bne.n	8005dd6 <UART_SetConfig+0x37e>
 8005d4c:	4b16      	ldr	r3, [pc, #88]	; (8005da8 <UART_SetConfig+0x350>)
 8005d4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d50:	f003 0307 	and.w	r3, r3, #7
 8005d54:	2b05      	cmp	r3, #5
 8005d56:	d839      	bhi.n	8005dcc <UART_SetConfig+0x374>
 8005d58:	a201      	add	r2, pc, #4	; (adr r2, 8005d60 <UART_SetConfig+0x308>)
 8005d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d5e:	bf00      	nop
 8005d60:	08005d79 	.word	0x08005d79
 8005d64:	08005d81 	.word	0x08005d81
 8005d68:	08005d89 	.word	0x08005d89
 8005d6c:	08005d91 	.word	0x08005d91
 8005d70:	08005dbd 	.word	0x08005dbd
 8005d74:	08005dc5 	.word	0x08005dc5
 8005d78:	2300      	movs	r3, #0
 8005d7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d7e:	e153      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005d80:	2304      	movs	r3, #4
 8005d82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d86:	e14f      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005d88:	2308      	movs	r3, #8
 8005d8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d8e:	e14b      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005d90:	2310      	movs	r3, #16
 8005d92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005d96:	e147      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005d98:	cfff69f3 	.word	0xcfff69f3
 8005d9c:	58000c00 	.word	0x58000c00
 8005da0:	11fff4ff 	.word	0x11fff4ff
 8005da4:	40011000 	.word	0x40011000
 8005da8:	58024400 	.word	0x58024400
 8005dac:	40004400 	.word	0x40004400
 8005db0:	40004800 	.word	0x40004800
 8005db4:	40004c00 	.word	0x40004c00
 8005db8:	40005000 	.word	0x40005000
 8005dbc:	2320      	movs	r3, #32
 8005dbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dc2:	e131      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005dc4:	2340      	movs	r3, #64	; 0x40
 8005dc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dca:	e12d      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005dcc:	2380      	movs	r3, #128	; 0x80
 8005dce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005dd2:	bf00      	nop
 8005dd4:	e128      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4ab6      	ldr	r2, [pc, #728]	; (80060b4 <UART_SetConfig+0x65c>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d178      	bne.n	8005ed2 <UART_SetConfig+0x47a>
 8005de0:	4bb5      	ldr	r3, [pc, #724]	; (80060b8 <UART_SetConfig+0x660>)
 8005de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005de4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005de8:	2b28      	cmp	r3, #40	; 0x28
 8005dea:	d86d      	bhi.n	8005ec8 <UART_SetConfig+0x470>
 8005dec:	a201      	add	r2, pc, #4	; (adr r2, 8005df4 <UART_SetConfig+0x39c>)
 8005dee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df2:	bf00      	nop
 8005df4:	08005e99 	.word	0x08005e99
 8005df8:	08005ec9 	.word	0x08005ec9
 8005dfc:	08005ec9 	.word	0x08005ec9
 8005e00:	08005ec9 	.word	0x08005ec9
 8005e04:	08005ec9 	.word	0x08005ec9
 8005e08:	08005ec9 	.word	0x08005ec9
 8005e0c:	08005ec9 	.word	0x08005ec9
 8005e10:	08005ec9 	.word	0x08005ec9
 8005e14:	08005ea1 	.word	0x08005ea1
 8005e18:	08005ec9 	.word	0x08005ec9
 8005e1c:	08005ec9 	.word	0x08005ec9
 8005e20:	08005ec9 	.word	0x08005ec9
 8005e24:	08005ec9 	.word	0x08005ec9
 8005e28:	08005ec9 	.word	0x08005ec9
 8005e2c:	08005ec9 	.word	0x08005ec9
 8005e30:	08005ec9 	.word	0x08005ec9
 8005e34:	08005ea9 	.word	0x08005ea9
 8005e38:	08005ec9 	.word	0x08005ec9
 8005e3c:	08005ec9 	.word	0x08005ec9
 8005e40:	08005ec9 	.word	0x08005ec9
 8005e44:	08005ec9 	.word	0x08005ec9
 8005e48:	08005ec9 	.word	0x08005ec9
 8005e4c:	08005ec9 	.word	0x08005ec9
 8005e50:	08005ec9 	.word	0x08005ec9
 8005e54:	08005eb1 	.word	0x08005eb1
 8005e58:	08005ec9 	.word	0x08005ec9
 8005e5c:	08005ec9 	.word	0x08005ec9
 8005e60:	08005ec9 	.word	0x08005ec9
 8005e64:	08005ec9 	.word	0x08005ec9
 8005e68:	08005ec9 	.word	0x08005ec9
 8005e6c:	08005ec9 	.word	0x08005ec9
 8005e70:	08005ec9 	.word	0x08005ec9
 8005e74:	08005eb9 	.word	0x08005eb9
 8005e78:	08005ec9 	.word	0x08005ec9
 8005e7c:	08005ec9 	.word	0x08005ec9
 8005e80:	08005ec9 	.word	0x08005ec9
 8005e84:	08005ec9 	.word	0x08005ec9
 8005e88:	08005ec9 	.word	0x08005ec9
 8005e8c:	08005ec9 	.word	0x08005ec9
 8005e90:	08005ec9 	.word	0x08005ec9
 8005e94:	08005ec1 	.word	0x08005ec1
 8005e98:	2301      	movs	r3, #1
 8005e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005e9e:	e0c3      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005ea0:	2304      	movs	r3, #4
 8005ea2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ea6:	e0bf      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005ea8:	2308      	movs	r3, #8
 8005eaa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eae:	e0bb      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005eb0:	2310      	movs	r3, #16
 8005eb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005eb6:	e0b7      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005eb8:	2320      	movs	r3, #32
 8005eba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ebe:	e0b3      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005ec0:	2340      	movs	r3, #64	; 0x40
 8005ec2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ec6:	e0af      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005ec8:	2380      	movs	r3, #128	; 0x80
 8005eca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ece:	bf00      	nop
 8005ed0:	e0aa      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a79      	ldr	r2, [pc, #484]	; (80060bc <UART_SetConfig+0x664>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d132      	bne.n	8005f42 <UART_SetConfig+0x4ea>
 8005edc:	4b76      	ldr	r3, [pc, #472]	; (80060b8 <UART_SetConfig+0x660>)
 8005ede:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ee0:	f003 0307 	and.w	r3, r3, #7
 8005ee4:	2b05      	cmp	r3, #5
 8005ee6:	d827      	bhi.n	8005f38 <UART_SetConfig+0x4e0>
 8005ee8:	a201      	add	r2, pc, #4	; (adr r2, 8005ef0 <UART_SetConfig+0x498>)
 8005eea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eee:	bf00      	nop
 8005ef0:	08005f09 	.word	0x08005f09
 8005ef4:	08005f11 	.word	0x08005f11
 8005ef8:	08005f19 	.word	0x08005f19
 8005efc:	08005f21 	.word	0x08005f21
 8005f00:	08005f29 	.word	0x08005f29
 8005f04:	08005f31 	.word	0x08005f31
 8005f08:	2300      	movs	r3, #0
 8005f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f0e:	e08b      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005f10:	2304      	movs	r3, #4
 8005f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f16:	e087      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005f18:	2308      	movs	r3, #8
 8005f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f1e:	e083      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005f20:	2310      	movs	r3, #16
 8005f22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f26:	e07f      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005f28:	2320      	movs	r3, #32
 8005f2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f2e:	e07b      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005f30:	2340      	movs	r3, #64	; 0x40
 8005f32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f36:	e077      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005f38:	2380      	movs	r3, #128	; 0x80
 8005f3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f3e:	bf00      	nop
 8005f40:	e072      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a5e      	ldr	r2, [pc, #376]	; (80060c0 <UART_SetConfig+0x668>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d132      	bne.n	8005fb2 <UART_SetConfig+0x55a>
 8005f4c:	4b5a      	ldr	r3, [pc, #360]	; (80060b8 <UART_SetConfig+0x660>)
 8005f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f50:	f003 0307 	and.w	r3, r3, #7
 8005f54:	2b05      	cmp	r3, #5
 8005f56:	d827      	bhi.n	8005fa8 <UART_SetConfig+0x550>
 8005f58:	a201      	add	r2, pc, #4	; (adr r2, 8005f60 <UART_SetConfig+0x508>)
 8005f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f5e:	bf00      	nop
 8005f60:	08005f79 	.word	0x08005f79
 8005f64:	08005f81 	.word	0x08005f81
 8005f68:	08005f89 	.word	0x08005f89
 8005f6c:	08005f91 	.word	0x08005f91
 8005f70:	08005f99 	.word	0x08005f99
 8005f74:	08005fa1 	.word	0x08005fa1
 8005f78:	2300      	movs	r3, #0
 8005f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f7e:	e053      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005f80:	2304      	movs	r3, #4
 8005f82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f86:	e04f      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005f88:	2308      	movs	r3, #8
 8005f8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f8e:	e04b      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005f90:	2310      	movs	r3, #16
 8005f92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f96:	e047      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005f98:	2320      	movs	r3, #32
 8005f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f9e:	e043      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005fa0:	2340      	movs	r3, #64	; 0x40
 8005fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fa6:	e03f      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005fa8:	2380      	movs	r3, #128	; 0x80
 8005faa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fae:	bf00      	nop
 8005fb0:	e03a      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a43      	ldr	r2, [pc, #268]	; (80060c4 <UART_SetConfig+0x66c>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d132      	bne.n	8006022 <UART_SetConfig+0x5ca>
 8005fbc:	4b3e      	ldr	r3, [pc, #248]	; (80060b8 <UART_SetConfig+0x660>)
 8005fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fc0:	f003 0307 	and.w	r3, r3, #7
 8005fc4:	2b05      	cmp	r3, #5
 8005fc6:	d827      	bhi.n	8006018 <UART_SetConfig+0x5c0>
 8005fc8:	a201      	add	r2, pc, #4	; (adr r2, 8005fd0 <UART_SetConfig+0x578>)
 8005fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fce:	bf00      	nop
 8005fd0:	08005fe9 	.word	0x08005fe9
 8005fd4:	08005ff1 	.word	0x08005ff1
 8005fd8:	08005ff9 	.word	0x08005ff9
 8005fdc:	08006001 	.word	0x08006001
 8005fe0:	08006009 	.word	0x08006009
 8005fe4:	08006011 	.word	0x08006011
 8005fe8:	2302      	movs	r3, #2
 8005fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fee:	e01b      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005ff0:	2304      	movs	r3, #4
 8005ff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ff6:	e017      	b.n	8006028 <UART_SetConfig+0x5d0>
 8005ff8:	2308      	movs	r3, #8
 8005ffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ffe:	e013      	b.n	8006028 <UART_SetConfig+0x5d0>
 8006000:	2310      	movs	r3, #16
 8006002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006006:	e00f      	b.n	8006028 <UART_SetConfig+0x5d0>
 8006008:	2320      	movs	r3, #32
 800600a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800600e:	e00b      	b.n	8006028 <UART_SetConfig+0x5d0>
 8006010:	2340      	movs	r3, #64	; 0x40
 8006012:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006016:	e007      	b.n	8006028 <UART_SetConfig+0x5d0>
 8006018:	2380      	movs	r3, #128	; 0x80
 800601a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800601e:	bf00      	nop
 8006020:	e002      	b.n	8006028 <UART_SetConfig+0x5d0>
 8006022:	2380      	movs	r3, #128	; 0x80
 8006024:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a25      	ldr	r2, [pc, #148]	; (80060c4 <UART_SetConfig+0x66c>)
 800602e:	4293      	cmp	r3, r2
 8006030:	f040 80b8 	bne.w	80061a4 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006034:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006038:	2b08      	cmp	r3, #8
 800603a:	d019      	beq.n	8006070 <UART_SetConfig+0x618>
 800603c:	2b08      	cmp	r3, #8
 800603e:	dc04      	bgt.n	800604a <UART_SetConfig+0x5f2>
 8006040:	2b02      	cmp	r3, #2
 8006042:	d009      	beq.n	8006058 <UART_SetConfig+0x600>
 8006044:	2b04      	cmp	r3, #4
 8006046:	d00b      	beq.n	8006060 <UART_SetConfig+0x608>
 8006048:	e042      	b.n	80060d0 <UART_SetConfig+0x678>
 800604a:	2b20      	cmp	r3, #32
 800604c:	d02b      	beq.n	80060a6 <UART_SetConfig+0x64e>
 800604e:	2b40      	cmp	r3, #64	; 0x40
 8006050:	d02c      	beq.n	80060ac <UART_SetConfig+0x654>
 8006052:	2b10      	cmp	r3, #16
 8006054:	d014      	beq.n	8006080 <UART_SetConfig+0x628>
 8006056:	e03b      	b.n	80060d0 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006058:	f7fe fd78 	bl	8004b4c <HAL_RCCEx_GetD3PCLK1Freq>
 800605c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800605e:	e03d      	b.n	80060dc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006060:	f107 0314 	add.w	r3, r7, #20
 8006064:	4618      	mov	r0, r3
 8006066:	f7fe fd87 	bl	8004b78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800606e:	e035      	b.n	80060dc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006070:	f107 0308 	add.w	r3, r7, #8
 8006074:	4618      	mov	r0, r3
 8006076:	f7fe fecb 	bl	8004e10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800607e:	e02d      	b.n	80060dc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006080:	4b0d      	ldr	r3, [pc, #52]	; (80060b8 <UART_SetConfig+0x660>)
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0320 	and.w	r3, r3, #32
 8006088:	2b00      	cmp	r3, #0
 800608a:	d009      	beq.n	80060a0 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800608c:	4b0a      	ldr	r3, [pc, #40]	; (80060b8 <UART_SetConfig+0x660>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	08db      	lsrs	r3, r3, #3
 8006092:	f003 0303 	and.w	r3, r3, #3
 8006096:	4a0c      	ldr	r2, [pc, #48]	; (80060c8 <UART_SetConfig+0x670>)
 8006098:	fa22 f303 	lsr.w	r3, r2, r3
 800609c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800609e:	e01d      	b.n	80060dc <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 80060a0:	4b09      	ldr	r3, [pc, #36]	; (80060c8 <UART_SetConfig+0x670>)
 80060a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80060a4:	e01a      	b.n	80060dc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80060a6:	4b09      	ldr	r3, [pc, #36]	; (80060cc <UART_SetConfig+0x674>)
 80060a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80060aa:	e017      	b.n	80060dc <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80060b2:	e013      	b.n	80060dc <UART_SetConfig+0x684>
 80060b4:	40011400 	.word	0x40011400
 80060b8:	58024400 	.word	0x58024400
 80060bc:	40007800 	.word	0x40007800
 80060c0:	40007c00 	.word	0x40007c00
 80060c4:	58000c00 	.word	0x58000c00
 80060c8:	03d09000 	.word	0x03d09000
 80060cc:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 80060d0:	2300      	movs	r3, #0
 80060d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80060d4:	2301      	movs	r3, #1
 80060d6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80060da:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80060dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060de:	2b00      	cmp	r3, #0
 80060e0:	f000 824d 	beq.w	800657e <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e8:	4aad      	ldr	r2, [pc, #692]	; (80063a0 <UART_SetConfig+0x948>)
 80060ea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060ee:	461a      	mov	r2, r3
 80060f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80060f6:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	4613      	mov	r3, r2
 80060fe:	005b      	lsls	r3, r3, #1
 8006100:	4413      	add	r3, r2
 8006102:	6a3a      	ldr	r2, [r7, #32]
 8006104:	429a      	cmp	r2, r3
 8006106:	d305      	bcc.n	8006114 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800610e:	6a3a      	ldr	r2, [r7, #32]
 8006110:	429a      	cmp	r2, r3
 8006112:	d903      	bls.n	800611c <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8006114:	2301      	movs	r3, #1
 8006116:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800611a:	e230      	b.n	800657e <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800611c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800611e:	4618      	mov	r0, r3
 8006120:	f04f 0100 	mov.w	r1, #0
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006128:	4a9d      	ldr	r2, [pc, #628]	; (80063a0 <UART_SetConfig+0x948>)
 800612a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800612e:	b29b      	uxth	r3, r3
 8006130:	f04f 0400 	mov.w	r4, #0
 8006134:	461a      	mov	r2, r3
 8006136:	4623      	mov	r3, r4
 8006138:	f7fa f922 	bl	8000380 <__aeabi_uldivmod>
 800613c:	4603      	mov	r3, r0
 800613e:	460c      	mov	r4, r1
 8006140:	4619      	mov	r1, r3
 8006142:	4622      	mov	r2, r4
 8006144:	f04f 0300 	mov.w	r3, #0
 8006148:	f04f 0400 	mov.w	r4, #0
 800614c:	0214      	lsls	r4, r2, #8
 800614e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8006152:	020b      	lsls	r3, r1, #8
 8006154:	687a      	ldr	r2, [r7, #4]
 8006156:	6852      	ldr	r2, [r2, #4]
 8006158:	0852      	lsrs	r2, r2, #1
 800615a:	4611      	mov	r1, r2
 800615c:	f04f 0200 	mov.w	r2, #0
 8006160:	eb13 0b01 	adds.w	fp, r3, r1
 8006164:	eb44 0c02 	adc.w	ip, r4, r2
 8006168:	4658      	mov	r0, fp
 800616a:	4661      	mov	r1, ip
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f04f 0400 	mov.w	r4, #0
 8006174:	461a      	mov	r2, r3
 8006176:	4623      	mov	r3, r4
 8006178:	f7fa f902 	bl	8000380 <__aeabi_uldivmod>
 800617c:	4603      	mov	r3, r0
 800617e:	460c      	mov	r4, r1
 8006180:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006184:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006188:	d308      	bcc.n	800619c <UART_SetConfig+0x744>
 800618a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006190:	d204      	bcs.n	800619c <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006198:	60da      	str	r2, [r3, #12]
 800619a:	e1f0      	b.n	800657e <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800619c:	2301      	movs	r3, #1
 800619e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80061a2:	e1ec      	b.n	800657e <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	69db      	ldr	r3, [r3, #28]
 80061a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061ac:	f040 8100 	bne.w	80063b0 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 80061b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80061b4:	2b40      	cmp	r3, #64	; 0x40
 80061b6:	f200 80b7 	bhi.w	8006328 <UART_SetConfig+0x8d0>
 80061ba:	a201      	add	r2, pc, #4	; (adr r2, 80061c0 <UART_SetConfig+0x768>)
 80061bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061c0:	080062c5 	.word	0x080062c5
 80061c4:	080062cd 	.word	0x080062cd
 80061c8:	08006329 	.word	0x08006329
 80061cc:	08006329 	.word	0x08006329
 80061d0:	080062d5 	.word	0x080062d5
 80061d4:	08006329 	.word	0x08006329
 80061d8:	08006329 	.word	0x08006329
 80061dc:	08006329 	.word	0x08006329
 80061e0:	080062e5 	.word	0x080062e5
 80061e4:	08006329 	.word	0x08006329
 80061e8:	08006329 	.word	0x08006329
 80061ec:	08006329 	.word	0x08006329
 80061f0:	08006329 	.word	0x08006329
 80061f4:	08006329 	.word	0x08006329
 80061f8:	08006329 	.word	0x08006329
 80061fc:	08006329 	.word	0x08006329
 8006200:	080062f5 	.word	0x080062f5
 8006204:	08006329 	.word	0x08006329
 8006208:	08006329 	.word	0x08006329
 800620c:	08006329 	.word	0x08006329
 8006210:	08006329 	.word	0x08006329
 8006214:	08006329 	.word	0x08006329
 8006218:	08006329 	.word	0x08006329
 800621c:	08006329 	.word	0x08006329
 8006220:	08006329 	.word	0x08006329
 8006224:	08006329 	.word	0x08006329
 8006228:	08006329 	.word	0x08006329
 800622c:	08006329 	.word	0x08006329
 8006230:	08006329 	.word	0x08006329
 8006234:	08006329 	.word	0x08006329
 8006238:	08006329 	.word	0x08006329
 800623c:	08006329 	.word	0x08006329
 8006240:	0800631b 	.word	0x0800631b
 8006244:	08006329 	.word	0x08006329
 8006248:	08006329 	.word	0x08006329
 800624c:	08006329 	.word	0x08006329
 8006250:	08006329 	.word	0x08006329
 8006254:	08006329 	.word	0x08006329
 8006258:	08006329 	.word	0x08006329
 800625c:	08006329 	.word	0x08006329
 8006260:	08006329 	.word	0x08006329
 8006264:	08006329 	.word	0x08006329
 8006268:	08006329 	.word	0x08006329
 800626c:	08006329 	.word	0x08006329
 8006270:	08006329 	.word	0x08006329
 8006274:	08006329 	.word	0x08006329
 8006278:	08006329 	.word	0x08006329
 800627c:	08006329 	.word	0x08006329
 8006280:	08006329 	.word	0x08006329
 8006284:	08006329 	.word	0x08006329
 8006288:	08006329 	.word	0x08006329
 800628c:	08006329 	.word	0x08006329
 8006290:	08006329 	.word	0x08006329
 8006294:	08006329 	.word	0x08006329
 8006298:	08006329 	.word	0x08006329
 800629c:	08006329 	.word	0x08006329
 80062a0:	08006329 	.word	0x08006329
 80062a4:	08006329 	.word	0x08006329
 80062a8:	08006329 	.word	0x08006329
 80062ac:	08006329 	.word	0x08006329
 80062b0:	08006329 	.word	0x08006329
 80062b4:	08006329 	.word	0x08006329
 80062b8:	08006329 	.word	0x08006329
 80062bc:	08006329 	.word	0x08006329
 80062c0:	08006321 	.word	0x08006321
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062c4:	f7fd fd28 	bl	8003d18 <HAL_RCC_GetPCLK1Freq>
 80062c8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80062ca:	e033      	b.n	8006334 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062cc:	f7fd fd3a 	bl	8003d44 <HAL_RCC_GetPCLK2Freq>
 80062d0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80062d2:	e02f      	b.n	8006334 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062d4:	f107 0314 	add.w	r3, r7, #20
 80062d8:	4618      	mov	r0, r3
 80062da:	f7fe fc4d 	bl	8004b78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062e2:	e027      	b.n	8006334 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062e4:	f107 0308 	add.w	r3, r7, #8
 80062e8:	4618      	mov	r0, r3
 80062ea:	f7fe fd91 	bl	8004e10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062f2:	e01f      	b.n	8006334 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062f4:	4b2b      	ldr	r3, [pc, #172]	; (80063a4 <UART_SetConfig+0x94c>)
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 0320 	and.w	r3, r3, #32
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d009      	beq.n	8006314 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006300:	4b28      	ldr	r3, [pc, #160]	; (80063a4 <UART_SetConfig+0x94c>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	08db      	lsrs	r3, r3, #3
 8006306:	f003 0303 	and.w	r3, r3, #3
 800630a:	4a27      	ldr	r2, [pc, #156]	; (80063a8 <UART_SetConfig+0x950>)
 800630c:	fa22 f303 	lsr.w	r3, r2, r3
 8006310:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006312:	e00f      	b.n	8006334 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8006314:	4b24      	ldr	r3, [pc, #144]	; (80063a8 <UART_SetConfig+0x950>)
 8006316:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006318:	e00c      	b.n	8006334 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800631a:	4b24      	ldr	r3, [pc, #144]	; (80063ac <UART_SetConfig+0x954>)
 800631c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800631e:	e009      	b.n	8006334 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006320:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006324:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006326:	e005      	b.n	8006334 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8006328:	2300      	movs	r3, #0
 800632a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800632c:	2301      	movs	r3, #1
 800632e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006332:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006336:	2b00      	cmp	r3, #0
 8006338:	f000 8121 	beq.w	800657e <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006340:	4a17      	ldr	r2, [pc, #92]	; (80063a0 <UART_SetConfig+0x948>)
 8006342:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006346:	461a      	mov	r2, r3
 8006348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800634a:	fbb3 f3f2 	udiv	r3, r3, r2
 800634e:	005a      	lsls	r2, r3, #1
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	085b      	lsrs	r3, r3, #1
 8006356:	441a      	add	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006360:	b29b      	uxth	r3, r3
 8006362:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006366:	2b0f      	cmp	r3, #15
 8006368:	d916      	bls.n	8006398 <UART_SetConfig+0x940>
 800636a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006370:	d212      	bcs.n	8006398 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006374:	b29b      	uxth	r3, r3
 8006376:	f023 030f 	bic.w	r3, r3, #15
 800637a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800637c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637e:	085b      	lsrs	r3, r3, #1
 8006380:	b29b      	uxth	r3, r3
 8006382:	f003 0307 	and.w	r3, r3, #7
 8006386:	b29a      	uxth	r2, r3
 8006388:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800638a:	4313      	orrs	r3, r2
 800638c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006394:	60da      	str	r2, [r3, #12]
 8006396:	e0f2      	b.n	800657e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8006398:	2301      	movs	r3, #1
 800639a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800639e:	e0ee      	b.n	800657e <UART_SetConfig+0xb26>
 80063a0:	080078ec 	.word	0x080078ec
 80063a4:	58024400 	.word	0x58024400
 80063a8:	03d09000 	.word	0x03d09000
 80063ac:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 80063b0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80063b4:	2b40      	cmp	r3, #64	; 0x40
 80063b6:	f200 80b7 	bhi.w	8006528 <UART_SetConfig+0xad0>
 80063ba:	a201      	add	r2, pc, #4	; (adr r2, 80063c0 <UART_SetConfig+0x968>)
 80063bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c0:	080064c5 	.word	0x080064c5
 80063c4:	080064cd 	.word	0x080064cd
 80063c8:	08006529 	.word	0x08006529
 80063cc:	08006529 	.word	0x08006529
 80063d0:	080064d5 	.word	0x080064d5
 80063d4:	08006529 	.word	0x08006529
 80063d8:	08006529 	.word	0x08006529
 80063dc:	08006529 	.word	0x08006529
 80063e0:	080064e5 	.word	0x080064e5
 80063e4:	08006529 	.word	0x08006529
 80063e8:	08006529 	.word	0x08006529
 80063ec:	08006529 	.word	0x08006529
 80063f0:	08006529 	.word	0x08006529
 80063f4:	08006529 	.word	0x08006529
 80063f8:	08006529 	.word	0x08006529
 80063fc:	08006529 	.word	0x08006529
 8006400:	080064f5 	.word	0x080064f5
 8006404:	08006529 	.word	0x08006529
 8006408:	08006529 	.word	0x08006529
 800640c:	08006529 	.word	0x08006529
 8006410:	08006529 	.word	0x08006529
 8006414:	08006529 	.word	0x08006529
 8006418:	08006529 	.word	0x08006529
 800641c:	08006529 	.word	0x08006529
 8006420:	08006529 	.word	0x08006529
 8006424:	08006529 	.word	0x08006529
 8006428:	08006529 	.word	0x08006529
 800642c:	08006529 	.word	0x08006529
 8006430:	08006529 	.word	0x08006529
 8006434:	08006529 	.word	0x08006529
 8006438:	08006529 	.word	0x08006529
 800643c:	08006529 	.word	0x08006529
 8006440:	0800651b 	.word	0x0800651b
 8006444:	08006529 	.word	0x08006529
 8006448:	08006529 	.word	0x08006529
 800644c:	08006529 	.word	0x08006529
 8006450:	08006529 	.word	0x08006529
 8006454:	08006529 	.word	0x08006529
 8006458:	08006529 	.word	0x08006529
 800645c:	08006529 	.word	0x08006529
 8006460:	08006529 	.word	0x08006529
 8006464:	08006529 	.word	0x08006529
 8006468:	08006529 	.word	0x08006529
 800646c:	08006529 	.word	0x08006529
 8006470:	08006529 	.word	0x08006529
 8006474:	08006529 	.word	0x08006529
 8006478:	08006529 	.word	0x08006529
 800647c:	08006529 	.word	0x08006529
 8006480:	08006529 	.word	0x08006529
 8006484:	08006529 	.word	0x08006529
 8006488:	08006529 	.word	0x08006529
 800648c:	08006529 	.word	0x08006529
 8006490:	08006529 	.word	0x08006529
 8006494:	08006529 	.word	0x08006529
 8006498:	08006529 	.word	0x08006529
 800649c:	08006529 	.word	0x08006529
 80064a0:	08006529 	.word	0x08006529
 80064a4:	08006529 	.word	0x08006529
 80064a8:	08006529 	.word	0x08006529
 80064ac:	08006529 	.word	0x08006529
 80064b0:	08006529 	.word	0x08006529
 80064b4:	08006529 	.word	0x08006529
 80064b8:	08006529 	.word	0x08006529
 80064bc:	08006529 	.word	0x08006529
 80064c0:	08006521 	.word	0x08006521
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064c4:	f7fd fc28 	bl	8003d18 <HAL_RCC_GetPCLK1Freq>
 80064c8:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80064ca:	e033      	b.n	8006534 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064cc:	f7fd fc3a 	bl	8003d44 <HAL_RCC_GetPCLK2Freq>
 80064d0:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80064d2:	e02f      	b.n	8006534 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80064d4:	f107 0314 	add.w	r3, r7, #20
 80064d8:	4618      	mov	r0, r3
 80064da:	f7fe fb4d 	bl	8004b78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80064e2:	e027      	b.n	8006534 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80064e4:	f107 0308 	add.w	r3, r7, #8
 80064e8:	4618      	mov	r0, r3
 80064ea:	f7fe fc91 	bl	8004e10 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80064f2:	e01f      	b.n	8006534 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80064f4:	4b2c      	ldr	r3, [pc, #176]	; (80065a8 <UART_SetConfig+0xb50>)
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f003 0320 	and.w	r3, r3, #32
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d009      	beq.n	8006514 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006500:	4b29      	ldr	r3, [pc, #164]	; (80065a8 <UART_SetConfig+0xb50>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	08db      	lsrs	r3, r3, #3
 8006506:	f003 0303 	and.w	r3, r3, #3
 800650a:	4a28      	ldr	r2, [pc, #160]	; (80065ac <UART_SetConfig+0xb54>)
 800650c:	fa22 f303 	lsr.w	r3, r2, r3
 8006510:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006512:	e00f      	b.n	8006534 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8006514:	4b25      	ldr	r3, [pc, #148]	; (80065ac <UART_SetConfig+0xb54>)
 8006516:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006518:	e00c      	b.n	8006534 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800651a:	4b25      	ldr	r3, [pc, #148]	; (80065b0 <UART_SetConfig+0xb58>)
 800651c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800651e:	e009      	b.n	8006534 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006520:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006524:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006526:	e005      	b.n	8006534 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8006528:	2300      	movs	r3, #0
 800652a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800652c:	2301      	movs	r3, #1
 800652e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006532:	bf00      	nop
    }

    if (pclk != 0U)
 8006534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006536:	2b00      	cmp	r3, #0
 8006538:	d021      	beq.n	800657e <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800653e:	4a1d      	ldr	r2, [pc, #116]	; (80065b4 <UART_SetConfig+0xb5c>)
 8006540:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006544:	461a      	mov	r2, r3
 8006546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006548:	fbb3 f2f2 	udiv	r2, r3, r2
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	085b      	lsrs	r3, r3, #1
 8006552:	441a      	add	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	fbb2 f3f3 	udiv	r3, r2, r3
 800655c:	b29b      	uxth	r3, r3
 800655e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006562:	2b0f      	cmp	r3, #15
 8006564:	d908      	bls.n	8006578 <UART_SetConfig+0xb20>
 8006566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800656c:	d204      	bcs.n	8006578 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006574:	60da      	str	r2, [r3, #12]
 8006576:	e002      	b.n	800657e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2201      	movs	r2, #1
 8006582:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2201      	movs	r2, #1
 800658a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2200      	movs	r2, #0
 8006592:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2200      	movs	r2, #0
 8006598:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800659a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3738      	adds	r7, #56	; 0x38
 80065a2:	46bd      	mov	sp, r7
 80065a4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80065a8:	58024400 	.word	0x58024400
 80065ac:	03d09000 	.word	0x03d09000
 80065b0:	003d0900 	.word	0x003d0900
 80065b4:	080078ec 	.word	0x080078ec

080065b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065b8:	b480      	push	{r7}
 80065ba:	b083      	sub	sp, #12
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c4:	f003 0301 	and.w	r3, r3, #1
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00a      	beq.n	80065e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	430a      	orrs	r2, r1
 80065e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e6:	f003 0302 	and.w	r3, r3, #2
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00a      	beq.n	8006604 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	430a      	orrs	r2, r1
 8006602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006608:	f003 0304 	and.w	r3, r3, #4
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00a      	beq.n	8006626 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	430a      	orrs	r2, r1
 8006624:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662a:	f003 0308 	and.w	r3, r3, #8
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00a      	beq.n	8006648 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	430a      	orrs	r2, r1
 8006646:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800664c:	f003 0310 	and.w	r3, r3, #16
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00a      	beq.n	800666a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	430a      	orrs	r2, r1
 8006668:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800666e:	f003 0320 	and.w	r3, r3, #32
 8006672:	2b00      	cmp	r3, #0
 8006674:	d00a      	beq.n	800668c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	430a      	orrs	r2, r1
 800668a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006694:	2b00      	cmp	r3, #0
 8006696:	d01a      	beq.n	80066ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	430a      	orrs	r2, r1
 80066ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066b6:	d10a      	bne.n	80066ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	430a      	orrs	r2, r1
 80066cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d00a      	beq.n	80066f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	430a      	orrs	r2, r1
 80066ee:	605a      	str	r2, [r3, #4]
  }
}
 80066f0:	bf00      	nop
 80066f2:	370c      	adds	r7, #12
 80066f4:	46bd      	mov	sp, r7
 80066f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fa:	4770      	bx	lr

080066fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b086      	sub	sp, #24
 8006700:	af02      	add	r7, sp, #8
 8006702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800670c:	f7fb fab4 	bl	8001c78 <HAL_GetTick>
 8006710:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f003 0308 	and.w	r3, r3, #8
 800671c:	2b08      	cmp	r3, #8
 800671e:	d10e      	bne.n	800673e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006720:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006724:	9300      	str	r3, [sp, #0]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2200      	movs	r2, #0
 800672a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 f82c 	bl	800678c <UART_WaitOnFlagUntilTimeout>
 8006734:	4603      	mov	r3, r0
 8006736:	2b00      	cmp	r3, #0
 8006738:	d001      	beq.n	800673e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e022      	b.n	8006784 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0304 	and.w	r3, r3, #4
 8006748:	2b04      	cmp	r3, #4
 800674a:	d10e      	bne.n	800676a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800674c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006750:	9300      	str	r3, [sp, #0]
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	f000 f816 	bl	800678c <UART_WaitOnFlagUntilTimeout>
 8006760:	4603      	mov	r3, r0
 8006762:	2b00      	cmp	r3, #0
 8006764:	d001      	beq.n	800676a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006766:	2303      	movs	r3, #3
 8006768:	e00c      	b.n	8006784 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2220      	movs	r2, #32
 800676e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2220      	movs	r2, #32
 8006776:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3710      	adds	r7, #16
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	60f8      	str	r0, [r7, #12]
 8006794:	60b9      	str	r1, [r7, #8]
 8006796:	603b      	str	r3, [r7, #0]
 8006798:	4613      	mov	r3, r2
 800679a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800679c:	e062      	b.n	8006864 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067a4:	d05e      	beq.n	8006864 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067a6:	f7fb fa67 	bl	8001c78 <HAL_GetTick>
 80067aa:	4602      	mov	r2, r0
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	1ad3      	subs	r3, r2, r3
 80067b0:	69ba      	ldr	r2, [r7, #24]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d302      	bcc.n	80067bc <UART_WaitOnFlagUntilTimeout+0x30>
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d11d      	bne.n	80067f8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	681a      	ldr	r2, [r3, #0]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80067ca:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	689a      	ldr	r2, [r3, #8]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f022 0201 	bic.w	r2, r2, #1
 80067da:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2220      	movs	r2, #32
 80067e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2220      	movs	r2, #32
 80067e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e045      	b.n	8006884 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f003 0304 	and.w	r3, r3, #4
 8006802:	2b00      	cmp	r3, #0
 8006804:	d02e      	beq.n	8006864 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	69db      	ldr	r3, [r3, #28]
 800680c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006810:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006814:	d126      	bne.n	8006864 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800681e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800682e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	689a      	ldr	r2, [r3, #8]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f022 0201 	bic.w	r2, r2, #1
 800683e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2220      	movs	r2, #32
 8006844:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	2220      	movs	r2, #32
 800684c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	2220      	movs	r2, #32
 8006854:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8006860:	2303      	movs	r3, #3
 8006862:	e00f      	b.n	8006884 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	69da      	ldr	r2, [r3, #28]
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	4013      	ands	r3, r2
 800686e:	68ba      	ldr	r2, [r7, #8]
 8006870:	429a      	cmp	r2, r3
 8006872:	bf0c      	ite	eq
 8006874:	2301      	moveq	r3, #1
 8006876:	2300      	movne	r3, #0
 8006878:	b2db      	uxtb	r3, r3
 800687a:	461a      	mov	r2, r3
 800687c:	79fb      	ldrb	r3, [r7, #7]
 800687e:	429a      	cmp	r2, r3
 8006880:	d08d      	beq.n	800679e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3710      	adds	r7, #16
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}

0800688c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800688c:	b480      	push	{r7}
 800688e:	b085      	sub	sp, #20
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800689a:	2b01      	cmp	r3, #1
 800689c:	d101      	bne.n	80068a2 <HAL_UARTEx_DisableFifoMode+0x16>
 800689e:	2302      	movs	r3, #2
 80068a0:	e027      	b.n	80068f2 <HAL_UARTEx_DisableFifoMode+0x66>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2224      	movs	r2, #36	; 0x24
 80068ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f022 0201 	bic.w	r2, r2, #1
 80068c8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80068d0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2200      	movs	r2, #0
 80068d6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	68fa      	ldr	r2, [r7, #12]
 80068de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2220      	movs	r2, #32
 80068e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2200      	movs	r2, #0
 80068ec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3714      	adds	r7, #20
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr

080068fe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80068fe:	b580      	push	{r7, lr}
 8006900:	b084      	sub	sp, #16
 8006902:	af00      	add	r7, sp, #0
 8006904:	6078      	str	r0, [r7, #4]
 8006906:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800690e:	2b01      	cmp	r3, #1
 8006910:	d101      	bne.n	8006916 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006912:	2302      	movs	r3, #2
 8006914:	e02d      	b.n	8006972 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2201      	movs	r2, #1
 800691a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2224      	movs	r2, #36	; 0x24
 8006922:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f022 0201 	bic.w	r2, r2, #1
 800693c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	683a      	ldr	r2, [r7, #0]
 800694e:	430a      	orrs	r2, r1
 8006950:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	f000 f850 	bl	80069f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2220      	movs	r2, #32
 8006964:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2200      	movs	r2, #0
 800696c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3710      	adds	r7, #16
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800697a:	b580      	push	{r7, lr}
 800697c:	b084      	sub	sp, #16
 800697e:	af00      	add	r7, sp, #0
 8006980:	6078      	str	r0, [r7, #4]
 8006982:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800698a:	2b01      	cmp	r3, #1
 800698c:	d101      	bne.n	8006992 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800698e:	2302      	movs	r3, #2
 8006990:	e02d      	b.n	80069ee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2201      	movs	r2, #1
 8006996:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2224      	movs	r2, #36	; 0x24
 800699e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	f022 0201 	bic.w	r2, r2, #1
 80069b8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	683a      	ldr	r2, [r7, #0]
 80069ca:	430a      	orrs	r2, r1
 80069cc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	f000 f812 	bl	80069f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2220      	movs	r2, #32
 80069e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80069ec:	2300      	movs	r3, #0
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3710      	adds	r7, #16
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}
	...

080069f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b089      	sub	sp, #36	; 0x24
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8006a00:	4a2f      	ldr	r2, [pc, #188]	; (8006ac0 <UARTEx_SetNbDataToProcess+0xc8>)
 8006a02:	f107 0314 	add.w	r3, r7, #20
 8006a06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006a0a:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8006a0e:	4a2d      	ldr	r2, [pc, #180]	; (8006ac4 <UARTEx_SetNbDataToProcess+0xcc>)
 8006a10:	f107 030c 	add.w	r3, r7, #12
 8006a14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8006a18:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d108      	bne.n	8006a36 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006a34:	e03d      	b.n	8006ab2 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006a36:	2310      	movs	r3, #16
 8006a38:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006a3a:	2310      	movs	r3, #16
 8006a3c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	0e5b      	lsrs	r3, r3, #25
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	f003 0307 	and.w	r3, r3, #7
 8006a4c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	689b      	ldr	r3, [r3, #8]
 8006a54:	0f5b      	lsrs	r3, r3, #29
 8006a56:	b2db      	uxtb	r3, r3
 8006a58:	f003 0307 	and.w	r3, r3, #7
 8006a5c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8006a5e:	7fbb      	ldrb	r3, [r7, #30]
 8006a60:	7f3a      	ldrb	r2, [r7, #28]
 8006a62:	f107 0120 	add.w	r1, r7, #32
 8006a66:	440a      	add	r2, r1
 8006a68:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006a6c:	fb02 f303 	mul.w	r3, r2, r3
 8006a70:	7f3a      	ldrb	r2, [r7, #28]
 8006a72:	f107 0120 	add.w	r1, r7, #32
 8006a76:	440a      	add	r2, r1
 8006a78:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006a7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8006a88:	7ffb      	ldrb	r3, [r7, #31]
 8006a8a:	7f7a      	ldrb	r2, [r7, #29]
 8006a8c:	f107 0120 	add.w	r1, r7, #32
 8006a90:	440a      	add	r2, r1
 8006a92:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8006a96:	fb02 f303 	mul.w	r3, r2, r3
 8006a9a:	7f7a      	ldrb	r2, [r7, #29]
 8006a9c:	f107 0120 	add.w	r1, r7, #32
 8006aa0:	440a      	add	r2, r1
 8006aa2:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8006aa6:	fb93 f3f2 	sdiv	r3, r3, r2
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006ab2:	bf00      	nop
 8006ab4:	3724      	adds	r7, #36	; 0x24
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	080078cc 	.word	0x080078cc
 8006ac4:	080078d4 	.word	0x080078d4

08006ac8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ac8:	b084      	sub	sp, #16
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b084      	sub	sp, #16
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
 8006ad2:	f107 001c 	add.w	r0, r7, #28
 8006ad6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d120      	bne.n	8006b22 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	68da      	ldr	r2, [r3, #12]
 8006af0:	4b25      	ldr	r3, [pc, #148]	; (8006b88 <USB_CoreInit+0xc0>)
 8006af2:	4013      	ands	r3, r2
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006b04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d105      	bne.n	8006b16 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	68db      	ldr	r3, [r3, #12]
 8006b0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 fa4c 	bl	8006fb4 <USB_CoreReset>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	73fb      	strb	r3, [r7, #15]
 8006b20:	e01a      	b.n	8006b58 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 fa40 	bl	8006fb4 <USB_CoreReset>
 8006b34:	4603      	mov	r3, r0
 8006b36:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d106      	bne.n	8006b4c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	639a      	str	r2, [r3, #56]	; 0x38
 8006b4a:	e005      	b.n	8006b58 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b50:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d10b      	bne.n	8006b76 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	f043 0206 	orr.w	r2, r3, #6
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	689b      	ldr	r3, [r3, #8]
 8006b6e:	f043 0220 	orr.w	r2, r3, #32
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3710      	adds	r7, #16
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b82:	b004      	add	sp, #16
 8006b84:	4770      	bx	lr
 8006b86:	bf00      	nop
 8006b88:	ffbdffbf 	.word	0xffbdffbf

08006b8c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	f023 0201 	bic.w	r2, r3, #1
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	370c      	adds	r7, #12
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006bae:	b580      	push	{r7, lr}
 8006bb0:	b082      	sub	sp, #8
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
 8006bb6:	460b      	mov	r3, r1
 8006bb8:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	68db      	ldr	r3, [r3, #12]
 8006bbe:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006bc6:	78fb      	ldrb	r3, [r7, #3]
 8006bc8:	2b01      	cmp	r3, #1
 8006bca:	d106      	bne.n	8006bda <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	68db      	ldr	r3, [r3, #12]
 8006bd0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	60da      	str	r2, [r3, #12]
 8006bd8:	e00b      	b.n	8006bf2 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006bda:	78fb      	ldrb	r3, [r7, #3]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d106      	bne.n	8006bee <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	60da      	str	r2, [r3, #12]
 8006bec:	e001      	b.n	8006bf2 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e003      	b.n	8006bfa <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8006bf2:	2032      	movs	r0, #50	; 0x32
 8006bf4:	f7fb f84c 	bl	8001c90 <HAL_Delay>

  return HAL_OK;
 8006bf8:	2300      	movs	r3, #0
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3708      	adds	r7, #8
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
	...

08006c04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006c04:	b084      	sub	sp, #16
 8006c06:	b580      	push	{r7, lr}
 8006c08:	b086      	sub	sp, #24
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
 8006c0e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006c12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006c16:	2300      	movs	r3, #0
 8006c18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006c1e:	2300      	movs	r3, #0
 8006c20:	613b      	str	r3, [r7, #16]
 8006c22:	e009      	b.n	8006c38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	693b      	ldr	r3, [r7, #16]
 8006c28:	3340      	adds	r3, #64	; 0x40
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	4413      	add	r3, r2
 8006c2e:	2200      	movs	r2, #0
 8006c30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	3301      	adds	r3, #1
 8006c36:	613b      	str	r3, [r7, #16]
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	2b0e      	cmp	r3, #14
 8006c3c:	d9f2      	bls.n	8006c24 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d11c      	bne.n	8006c7e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c52:	f043 0302 	orr.w	r3, r3, #2
 8006c56:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	601a      	str	r2, [r3, #0]
 8006c7c:	e005      	b.n	8006c8a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c82:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c90:	461a      	mov	r2, r3
 8006c92:	2300      	movs	r3, #0
 8006c94:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	680b      	ldr	r3, [r1, #0]
 8006ca8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d10c      	bne.n	8006cca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d104      	bne.n	8006cc0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006cb6:	2100      	movs	r1, #0
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 f949 	bl	8006f50 <USB_SetDevSpeed>
 8006cbe:	e008      	b.n	8006cd2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006cc0:	2101      	movs	r1, #1
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f944 	bl	8006f50 <USB_SetDevSpeed>
 8006cc8:	e003      	b.n	8006cd2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006cca:	2103      	movs	r1, #3
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 f93f 	bl	8006f50 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006cd2:	2110      	movs	r1, #16
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 f8f3 	bl	8006ec0 <USB_FlushTxFifo>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d001      	beq.n	8006ce4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 f911 	bl	8006f0c <USB_FlushRxFifo>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d001      	beq.n	8006cf4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d06:	461a      	mov	r2, r3
 8006d08:	2300      	movs	r3, #0
 8006d0a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d12:	461a      	mov	r2, r3
 8006d14:	2300      	movs	r3, #0
 8006d16:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006d18:	2300      	movs	r3, #0
 8006d1a:	613b      	str	r3, [r7, #16]
 8006d1c:	e043      	b.n	8006da6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	015a      	lsls	r2, r3, #5
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	4413      	add	r3, r2
 8006d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006d30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006d34:	d118      	bne.n	8006d68 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d10a      	bne.n	8006d52 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	015a      	lsls	r2, r3, #5
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	4413      	add	r3, r2
 8006d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d48:	461a      	mov	r2, r3
 8006d4a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006d4e:	6013      	str	r3, [r2, #0]
 8006d50:	e013      	b.n	8006d7a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	015a      	lsls	r2, r3, #5
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	4413      	add	r3, r2
 8006d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d5e:	461a      	mov	r2, r3
 8006d60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006d64:	6013      	str	r3, [r2, #0]
 8006d66:	e008      	b.n	8006d7a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	015a      	lsls	r2, r3, #5
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	4413      	add	r3, r2
 8006d70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d74:	461a      	mov	r2, r3
 8006d76:	2300      	movs	r3, #0
 8006d78:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	015a      	lsls	r2, r3, #5
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	4413      	add	r3, r2
 8006d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d86:	461a      	mov	r2, r3
 8006d88:	2300      	movs	r3, #0
 8006d8a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	015a      	lsls	r2, r3, #5
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	4413      	add	r3, r2
 8006d94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d98:	461a      	mov	r2, r3
 8006d9a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d9e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	3301      	adds	r3, #1
 8006da4:	613b      	str	r3, [r7, #16]
 8006da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da8:	693a      	ldr	r2, [r7, #16]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d3b7      	bcc.n	8006d1e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006dae:	2300      	movs	r3, #0
 8006db0:	613b      	str	r3, [r7, #16]
 8006db2:	e043      	b.n	8006e3c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	015a      	lsls	r2, r3, #5
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	4413      	add	r3, r2
 8006dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006dc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dca:	d118      	bne.n	8006dfe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d10a      	bne.n	8006de8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	015a      	lsls	r2, r3, #5
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	4413      	add	r3, r2
 8006dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dde:	461a      	mov	r2, r3
 8006de0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006de4:	6013      	str	r3, [r2, #0]
 8006de6:	e013      	b.n	8006e10 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	015a      	lsls	r2, r3, #5
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	4413      	add	r3, r2
 8006df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006df4:	461a      	mov	r2, r3
 8006df6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006dfa:	6013      	str	r3, [r2, #0]
 8006dfc:	e008      	b.n	8006e10 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	015a      	lsls	r2, r3, #5
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	4413      	add	r3, r2
 8006e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	015a      	lsls	r2, r3, #5
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	4413      	add	r3, r2
 8006e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	2300      	movs	r3, #0
 8006e20:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	015a      	lsls	r2, r3, #5
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	4413      	add	r3, r2
 8006e2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e2e:	461a      	mov	r2, r3
 8006e30:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006e34:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	3301      	adds	r3, #1
 8006e3a:	613b      	str	r3, [r7, #16]
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3e:	693a      	ldr	r2, [r7, #16]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d3b7      	bcc.n	8006db4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e4a:	691b      	ldr	r3, [r3, #16]
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e56:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006e64:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d105      	bne.n	8006e78 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	f043 0210 	orr.w	r2, r3, #16
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	699a      	ldr	r2, [r3, #24]
 8006e7c:	4b0e      	ldr	r3, [pc, #56]	; (8006eb8 <USB_DevInit+0x2b4>)
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	687a      	ldr	r2, [r7, #4]
 8006e82:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d005      	beq.n	8006e96 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	699b      	ldr	r3, [r3, #24]
 8006e8e:	f043 0208 	orr.w	r2, r3, #8
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e98:	2b01      	cmp	r3, #1
 8006e9a:	d105      	bne.n	8006ea8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	699a      	ldr	r2, [r3, #24]
 8006ea0:	4b06      	ldr	r3, [pc, #24]	; (8006ebc <USB_DevInit+0x2b8>)
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	687a      	ldr	r2, [r7, #4]
 8006ea6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006ea8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	3718      	adds	r7, #24
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006eb4:	b004      	add	sp, #16
 8006eb6:	4770      	bx	lr
 8006eb8:	803c3800 	.word	0x803c3800
 8006ebc:	40000004 	.word	0x40000004

08006ec0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	019b      	lsls	r3, r3, #6
 8006ed2:	f043 0220 	orr.w	r2, r3, #32
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	3301      	adds	r3, #1
 8006ede:	60fb      	str	r3, [r7, #12]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	4a09      	ldr	r2, [pc, #36]	; (8006f08 <USB_FlushTxFifo+0x48>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d901      	bls.n	8006eec <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006ee8:	2303      	movs	r3, #3
 8006eea:	e006      	b.n	8006efa <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	691b      	ldr	r3, [r3, #16]
 8006ef0:	f003 0320 	and.w	r3, r3, #32
 8006ef4:	2b20      	cmp	r3, #32
 8006ef6:	d0f0      	beq.n	8006eda <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	3714      	adds	r7, #20
 8006efe:	46bd      	mov	sp, r7
 8006f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f04:	4770      	bx	lr
 8006f06:	bf00      	nop
 8006f08:	00030d40 	.word	0x00030d40

08006f0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006f14:	2300      	movs	r3, #0
 8006f16:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2210      	movs	r2, #16
 8006f1c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	3301      	adds	r3, #1
 8006f22:	60fb      	str	r3, [r7, #12]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	4a09      	ldr	r2, [pc, #36]	; (8006f4c <USB_FlushRxFifo+0x40>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d901      	bls.n	8006f30 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e006      	b.n	8006f3e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	691b      	ldr	r3, [r3, #16]
 8006f34:	f003 0310 	and.w	r3, r3, #16
 8006f38:	2b10      	cmp	r3, #16
 8006f3a:	d0f0      	beq.n	8006f1e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006f3c:	2300      	movs	r3, #0
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3714      	adds	r7, #20
 8006f42:	46bd      	mov	sp, r7
 8006f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f48:	4770      	bx	lr
 8006f4a:	bf00      	nop
 8006f4c:	00030d40 	.word	0x00030d40

08006f50 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	460b      	mov	r3, r1
 8006f5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f66:	681a      	ldr	r2, [r3, #0]
 8006f68:	78fb      	ldrb	r3, [r7, #3]
 8006f6a:	68f9      	ldr	r1, [r7, #12]
 8006f6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f70:	4313      	orrs	r3, r2
 8006f72:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006f74:	2300      	movs	r3, #0
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3714      	adds	r7, #20
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr

08006f82 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006f82:	b580      	push	{r7, lr}
 8006f84:	b084      	sub	sp, #16
 8006f86:	af00      	add	r7, sp, #0
 8006f88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f9c:	f043 0302 	orr.w	r3, r3, #2
 8006fa0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006fa2:	2003      	movs	r0, #3
 8006fa4:	f7fa fe74 	bl	8001c90 <HAL_Delay>

  return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3710      	adds	r7, #16
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	bd80      	pop	{r7, pc}
	...

08006fb4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	60fb      	str	r3, [r7, #12]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	4a13      	ldr	r2, [pc, #76]	; (8007018 <USB_CoreReset+0x64>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d901      	bls.n	8006fd2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006fce:	2303      	movs	r3, #3
 8006fd0:	e01b      	b.n	800700a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	daf2      	bge.n	8006fc0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	f043 0201 	orr.w	r2, r3, #1
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	3301      	adds	r3, #1
 8006fee:	60fb      	str	r3, [r7, #12]
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	4a09      	ldr	r2, [pc, #36]	; (8007018 <USB_CoreReset+0x64>)
 8006ff4:	4293      	cmp	r3, r2
 8006ff6:	d901      	bls.n	8006ffc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e006      	b.n	800700a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	f003 0301 	and.w	r3, r3, #1
 8007004:	2b01      	cmp	r3, #1
 8007006:	d0f0      	beq.n	8006fea <USB_CoreReset+0x36>

  return HAL_OK;
 8007008:	2300      	movs	r3, #0
}
 800700a:	4618      	mov	r0, r3
 800700c:	3714      	adds	r7, #20
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr
 8007016:	bf00      	nop
 8007018:	00030d40 	.word	0x00030d40

0800701c <__errno>:
 800701c:	4b01      	ldr	r3, [pc, #4]	; (8007024 <__errno+0x8>)
 800701e:	6818      	ldr	r0, [r3, #0]
 8007020:	4770      	bx	lr
 8007022:	bf00      	nop
 8007024:	24000018 	.word	0x24000018

08007028 <__libc_init_array>:
 8007028:	b570      	push	{r4, r5, r6, lr}
 800702a:	4e0d      	ldr	r6, [pc, #52]	; (8007060 <__libc_init_array+0x38>)
 800702c:	4c0d      	ldr	r4, [pc, #52]	; (8007064 <__libc_init_array+0x3c>)
 800702e:	1ba4      	subs	r4, r4, r6
 8007030:	10a4      	asrs	r4, r4, #2
 8007032:	2500      	movs	r5, #0
 8007034:	42a5      	cmp	r5, r4
 8007036:	d109      	bne.n	800704c <__libc_init_array+0x24>
 8007038:	4e0b      	ldr	r6, [pc, #44]	; (8007068 <__libc_init_array+0x40>)
 800703a:	4c0c      	ldr	r4, [pc, #48]	; (800706c <__libc_init_array+0x44>)
 800703c:	f000 fc26 	bl	800788c <_init>
 8007040:	1ba4      	subs	r4, r4, r6
 8007042:	10a4      	asrs	r4, r4, #2
 8007044:	2500      	movs	r5, #0
 8007046:	42a5      	cmp	r5, r4
 8007048:	d105      	bne.n	8007056 <__libc_init_array+0x2e>
 800704a:	bd70      	pop	{r4, r5, r6, pc}
 800704c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007050:	4798      	blx	r3
 8007052:	3501      	adds	r5, #1
 8007054:	e7ee      	b.n	8007034 <__libc_init_array+0xc>
 8007056:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800705a:	4798      	blx	r3
 800705c:	3501      	adds	r5, #1
 800705e:	e7f2      	b.n	8007046 <__libc_init_array+0x1e>
 8007060:	08007940 	.word	0x08007940
 8007064:	08007940 	.word	0x08007940
 8007068:	08007940 	.word	0x08007940
 800706c:	08007944 	.word	0x08007944

08007070 <memset>:
 8007070:	4402      	add	r2, r0
 8007072:	4603      	mov	r3, r0
 8007074:	4293      	cmp	r3, r2
 8007076:	d100      	bne.n	800707a <memset+0xa>
 8007078:	4770      	bx	lr
 800707a:	f803 1b01 	strb.w	r1, [r3], #1
 800707e:	e7f9      	b.n	8007074 <memset+0x4>

08007080 <siprintf>:
 8007080:	b40e      	push	{r1, r2, r3}
 8007082:	b500      	push	{lr}
 8007084:	b09c      	sub	sp, #112	; 0x70
 8007086:	ab1d      	add	r3, sp, #116	; 0x74
 8007088:	9002      	str	r0, [sp, #8]
 800708a:	9006      	str	r0, [sp, #24]
 800708c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007090:	4809      	ldr	r0, [pc, #36]	; (80070b8 <siprintf+0x38>)
 8007092:	9107      	str	r1, [sp, #28]
 8007094:	9104      	str	r1, [sp, #16]
 8007096:	4909      	ldr	r1, [pc, #36]	; (80070bc <siprintf+0x3c>)
 8007098:	f853 2b04 	ldr.w	r2, [r3], #4
 800709c:	9105      	str	r1, [sp, #20]
 800709e:	6800      	ldr	r0, [r0, #0]
 80070a0:	9301      	str	r3, [sp, #4]
 80070a2:	a902      	add	r1, sp, #8
 80070a4:	f000 f866 	bl	8007174 <_svfiprintf_r>
 80070a8:	9b02      	ldr	r3, [sp, #8]
 80070aa:	2200      	movs	r2, #0
 80070ac:	701a      	strb	r2, [r3, #0]
 80070ae:	b01c      	add	sp, #112	; 0x70
 80070b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80070b4:	b003      	add	sp, #12
 80070b6:	4770      	bx	lr
 80070b8:	24000018 	.word	0x24000018
 80070bc:	ffff0208 	.word	0xffff0208

080070c0 <__ssputs_r>:
 80070c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070c4:	688e      	ldr	r6, [r1, #8]
 80070c6:	429e      	cmp	r6, r3
 80070c8:	4682      	mov	sl, r0
 80070ca:	460c      	mov	r4, r1
 80070cc:	4690      	mov	r8, r2
 80070ce:	4699      	mov	r9, r3
 80070d0:	d837      	bhi.n	8007142 <__ssputs_r+0x82>
 80070d2:	898a      	ldrh	r2, [r1, #12]
 80070d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80070d8:	d031      	beq.n	800713e <__ssputs_r+0x7e>
 80070da:	6825      	ldr	r5, [r4, #0]
 80070dc:	6909      	ldr	r1, [r1, #16]
 80070de:	1a6f      	subs	r7, r5, r1
 80070e0:	6965      	ldr	r5, [r4, #20]
 80070e2:	2302      	movs	r3, #2
 80070e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80070e8:	fb95 f5f3 	sdiv	r5, r5, r3
 80070ec:	f109 0301 	add.w	r3, r9, #1
 80070f0:	443b      	add	r3, r7
 80070f2:	429d      	cmp	r5, r3
 80070f4:	bf38      	it	cc
 80070f6:	461d      	movcc	r5, r3
 80070f8:	0553      	lsls	r3, r2, #21
 80070fa:	d530      	bpl.n	800715e <__ssputs_r+0x9e>
 80070fc:	4629      	mov	r1, r5
 80070fe:	f000 fb2b 	bl	8007758 <_malloc_r>
 8007102:	4606      	mov	r6, r0
 8007104:	b950      	cbnz	r0, 800711c <__ssputs_r+0x5c>
 8007106:	230c      	movs	r3, #12
 8007108:	f8ca 3000 	str.w	r3, [sl]
 800710c:	89a3      	ldrh	r3, [r4, #12]
 800710e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007112:	81a3      	strh	r3, [r4, #12]
 8007114:	f04f 30ff 	mov.w	r0, #4294967295
 8007118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800711c:	463a      	mov	r2, r7
 800711e:	6921      	ldr	r1, [r4, #16]
 8007120:	f000 faa8 	bl	8007674 <memcpy>
 8007124:	89a3      	ldrh	r3, [r4, #12]
 8007126:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800712a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800712e:	81a3      	strh	r3, [r4, #12]
 8007130:	6126      	str	r6, [r4, #16]
 8007132:	6165      	str	r5, [r4, #20]
 8007134:	443e      	add	r6, r7
 8007136:	1bed      	subs	r5, r5, r7
 8007138:	6026      	str	r6, [r4, #0]
 800713a:	60a5      	str	r5, [r4, #8]
 800713c:	464e      	mov	r6, r9
 800713e:	454e      	cmp	r6, r9
 8007140:	d900      	bls.n	8007144 <__ssputs_r+0x84>
 8007142:	464e      	mov	r6, r9
 8007144:	4632      	mov	r2, r6
 8007146:	4641      	mov	r1, r8
 8007148:	6820      	ldr	r0, [r4, #0]
 800714a:	f000 fa9e 	bl	800768a <memmove>
 800714e:	68a3      	ldr	r3, [r4, #8]
 8007150:	1b9b      	subs	r3, r3, r6
 8007152:	60a3      	str	r3, [r4, #8]
 8007154:	6823      	ldr	r3, [r4, #0]
 8007156:	441e      	add	r6, r3
 8007158:	6026      	str	r6, [r4, #0]
 800715a:	2000      	movs	r0, #0
 800715c:	e7dc      	b.n	8007118 <__ssputs_r+0x58>
 800715e:	462a      	mov	r2, r5
 8007160:	f000 fb54 	bl	800780c <_realloc_r>
 8007164:	4606      	mov	r6, r0
 8007166:	2800      	cmp	r0, #0
 8007168:	d1e2      	bne.n	8007130 <__ssputs_r+0x70>
 800716a:	6921      	ldr	r1, [r4, #16]
 800716c:	4650      	mov	r0, sl
 800716e:	f000 faa5 	bl	80076bc <_free_r>
 8007172:	e7c8      	b.n	8007106 <__ssputs_r+0x46>

08007174 <_svfiprintf_r>:
 8007174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007178:	461d      	mov	r5, r3
 800717a:	898b      	ldrh	r3, [r1, #12]
 800717c:	061f      	lsls	r7, r3, #24
 800717e:	b09d      	sub	sp, #116	; 0x74
 8007180:	4680      	mov	r8, r0
 8007182:	460c      	mov	r4, r1
 8007184:	4616      	mov	r6, r2
 8007186:	d50f      	bpl.n	80071a8 <_svfiprintf_r+0x34>
 8007188:	690b      	ldr	r3, [r1, #16]
 800718a:	b96b      	cbnz	r3, 80071a8 <_svfiprintf_r+0x34>
 800718c:	2140      	movs	r1, #64	; 0x40
 800718e:	f000 fae3 	bl	8007758 <_malloc_r>
 8007192:	6020      	str	r0, [r4, #0]
 8007194:	6120      	str	r0, [r4, #16]
 8007196:	b928      	cbnz	r0, 80071a4 <_svfiprintf_r+0x30>
 8007198:	230c      	movs	r3, #12
 800719a:	f8c8 3000 	str.w	r3, [r8]
 800719e:	f04f 30ff 	mov.w	r0, #4294967295
 80071a2:	e0c8      	b.n	8007336 <_svfiprintf_r+0x1c2>
 80071a4:	2340      	movs	r3, #64	; 0x40
 80071a6:	6163      	str	r3, [r4, #20]
 80071a8:	2300      	movs	r3, #0
 80071aa:	9309      	str	r3, [sp, #36]	; 0x24
 80071ac:	2320      	movs	r3, #32
 80071ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80071b2:	2330      	movs	r3, #48	; 0x30
 80071b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80071b8:	9503      	str	r5, [sp, #12]
 80071ba:	f04f 0b01 	mov.w	fp, #1
 80071be:	4637      	mov	r7, r6
 80071c0:	463d      	mov	r5, r7
 80071c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80071c6:	b10b      	cbz	r3, 80071cc <_svfiprintf_r+0x58>
 80071c8:	2b25      	cmp	r3, #37	; 0x25
 80071ca:	d13e      	bne.n	800724a <_svfiprintf_r+0xd6>
 80071cc:	ebb7 0a06 	subs.w	sl, r7, r6
 80071d0:	d00b      	beq.n	80071ea <_svfiprintf_r+0x76>
 80071d2:	4653      	mov	r3, sl
 80071d4:	4632      	mov	r2, r6
 80071d6:	4621      	mov	r1, r4
 80071d8:	4640      	mov	r0, r8
 80071da:	f7ff ff71 	bl	80070c0 <__ssputs_r>
 80071de:	3001      	adds	r0, #1
 80071e0:	f000 80a4 	beq.w	800732c <_svfiprintf_r+0x1b8>
 80071e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071e6:	4453      	add	r3, sl
 80071e8:	9309      	str	r3, [sp, #36]	; 0x24
 80071ea:	783b      	ldrb	r3, [r7, #0]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	f000 809d 	beq.w	800732c <_svfiprintf_r+0x1b8>
 80071f2:	2300      	movs	r3, #0
 80071f4:	f04f 32ff 	mov.w	r2, #4294967295
 80071f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071fc:	9304      	str	r3, [sp, #16]
 80071fe:	9307      	str	r3, [sp, #28]
 8007200:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007204:	931a      	str	r3, [sp, #104]	; 0x68
 8007206:	462f      	mov	r7, r5
 8007208:	2205      	movs	r2, #5
 800720a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800720e:	4850      	ldr	r0, [pc, #320]	; (8007350 <_svfiprintf_r+0x1dc>)
 8007210:	f7f9 f866 	bl	80002e0 <memchr>
 8007214:	9b04      	ldr	r3, [sp, #16]
 8007216:	b9d0      	cbnz	r0, 800724e <_svfiprintf_r+0xda>
 8007218:	06d9      	lsls	r1, r3, #27
 800721a:	bf44      	itt	mi
 800721c:	2220      	movmi	r2, #32
 800721e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007222:	071a      	lsls	r2, r3, #28
 8007224:	bf44      	itt	mi
 8007226:	222b      	movmi	r2, #43	; 0x2b
 8007228:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800722c:	782a      	ldrb	r2, [r5, #0]
 800722e:	2a2a      	cmp	r2, #42	; 0x2a
 8007230:	d015      	beq.n	800725e <_svfiprintf_r+0xea>
 8007232:	9a07      	ldr	r2, [sp, #28]
 8007234:	462f      	mov	r7, r5
 8007236:	2000      	movs	r0, #0
 8007238:	250a      	movs	r5, #10
 800723a:	4639      	mov	r1, r7
 800723c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007240:	3b30      	subs	r3, #48	; 0x30
 8007242:	2b09      	cmp	r3, #9
 8007244:	d94d      	bls.n	80072e2 <_svfiprintf_r+0x16e>
 8007246:	b1b8      	cbz	r0, 8007278 <_svfiprintf_r+0x104>
 8007248:	e00f      	b.n	800726a <_svfiprintf_r+0xf6>
 800724a:	462f      	mov	r7, r5
 800724c:	e7b8      	b.n	80071c0 <_svfiprintf_r+0x4c>
 800724e:	4a40      	ldr	r2, [pc, #256]	; (8007350 <_svfiprintf_r+0x1dc>)
 8007250:	1a80      	subs	r0, r0, r2
 8007252:	fa0b f000 	lsl.w	r0, fp, r0
 8007256:	4318      	orrs	r0, r3
 8007258:	9004      	str	r0, [sp, #16]
 800725a:	463d      	mov	r5, r7
 800725c:	e7d3      	b.n	8007206 <_svfiprintf_r+0x92>
 800725e:	9a03      	ldr	r2, [sp, #12]
 8007260:	1d11      	adds	r1, r2, #4
 8007262:	6812      	ldr	r2, [r2, #0]
 8007264:	9103      	str	r1, [sp, #12]
 8007266:	2a00      	cmp	r2, #0
 8007268:	db01      	blt.n	800726e <_svfiprintf_r+0xfa>
 800726a:	9207      	str	r2, [sp, #28]
 800726c:	e004      	b.n	8007278 <_svfiprintf_r+0x104>
 800726e:	4252      	negs	r2, r2
 8007270:	f043 0302 	orr.w	r3, r3, #2
 8007274:	9207      	str	r2, [sp, #28]
 8007276:	9304      	str	r3, [sp, #16]
 8007278:	783b      	ldrb	r3, [r7, #0]
 800727a:	2b2e      	cmp	r3, #46	; 0x2e
 800727c:	d10c      	bne.n	8007298 <_svfiprintf_r+0x124>
 800727e:	787b      	ldrb	r3, [r7, #1]
 8007280:	2b2a      	cmp	r3, #42	; 0x2a
 8007282:	d133      	bne.n	80072ec <_svfiprintf_r+0x178>
 8007284:	9b03      	ldr	r3, [sp, #12]
 8007286:	1d1a      	adds	r2, r3, #4
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	9203      	str	r2, [sp, #12]
 800728c:	2b00      	cmp	r3, #0
 800728e:	bfb8      	it	lt
 8007290:	f04f 33ff 	movlt.w	r3, #4294967295
 8007294:	3702      	adds	r7, #2
 8007296:	9305      	str	r3, [sp, #20]
 8007298:	4d2e      	ldr	r5, [pc, #184]	; (8007354 <_svfiprintf_r+0x1e0>)
 800729a:	7839      	ldrb	r1, [r7, #0]
 800729c:	2203      	movs	r2, #3
 800729e:	4628      	mov	r0, r5
 80072a0:	f7f9 f81e 	bl	80002e0 <memchr>
 80072a4:	b138      	cbz	r0, 80072b6 <_svfiprintf_r+0x142>
 80072a6:	2340      	movs	r3, #64	; 0x40
 80072a8:	1b40      	subs	r0, r0, r5
 80072aa:	fa03 f000 	lsl.w	r0, r3, r0
 80072ae:	9b04      	ldr	r3, [sp, #16]
 80072b0:	4303      	orrs	r3, r0
 80072b2:	3701      	adds	r7, #1
 80072b4:	9304      	str	r3, [sp, #16]
 80072b6:	7839      	ldrb	r1, [r7, #0]
 80072b8:	4827      	ldr	r0, [pc, #156]	; (8007358 <_svfiprintf_r+0x1e4>)
 80072ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80072be:	2206      	movs	r2, #6
 80072c0:	1c7e      	adds	r6, r7, #1
 80072c2:	f7f9 f80d 	bl	80002e0 <memchr>
 80072c6:	2800      	cmp	r0, #0
 80072c8:	d038      	beq.n	800733c <_svfiprintf_r+0x1c8>
 80072ca:	4b24      	ldr	r3, [pc, #144]	; (800735c <_svfiprintf_r+0x1e8>)
 80072cc:	bb13      	cbnz	r3, 8007314 <_svfiprintf_r+0x1a0>
 80072ce:	9b03      	ldr	r3, [sp, #12]
 80072d0:	3307      	adds	r3, #7
 80072d2:	f023 0307 	bic.w	r3, r3, #7
 80072d6:	3308      	adds	r3, #8
 80072d8:	9303      	str	r3, [sp, #12]
 80072da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072dc:	444b      	add	r3, r9
 80072de:	9309      	str	r3, [sp, #36]	; 0x24
 80072e0:	e76d      	b.n	80071be <_svfiprintf_r+0x4a>
 80072e2:	fb05 3202 	mla	r2, r5, r2, r3
 80072e6:	2001      	movs	r0, #1
 80072e8:	460f      	mov	r7, r1
 80072ea:	e7a6      	b.n	800723a <_svfiprintf_r+0xc6>
 80072ec:	2300      	movs	r3, #0
 80072ee:	3701      	adds	r7, #1
 80072f0:	9305      	str	r3, [sp, #20]
 80072f2:	4619      	mov	r1, r3
 80072f4:	250a      	movs	r5, #10
 80072f6:	4638      	mov	r0, r7
 80072f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072fc:	3a30      	subs	r2, #48	; 0x30
 80072fe:	2a09      	cmp	r2, #9
 8007300:	d903      	bls.n	800730a <_svfiprintf_r+0x196>
 8007302:	2b00      	cmp	r3, #0
 8007304:	d0c8      	beq.n	8007298 <_svfiprintf_r+0x124>
 8007306:	9105      	str	r1, [sp, #20]
 8007308:	e7c6      	b.n	8007298 <_svfiprintf_r+0x124>
 800730a:	fb05 2101 	mla	r1, r5, r1, r2
 800730e:	2301      	movs	r3, #1
 8007310:	4607      	mov	r7, r0
 8007312:	e7f0      	b.n	80072f6 <_svfiprintf_r+0x182>
 8007314:	ab03      	add	r3, sp, #12
 8007316:	9300      	str	r3, [sp, #0]
 8007318:	4622      	mov	r2, r4
 800731a:	4b11      	ldr	r3, [pc, #68]	; (8007360 <_svfiprintf_r+0x1ec>)
 800731c:	a904      	add	r1, sp, #16
 800731e:	4640      	mov	r0, r8
 8007320:	f3af 8000 	nop.w
 8007324:	f1b0 3fff 	cmp.w	r0, #4294967295
 8007328:	4681      	mov	r9, r0
 800732a:	d1d6      	bne.n	80072da <_svfiprintf_r+0x166>
 800732c:	89a3      	ldrh	r3, [r4, #12]
 800732e:	065b      	lsls	r3, r3, #25
 8007330:	f53f af35 	bmi.w	800719e <_svfiprintf_r+0x2a>
 8007334:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007336:	b01d      	add	sp, #116	; 0x74
 8007338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800733c:	ab03      	add	r3, sp, #12
 800733e:	9300      	str	r3, [sp, #0]
 8007340:	4622      	mov	r2, r4
 8007342:	4b07      	ldr	r3, [pc, #28]	; (8007360 <_svfiprintf_r+0x1ec>)
 8007344:	a904      	add	r1, sp, #16
 8007346:	4640      	mov	r0, r8
 8007348:	f000 f882 	bl	8007450 <_printf_i>
 800734c:	e7ea      	b.n	8007324 <_svfiprintf_r+0x1b0>
 800734e:	bf00      	nop
 8007350:	08007904 	.word	0x08007904
 8007354:	0800790a 	.word	0x0800790a
 8007358:	0800790e 	.word	0x0800790e
 800735c:	00000000 	.word	0x00000000
 8007360:	080070c1 	.word	0x080070c1

08007364 <_printf_common>:
 8007364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007368:	4691      	mov	r9, r2
 800736a:	461f      	mov	r7, r3
 800736c:	688a      	ldr	r2, [r1, #8]
 800736e:	690b      	ldr	r3, [r1, #16]
 8007370:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007374:	4293      	cmp	r3, r2
 8007376:	bfb8      	it	lt
 8007378:	4613      	movlt	r3, r2
 800737a:	f8c9 3000 	str.w	r3, [r9]
 800737e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007382:	4606      	mov	r6, r0
 8007384:	460c      	mov	r4, r1
 8007386:	b112      	cbz	r2, 800738e <_printf_common+0x2a>
 8007388:	3301      	adds	r3, #1
 800738a:	f8c9 3000 	str.w	r3, [r9]
 800738e:	6823      	ldr	r3, [r4, #0]
 8007390:	0699      	lsls	r1, r3, #26
 8007392:	bf42      	ittt	mi
 8007394:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007398:	3302      	addmi	r3, #2
 800739a:	f8c9 3000 	strmi.w	r3, [r9]
 800739e:	6825      	ldr	r5, [r4, #0]
 80073a0:	f015 0506 	ands.w	r5, r5, #6
 80073a4:	d107      	bne.n	80073b6 <_printf_common+0x52>
 80073a6:	f104 0a19 	add.w	sl, r4, #25
 80073aa:	68e3      	ldr	r3, [r4, #12]
 80073ac:	f8d9 2000 	ldr.w	r2, [r9]
 80073b0:	1a9b      	subs	r3, r3, r2
 80073b2:	42ab      	cmp	r3, r5
 80073b4:	dc28      	bgt.n	8007408 <_printf_common+0xa4>
 80073b6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80073ba:	6822      	ldr	r2, [r4, #0]
 80073bc:	3300      	adds	r3, #0
 80073be:	bf18      	it	ne
 80073c0:	2301      	movne	r3, #1
 80073c2:	0692      	lsls	r2, r2, #26
 80073c4:	d42d      	bmi.n	8007422 <_printf_common+0xbe>
 80073c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073ca:	4639      	mov	r1, r7
 80073cc:	4630      	mov	r0, r6
 80073ce:	47c0      	blx	r8
 80073d0:	3001      	adds	r0, #1
 80073d2:	d020      	beq.n	8007416 <_printf_common+0xb2>
 80073d4:	6823      	ldr	r3, [r4, #0]
 80073d6:	68e5      	ldr	r5, [r4, #12]
 80073d8:	f8d9 2000 	ldr.w	r2, [r9]
 80073dc:	f003 0306 	and.w	r3, r3, #6
 80073e0:	2b04      	cmp	r3, #4
 80073e2:	bf08      	it	eq
 80073e4:	1aad      	subeq	r5, r5, r2
 80073e6:	68a3      	ldr	r3, [r4, #8]
 80073e8:	6922      	ldr	r2, [r4, #16]
 80073ea:	bf0c      	ite	eq
 80073ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073f0:	2500      	movne	r5, #0
 80073f2:	4293      	cmp	r3, r2
 80073f4:	bfc4      	itt	gt
 80073f6:	1a9b      	subgt	r3, r3, r2
 80073f8:	18ed      	addgt	r5, r5, r3
 80073fa:	f04f 0900 	mov.w	r9, #0
 80073fe:	341a      	adds	r4, #26
 8007400:	454d      	cmp	r5, r9
 8007402:	d11a      	bne.n	800743a <_printf_common+0xd6>
 8007404:	2000      	movs	r0, #0
 8007406:	e008      	b.n	800741a <_printf_common+0xb6>
 8007408:	2301      	movs	r3, #1
 800740a:	4652      	mov	r2, sl
 800740c:	4639      	mov	r1, r7
 800740e:	4630      	mov	r0, r6
 8007410:	47c0      	blx	r8
 8007412:	3001      	adds	r0, #1
 8007414:	d103      	bne.n	800741e <_printf_common+0xba>
 8007416:	f04f 30ff 	mov.w	r0, #4294967295
 800741a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800741e:	3501      	adds	r5, #1
 8007420:	e7c3      	b.n	80073aa <_printf_common+0x46>
 8007422:	18e1      	adds	r1, r4, r3
 8007424:	1c5a      	adds	r2, r3, #1
 8007426:	2030      	movs	r0, #48	; 0x30
 8007428:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800742c:	4422      	add	r2, r4
 800742e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007432:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007436:	3302      	adds	r3, #2
 8007438:	e7c5      	b.n	80073c6 <_printf_common+0x62>
 800743a:	2301      	movs	r3, #1
 800743c:	4622      	mov	r2, r4
 800743e:	4639      	mov	r1, r7
 8007440:	4630      	mov	r0, r6
 8007442:	47c0      	blx	r8
 8007444:	3001      	adds	r0, #1
 8007446:	d0e6      	beq.n	8007416 <_printf_common+0xb2>
 8007448:	f109 0901 	add.w	r9, r9, #1
 800744c:	e7d8      	b.n	8007400 <_printf_common+0x9c>
	...

08007450 <_printf_i>:
 8007450:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007454:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007458:	460c      	mov	r4, r1
 800745a:	7e09      	ldrb	r1, [r1, #24]
 800745c:	b085      	sub	sp, #20
 800745e:	296e      	cmp	r1, #110	; 0x6e
 8007460:	4617      	mov	r7, r2
 8007462:	4606      	mov	r6, r0
 8007464:	4698      	mov	r8, r3
 8007466:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007468:	f000 80b3 	beq.w	80075d2 <_printf_i+0x182>
 800746c:	d822      	bhi.n	80074b4 <_printf_i+0x64>
 800746e:	2963      	cmp	r1, #99	; 0x63
 8007470:	d036      	beq.n	80074e0 <_printf_i+0x90>
 8007472:	d80a      	bhi.n	800748a <_printf_i+0x3a>
 8007474:	2900      	cmp	r1, #0
 8007476:	f000 80b9 	beq.w	80075ec <_printf_i+0x19c>
 800747a:	2958      	cmp	r1, #88	; 0x58
 800747c:	f000 8083 	beq.w	8007586 <_printf_i+0x136>
 8007480:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007484:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007488:	e032      	b.n	80074f0 <_printf_i+0xa0>
 800748a:	2964      	cmp	r1, #100	; 0x64
 800748c:	d001      	beq.n	8007492 <_printf_i+0x42>
 800748e:	2969      	cmp	r1, #105	; 0x69
 8007490:	d1f6      	bne.n	8007480 <_printf_i+0x30>
 8007492:	6820      	ldr	r0, [r4, #0]
 8007494:	6813      	ldr	r3, [r2, #0]
 8007496:	0605      	lsls	r5, r0, #24
 8007498:	f103 0104 	add.w	r1, r3, #4
 800749c:	d52a      	bpl.n	80074f4 <_printf_i+0xa4>
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	6011      	str	r1, [r2, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	da03      	bge.n	80074ae <_printf_i+0x5e>
 80074a6:	222d      	movs	r2, #45	; 0x2d
 80074a8:	425b      	negs	r3, r3
 80074aa:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80074ae:	486f      	ldr	r0, [pc, #444]	; (800766c <_printf_i+0x21c>)
 80074b0:	220a      	movs	r2, #10
 80074b2:	e039      	b.n	8007528 <_printf_i+0xd8>
 80074b4:	2973      	cmp	r1, #115	; 0x73
 80074b6:	f000 809d 	beq.w	80075f4 <_printf_i+0x1a4>
 80074ba:	d808      	bhi.n	80074ce <_printf_i+0x7e>
 80074bc:	296f      	cmp	r1, #111	; 0x6f
 80074be:	d020      	beq.n	8007502 <_printf_i+0xb2>
 80074c0:	2970      	cmp	r1, #112	; 0x70
 80074c2:	d1dd      	bne.n	8007480 <_printf_i+0x30>
 80074c4:	6823      	ldr	r3, [r4, #0]
 80074c6:	f043 0320 	orr.w	r3, r3, #32
 80074ca:	6023      	str	r3, [r4, #0]
 80074cc:	e003      	b.n	80074d6 <_printf_i+0x86>
 80074ce:	2975      	cmp	r1, #117	; 0x75
 80074d0:	d017      	beq.n	8007502 <_printf_i+0xb2>
 80074d2:	2978      	cmp	r1, #120	; 0x78
 80074d4:	d1d4      	bne.n	8007480 <_printf_i+0x30>
 80074d6:	2378      	movs	r3, #120	; 0x78
 80074d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074dc:	4864      	ldr	r0, [pc, #400]	; (8007670 <_printf_i+0x220>)
 80074de:	e055      	b.n	800758c <_printf_i+0x13c>
 80074e0:	6813      	ldr	r3, [r2, #0]
 80074e2:	1d19      	adds	r1, r3, #4
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	6011      	str	r1, [r2, #0]
 80074e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074f0:	2301      	movs	r3, #1
 80074f2:	e08c      	b.n	800760e <_printf_i+0x1be>
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	6011      	str	r1, [r2, #0]
 80074f8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80074fc:	bf18      	it	ne
 80074fe:	b21b      	sxthne	r3, r3
 8007500:	e7cf      	b.n	80074a2 <_printf_i+0x52>
 8007502:	6813      	ldr	r3, [r2, #0]
 8007504:	6825      	ldr	r5, [r4, #0]
 8007506:	1d18      	adds	r0, r3, #4
 8007508:	6010      	str	r0, [r2, #0]
 800750a:	0628      	lsls	r0, r5, #24
 800750c:	d501      	bpl.n	8007512 <_printf_i+0xc2>
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	e002      	b.n	8007518 <_printf_i+0xc8>
 8007512:	0668      	lsls	r0, r5, #25
 8007514:	d5fb      	bpl.n	800750e <_printf_i+0xbe>
 8007516:	881b      	ldrh	r3, [r3, #0]
 8007518:	4854      	ldr	r0, [pc, #336]	; (800766c <_printf_i+0x21c>)
 800751a:	296f      	cmp	r1, #111	; 0x6f
 800751c:	bf14      	ite	ne
 800751e:	220a      	movne	r2, #10
 8007520:	2208      	moveq	r2, #8
 8007522:	2100      	movs	r1, #0
 8007524:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007528:	6865      	ldr	r5, [r4, #4]
 800752a:	60a5      	str	r5, [r4, #8]
 800752c:	2d00      	cmp	r5, #0
 800752e:	f2c0 8095 	blt.w	800765c <_printf_i+0x20c>
 8007532:	6821      	ldr	r1, [r4, #0]
 8007534:	f021 0104 	bic.w	r1, r1, #4
 8007538:	6021      	str	r1, [r4, #0]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d13d      	bne.n	80075ba <_printf_i+0x16a>
 800753e:	2d00      	cmp	r5, #0
 8007540:	f040 808e 	bne.w	8007660 <_printf_i+0x210>
 8007544:	4665      	mov	r5, ip
 8007546:	2a08      	cmp	r2, #8
 8007548:	d10b      	bne.n	8007562 <_printf_i+0x112>
 800754a:	6823      	ldr	r3, [r4, #0]
 800754c:	07db      	lsls	r3, r3, #31
 800754e:	d508      	bpl.n	8007562 <_printf_i+0x112>
 8007550:	6923      	ldr	r3, [r4, #16]
 8007552:	6862      	ldr	r2, [r4, #4]
 8007554:	429a      	cmp	r2, r3
 8007556:	bfde      	ittt	le
 8007558:	2330      	movle	r3, #48	; 0x30
 800755a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800755e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007562:	ebac 0305 	sub.w	r3, ip, r5
 8007566:	6123      	str	r3, [r4, #16]
 8007568:	f8cd 8000 	str.w	r8, [sp]
 800756c:	463b      	mov	r3, r7
 800756e:	aa03      	add	r2, sp, #12
 8007570:	4621      	mov	r1, r4
 8007572:	4630      	mov	r0, r6
 8007574:	f7ff fef6 	bl	8007364 <_printf_common>
 8007578:	3001      	adds	r0, #1
 800757a:	d14d      	bne.n	8007618 <_printf_i+0x1c8>
 800757c:	f04f 30ff 	mov.w	r0, #4294967295
 8007580:	b005      	add	sp, #20
 8007582:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007586:	4839      	ldr	r0, [pc, #228]	; (800766c <_printf_i+0x21c>)
 8007588:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800758c:	6813      	ldr	r3, [r2, #0]
 800758e:	6821      	ldr	r1, [r4, #0]
 8007590:	1d1d      	adds	r5, r3, #4
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	6015      	str	r5, [r2, #0]
 8007596:	060a      	lsls	r2, r1, #24
 8007598:	d50b      	bpl.n	80075b2 <_printf_i+0x162>
 800759a:	07ca      	lsls	r2, r1, #31
 800759c:	bf44      	itt	mi
 800759e:	f041 0120 	orrmi.w	r1, r1, #32
 80075a2:	6021      	strmi	r1, [r4, #0]
 80075a4:	b91b      	cbnz	r3, 80075ae <_printf_i+0x15e>
 80075a6:	6822      	ldr	r2, [r4, #0]
 80075a8:	f022 0220 	bic.w	r2, r2, #32
 80075ac:	6022      	str	r2, [r4, #0]
 80075ae:	2210      	movs	r2, #16
 80075b0:	e7b7      	b.n	8007522 <_printf_i+0xd2>
 80075b2:	064d      	lsls	r5, r1, #25
 80075b4:	bf48      	it	mi
 80075b6:	b29b      	uxthmi	r3, r3
 80075b8:	e7ef      	b.n	800759a <_printf_i+0x14a>
 80075ba:	4665      	mov	r5, ip
 80075bc:	fbb3 f1f2 	udiv	r1, r3, r2
 80075c0:	fb02 3311 	mls	r3, r2, r1, r3
 80075c4:	5cc3      	ldrb	r3, [r0, r3]
 80075c6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80075ca:	460b      	mov	r3, r1
 80075cc:	2900      	cmp	r1, #0
 80075ce:	d1f5      	bne.n	80075bc <_printf_i+0x16c>
 80075d0:	e7b9      	b.n	8007546 <_printf_i+0xf6>
 80075d2:	6813      	ldr	r3, [r2, #0]
 80075d4:	6825      	ldr	r5, [r4, #0]
 80075d6:	6961      	ldr	r1, [r4, #20]
 80075d8:	1d18      	adds	r0, r3, #4
 80075da:	6010      	str	r0, [r2, #0]
 80075dc:	0628      	lsls	r0, r5, #24
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	d501      	bpl.n	80075e6 <_printf_i+0x196>
 80075e2:	6019      	str	r1, [r3, #0]
 80075e4:	e002      	b.n	80075ec <_printf_i+0x19c>
 80075e6:	066a      	lsls	r2, r5, #25
 80075e8:	d5fb      	bpl.n	80075e2 <_printf_i+0x192>
 80075ea:	8019      	strh	r1, [r3, #0]
 80075ec:	2300      	movs	r3, #0
 80075ee:	6123      	str	r3, [r4, #16]
 80075f0:	4665      	mov	r5, ip
 80075f2:	e7b9      	b.n	8007568 <_printf_i+0x118>
 80075f4:	6813      	ldr	r3, [r2, #0]
 80075f6:	1d19      	adds	r1, r3, #4
 80075f8:	6011      	str	r1, [r2, #0]
 80075fa:	681d      	ldr	r5, [r3, #0]
 80075fc:	6862      	ldr	r2, [r4, #4]
 80075fe:	2100      	movs	r1, #0
 8007600:	4628      	mov	r0, r5
 8007602:	f7f8 fe6d 	bl	80002e0 <memchr>
 8007606:	b108      	cbz	r0, 800760c <_printf_i+0x1bc>
 8007608:	1b40      	subs	r0, r0, r5
 800760a:	6060      	str	r0, [r4, #4]
 800760c:	6863      	ldr	r3, [r4, #4]
 800760e:	6123      	str	r3, [r4, #16]
 8007610:	2300      	movs	r3, #0
 8007612:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007616:	e7a7      	b.n	8007568 <_printf_i+0x118>
 8007618:	6923      	ldr	r3, [r4, #16]
 800761a:	462a      	mov	r2, r5
 800761c:	4639      	mov	r1, r7
 800761e:	4630      	mov	r0, r6
 8007620:	47c0      	blx	r8
 8007622:	3001      	adds	r0, #1
 8007624:	d0aa      	beq.n	800757c <_printf_i+0x12c>
 8007626:	6823      	ldr	r3, [r4, #0]
 8007628:	079b      	lsls	r3, r3, #30
 800762a:	d413      	bmi.n	8007654 <_printf_i+0x204>
 800762c:	68e0      	ldr	r0, [r4, #12]
 800762e:	9b03      	ldr	r3, [sp, #12]
 8007630:	4298      	cmp	r0, r3
 8007632:	bfb8      	it	lt
 8007634:	4618      	movlt	r0, r3
 8007636:	e7a3      	b.n	8007580 <_printf_i+0x130>
 8007638:	2301      	movs	r3, #1
 800763a:	464a      	mov	r2, r9
 800763c:	4639      	mov	r1, r7
 800763e:	4630      	mov	r0, r6
 8007640:	47c0      	blx	r8
 8007642:	3001      	adds	r0, #1
 8007644:	d09a      	beq.n	800757c <_printf_i+0x12c>
 8007646:	3501      	adds	r5, #1
 8007648:	68e3      	ldr	r3, [r4, #12]
 800764a:	9a03      	ldr	r2, [sp, #12]
 800764c:	1a9b      	subs	r3, r3, r2
 800764e:	42ab      	cmp	r3, r5
 8007650:	dcf2      	bgt.n	8007638 <_printf_i+0x1e8>
 8007652:	e7eb      	b.n	800762c <_printf_i+0x1dc>
 8007654:	2500      	movs	r5, #0
 8007656:	f104 0919 	add.w	r9, r4, #25
 800765a:	e7f5      	b.n	8007648 <_printf_i+0x1f8>
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1ac      	bne.n	80075ba <_printf_i+0x16a>
 8007660:	7803      	ldrb	r3, [r0, #0]
 8007662:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007666:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800766a:	e76c      	b.n	8007546 <_printf_i+0xf6>
 800766c:	08007915 	.word	0x08007915
 8007670:	08007926 	.word	0x08007926

08007674 <memcpy>:
 8007674:	b510      	push	{r4, lr}
 8007676:	1e43      	subs	r3, r0, #1
 8007678:	440a      	add	r2, r1
 800767a:	4291      	cmp	r1, r2
 800767c:	d100      	bne.n	8007680 <memcpy+0xc>
 800767e:	bd10      	pop	{r4, pc}
 8007680:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007684:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007688:	e7f7      	b.n	800767a <memcpy+0x6>

0800768a <memmove>:
 800768a:	4288      	cmp	r0, r1
 800768c:	b510      	push	{r4, lr}
 800768e:	eb01 0302 	add.w	r3, r1, r2
 8007692:	d807      	bhi.n	80076a4 <memmove+0x1a>
 8007694:	1e42      	subs	r2, r0, #1
 8007696:	4299      	cmp	r1, r3
 8007698:	d00a      	beq.n	80076b0 <memmove+0x26>
 800769a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800769e:	f802 4f01 	strb.w	r4, [r2, #1]!
 80076a2:	e7f8      	b.n	8007696 <memmove+0xc>
 80076a4:	4283      	cmp	r3, r0
 80076a6:	d9f5      	bls.n	8007694 <memmove+0xa>
 80076a8:	1881      	adds	r1, r0, r2
 80076aa:	1ad2      	subs	r2, r2, r3
 80076ac:	42d3      	cmn	r3, r2
 80076ae:	d100      	bne.n	80076b2 <memmove+0x28>
 80076b0:	bd10      	pop	{r4, pc}
 80076b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076b6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80076ba:	e7f7      	b.n	80076ac <memmove+0x22>

080076bc <_free_r>:
 80076bc:	b538      	push	{r3, r4, r5, lr}
 80076be:	4605      	mov	r5, r0
 80076c0:	2900      	cmp	r1, #0
 80076c2:	d045      	beq.n	8007750 <_free_r+0x94>
 80076c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076c8:	1f0c      	subs	r4, r1, #4
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	bfb8      	it	lt
 80076ce:	18e4      	addlt	r4, r4, r3
 80076d0:	f000 f8d2 	bl	8007878 <__malloc_lock>
 80076d4:	4a1f      	ldr	r2, [pc, #124]	; (8007754 <_free_r+0x98>)
 80076d6:	6813      	ldr	r3, [r2, #0]
 80076d8:	4610      	mov	r0, r2
 80076da:	b933      	cbnz	r3, 80076ea <_free_r+0x2e>
 80076dc:	6063      	str	r3, [r4, #4]
 80076de:	6014      	str	r4, [r2, #0]
 80076e0:	4628      	mov	r0, r5
 80076e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076e6:	f000 b8c8 	b.w	800787a <__malloc_unlock>
 80076ea:	42a3      	cmp	r3, r4
 80076ec:	d90c      	bls.n	8007708 <_free_r+0x4c>
 80076ee:	6821      	ldr	r1, [r4, #0]
 80076f0:	1862      	adds	r2, r4, r1
 80076f2:	4293      	cmp	r3, r2
 80076f4:	bf04      	itt	eq
 80076f6:	681a      	ldreq	r2, [r3, #0]
 80076f8:	685b      	ldreq	r3, [r3, #4]
 80076fa:	6063      	str	r3, [r4, #4]
 80076fc:	bf04      	itt	eq
 80076fe:	1852      	addeq	r2, r2, r1
 8007700:	6022      	streq	r2, [r4, #0]
 8007702:	6004      	str	r4, [r0, #0]
 8007704:	e7ec      	b.n	80076e0 <_free_r+0x24>
 8007706:	4613      	mov	r3, r2
 8007708:	685a      	ldr	r2, [r3, #4]
 800770a:	b10a      	cbz	r2, 8007710 <_free_r+0x54>
 800770c:	42a2      	cmp	r2, r4
 800770e:	d9fa      	bls.n	8007706 <_free_r+0x4a>
 8007710:	6819      	ldr	r1, [r3, #0]
 8007712:	1858      	adds	r0, r3, r1
 8007714:	42a0      	cmp	r0, r4
 8007716:	d10b      	bne.n	8007730 <_free_r+0x74>
 8007718:	6820      	ldr	r0, [r4, #0]
 800771a:	4401      	add	r1, r0
 800771c:	1858      	adds	r0, r3, r1
 800771e:	4282      	cmp	r2, r0
 8007720:	6019      	str	r1, [r3, #0]
 8007722:	d1dd      	bne.n	80076e0 <_free_r+0x24>
 8007724:	6810      	ldr	r0, [r2, #0]
 8007726:	6852      	ldr	r2, [r2, #4]
 8007728:	605a      	str	r2, [r3, #4]
 800772a:	4401      	add	r1, r0
 800772c:	6019      	str	r1, [r3, #0]
 800772e:	e7d7      	b.n	80076e0 <_free_r+0x24>
 8007730:	d902      	bls.n	8007738 <_free_r+0x7c>
 8007732:	230c      	movs	r3, #12
 8007734:	602b      	str	r3, [r5, #0]
 8007736:	e7d3      	b.n	80076e0 <_free_r+0x24>
 8007738:	6820      	ldr	r0, [r4, #0]
 800773a:	1821      	adds	r1, r4, r0
 800773c:	428a      	cmp	r2, r1
 800773e:	bf04      	itt	eq
 8007740:	6811      	ldreq	r1, [r2, #0]
 8007742:	6852      	ldreq	r2, [r2, #4]
 8007744:	6062      	str	r2, [r4, #4]
 8007746:	bf04      	itt	eq
 8007748:	1809      	addeq	r1, r1, r0
 800774a:	6021      	streq	r1, [r4, #0]
 800774c:	605c      	str	r4, [r3, #4]
 800774e:	e7c7      	b.n	80076e0 <_free_r+0x24>
 8007750:	bd38      	pop	{r3, r4, r5, pc}
 8007752:	bf00      	nop
 8007754:	240001a8 	.word	0x240001a8

08007758 <_malloc_r>:
 8007758:	b570      	push	{r4, r5, r6, lr}
 800775a:	1ccd      	adds	r5, r1, #3
 800775c:	f025 0503 	bic.w	r5, r5, #3
 8007760:	3508      	adds	r5, #8
 8007762:	2d0c      	cmp	r5, #12
 8007764:	bf38      	it	cc
 8007766:	250c      	movcc	r5, #12
 8007768:	2d00      	cmp	r5, #0
 800776a:	4606      	mov	r6, r0
 800776c:	db01      	blt.n	8007772 <_malloc_r+0x1a>
 800776e:	42a9      	cmp	r1, r5
 8007770:	d903      	bls.n	800777a <_malloc_r+0x22>
 8007772:	230c      	movs	r3, #12
 8007774:	6033      	str	r3, [r6, #0]
 8007776:	2000      	movs	r0, #0
 8007778:	bd70      	pop	{r4, r5, r6, pc}
 800777a:	f000 f87d 	bl	8007878 <__malloc_lock>
 800777e:	4a21      	ldr	r2, [pc, #132]	; (8007804 <_malloc_r+0xac>)
 8007780:	6814      	ldr	r4, [r2, #0]
 8007782:	4621      	mov	r1, r4
 8007784:	b991      	cbnz	r1, 80077ac <_malloc_r+0x54>
 8007786:	4c20      	ldr	r4, [pc, #128]	; (8007808 <_malloc_r+0xb0>)
 8007788:	6823      	ldr	r3, [r4, #0]
 800778a:	b91b      	cbnz	r3, 8007794 <_malloc_r+0x3c>
 800778c:	4630      	mov	r0, r6
 800778e:	f000 f863 	bl	8007858 <_sbrk_r>
 8007792:	6020      	str	r0, [r4, #0]
 8007794:	4629      	mov	r1, r5
 8007796:	4630      	mov	r0, r6
 8007798:	f000 f85e 	bl	8007858 <_sbrk_r>
 800779c:	1c43      	adds	r3, r0, #1
 800779e:	d124      	bne.n	80077ea <_malloc_r+0x92>
 80077a0:	230c      	movs	r3, #12
 80077a2:	6033      	str	r3, [r6, #0]
 80077a4:	4630      	mov	r0, r6
 80077a6:	f000 f868 	bl	800787a <__malloc_unlock>
 80077aa:	e7e4      	b.n	8007776 <_malloc_r+0x1e>
 80077ac:	680b      	ldr	r3, [r1, #0]
 80077ae:	1b5b      	subs	r3, r3, r5
 80077b0:	d418      	bmi.n	80077e4 <_malloc_r+0x8c>
 80077b2:	2b0b      	cmp	r3, #11
 80077b4:	d90f      	bls.n	80077d6 <_malloc_r+0x7e>
 80077b6:	600b      	str	r3, [r1, #0]
 80077b8:	50cd      	str	r5, [r1, r3]
 80077ba:	18cc      	adds	r4, r1, r3
 80077bc:	4630      	mov	r0, r6
 80077be:	f000 f85c 	bl	800787a <__malloc_unlock>
 80077c2:	f104 000b 	add.w	r0, r4, #11
 80077c6:	1d23      	adds	r3, r4, #4
 80077c8:	f020 0007 	bic.w	r0, r0, #7
 80077cc:	1ac3      	subs	r3, r0, r3
 80077ce:	d0d3      	beq.n	8007778 <_malloc_r+0x20>
 80077d0:	425a      	negs	r2, r3
 80077d2:	50e2      	str	r2, [r4, r3]
 80077d4:	e7d0      	b.n	8007778 <_malloc_r+0x20>
 80077d6:	428c      	cmp	r4, r1
 80077d8:	684b      	ldr	r3, [r1, #4]
 80077da:	bf16      	itet	ne
 80077dc:	6063      	strne	r3, [r4, #4]
 80077de:	6013      	streq	r3, [r2, #0]
 80077e0:	460c      	movne	r4, r1
 80077e2:	e7eb      	b.n	80077bc <_malloc_r+0x64>
 80077e4:	460c      	mov	r4, r1
 80077e6:	6849      	ldr	r1, [r1, #4]
 80077e8:	e7cc      	b.n	8007784 <_malloc_r+0x2c>
 80077ea:	1cc4      	adds	r4, r0, #3
 80077ec:	f024 0403 	bic.w	r4, r4, #3
 80077f0:	42a0      	cmp	r0, r4
 80077f2:	d005      	beq.n	8007800 <_malloc_r+0xa8>
 80077f4:	1a21      	subs	r1, r4, r0
 80077f6:	4630      	mov	r0, r6
 80077f8:	f000 f82e 	bl	8007858 <_sbrk_r>
 80077fc:	3001      	adds	r0, #1
 80077fe:	d0cf      	beq.n	80077a0 <_malloc_r+0x48>
 8007800:	6025      	str	r5, [r4, #0]
 8007802:	e7db      	b.n	80077bc <_malloc_r+0x64>
 8007804:	240001a8 	.word	0x240001a8
 8007808:	240001ac 	.word	0x240001ac

0800780c <_realloc_r>:
 800780c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800780e:	4607      	mov	r7, r0
 8007810:	4614      	mov	r4, r2
 8007812:	460e      	mov	r6, r1
 8007814:	b921      	cbnz	r1, 8007820 <_realloc_r+0x14>
 8007816:	4611      	mov	r1, r2
 8007818:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800781c:	f7ff bf9c 	b.w	8007758 <_malloc_r>
 8007820:	b922      	cbnz	r2, 800782c <_realloc_r+0x20>
 8007822:	f7ff ff4b 	bl	80076bc <_free_r>
 8007826:	4625      	mov	r5, r4
 8007828:	4628      	mov	r0, r5
 800782a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800782c:	f000 f826 	bl	800787c <_malloc_usable_size_r>
 8007830:	42a0      	cmp	r0, r4
 8007832:	d20f      	bcs.n	8007854 <_realloc_r+0x48>
 8007834:	4621      	mov	r1, r4
 8007836:	4638      	mov	r0, r7
 8007838:	f7ff ff8e 	bl	8007758 <_malloc_r>
 800783c:	4605      	mov	r5, r0
 800783e:	2800      	cmp	r0, #0
 8007840:	d0f2      	beq.n	8007828 <_realloc_r+0x1c>
 8007842:	4631      	mov	r1, r6
 8007844:	4622      	mov	r2, r4
 8007846:	f7ff ff15 	bl	8007674 <memcpy>
 800784a:	4631      	mov	r1, r6
 800784c:	4638      	mov	r0, r7
 800784e:	f7ff ff35 	bl	80076bc <_free_r>
 8007852:	e7e9      	b.n	8007828 <_realloc_r+0x1c>
 8007854:	4635      	mov	r5, r6
 8007856:	e7e7      	b.n	8007828 <_realloc_r+0x1c>

08007858 <_sbrk_r>:
 8007858:	b538      	push	{r3, r4, r5, lr}
 800785a:	4c06      	ldr	r4, [pc, #24]	; (8007874 <_sbrk_r+0x1c>)
 800785c:	2300      	movs	r3, #0
 800785e:	4605      	mov	r5, r0
 8007860:	4608      	mov	r0, r1
 8007862:	6023      	str	r3, [r4, #0]
 8007864:	f7fa f896 	bl	8001994 <_sbrk>
 8007868:	1c43      	adds	r3, r0, #1
 800786a:	d102      	bne.n	8007872 <_sbrk_r+0x1a>
 800786c:	6823      	ldr	r3, [r4, #0]
 800786e:	b103      	cbz	r3, 8007872 <_sbrk_r+0x1a>
 8007870:	602b      	str	r3, [r5, #0]
 8007872:	bd38      	pop	{r3, r4, r5, pc}
 8007874:	240007a4 	.word	0x240007a4

08007878 <__malloc_lock>:
 8007878:	4770      	bx	lr

0800787a <__malloc_unlock>:
 800787a:	4770      	bx	lr

0800787c <_malloc_usable_size_r>:
 800787c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007880:	1f18      	subs	r0, r3, #4
 8007882:	2b00      	cmp	r3, #0
 8007884:	bfbc      	itt	lt
 8007886:	580b      	ldrlt	r3, [r1, r0]
 8007888:	18c0      	addlt	r0, r0, r3
 800788a:	4770      	bx	lr

0800788c <_init>:
 800788c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800788e:	bf00      	nop
 8007890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007892:	bc08      	pop	{r3}
 8007894:	469e      	mov	lr, r3
 8007896:	4770      	bx	lr

08007898 <_fini>:
 8007898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800789a:	bf00      	nop
 800789c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800789e:	bc08      	pop	{r3}
 80078a0:	469e      	mov	lr, r3
 80078a2:	4770      	bx	lr
